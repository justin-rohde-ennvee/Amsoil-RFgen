<Record FileDesc="PO - Item Receipts" FileVersion="5.0.8.0" Desc="PO - Item Receipts">
<Param Name="tmCO" />
<Param Name="tmMCU" />
<Param Name="tmDOCO" />
<Param Name="tmDCTO" />
<Param Name="tmLITM" />
<Param Name="tmLOTN" />
<Param Name="tmXPDT" />
<Param Name="tmLOTS" />
<Param Name="tmLOT1" />
<Param Name="tmLOT2" />
<Param Name="tmRLOT" />
<Param Name="tmLOCN" />
<Param Name="tmQTY" />
<Param Name="tmUOM" />
<Param Name="tmLNID" />
<Param Name="tmCOST" />
<Param Name="tmFUC" />
<Param Name="tmUSER" />
<Param Name="tmPGM" />
<Param Name="tmZVERSION" />
<Param Name="tmTYPE" />
<Param Name="tmRMRK" />
<Param Name="tmIVI" />
<Param Name="tmPDP5" />
<Param Name="tmERRID" />
<Param Name="tmERRTEXT" />
</Record>
<Code>
' -------------------------------------------------------------------------------
' | (C)opyright 2003-2012 The DataMAX Software Group, Inc., All Rights Reserved.|
' | RFgen JD Edwards Integration Suite Vers.# 420                               |
' -------------------------------------------------------------------------------
'
' TRANSACTION: PO - ITEM RECEIPTS
'
' NOTES:
'
' MODIFICATION HISTORY:
'

Option Explicit

Private Const cFailOnWarnings = False
Private Const cTNId         = "TPOIR0100"

Private Function Transaction(ByRef tmCO As Variant, ByRef tmMCU As Variant, ByRef tmDOCO As Variant, ByRef tmDCTO As Variant, ByRef tmLITM As Variant, ByRef tmLOTN As Variant, ByRef tmXPDT As Variant, ByRef tmLOTS As Variant, ByRef tmLOT1 As Variant, ByRef tmLOT2 As Variant, ByRef tmRLOT As Variant, ByRef tmLOCN As Variant, ByRef tmQTY As Variant, ByRef tmUOM As Variant, ByRef tmLNID As Variant, ByRef tmCOST As Variant, ByRef tmFUC As Variant, ByRef tmUSER As Variant, ByRef tmPGM As Variant, ByRef tmZVERSION As Variant, ByRef tmTYPE As Variant, ByRef tmRMRK As Variant, ByRef tmIVI As Variant, ByRef tmPDP5 As Variant, ByRef tmERRID As Variant, ByRef tmERRTEXT As Variant) As Boolean
  On Error Resume Next

  '---------------'
  '  Declarations '
  '---------------'
  Dim bSuccess    As Boolean
  Dim i           As Integer
  Dim nSDDOCO     As Long
  Dim sSDDCTO     As String
  Dim sSDLITM     As String
  Dim sSDUOM      As String
  Dim sUOM2       As String
  Dim nQty2       As Currency
  Dim nSDLNID     As Currency
  Dim nSDUORG     As Currency
  Dim nSOQty      As Currency
  Dim nRemQty     As Currency
  Dim nLNID       As Currency
  Dim nTAMT       As Currency

  Dim sCRRM       As String
  Dim sCRR        As String
  Dim sCRCD       As String
  '
  Dim nBatchNo    As Currency
  Dim nJobNo      As Currency
  Dim sErrDesc    As String
  Dim sErrID      As String
  Dim sErrText    As String

  Dim sGLDate     As String
  Dim sTNDate     As String
  Dim sSQL        As String
  Dim sCols       As String
  Dim sRows       As String
  Dim nITM        As Long
  Dim sAITM       As String
  Dim iDecCnt     As Integer
  Dim nDecMult    As Currency
  Dim sformat     As String
  Dim sDomCur     As String
  Dim nAmtRcv     As Double
  '
  Dim emGetAuditInfo                As New EmbeddedProc
  Dim emBatchOpenOnInitialization   As New EmbeddedProc
  Dim emX0010GetNextNumber          As New EmbeddedProc
  Dim emF4312BeginDoc               As New EmbeddedProc
  Dim emF4312EditLine               As New EmbeddedProc
  Dim emF4312EditDoc                As New EmbeddedProc
  Dim emF4312EndDoc                 As New EmbeddedProc
  Dim emFSCloseBatch                As New EmbeddedProc
  Dim emBatchControlProcessing      As New EmbeddedProc
  Dim emError                       As New EmbeddedProc
  Dim emBackorderReleaseEditLine    As New EmbeddedProc
  Dim emBackorderReleaseEndDoc      As New EmbeddedProc

  '----------------'
  ' Initialization '
  '----------------'
  Call SetEnvironment()  ' in case macro is running in TM
  '
  If Not gbIsE1 Then GoTo World
  '
  If Not ERP.BeginTrans Then  ' Force all business functions to use the same connection
    TM.AbortTrans
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", "ERP.BeginTrans failed" , "", Nothing, tmUSER, TM.QueueName, TM.SeqNo)
    tmERRTEXT = "No ERP Handle - retry!"
    Exit Function
  End If
  '
  sTNDate = Format(Date, "mm/dd/yyyy")
  sGLDate = cDemoGLDate
  '
  If (Len(sGLDate)=0) Then sGLDate = Format(Date, "mm/dd/yyyy")

  ' Get default information for this item
  If tmIVI = "Y" Then
    If Not GetItemInfo(tmMCU, tmLITM, cTNId, nITM, sAITM, tmUOM, sUOM2, tmQTY, nQty2) Then GoTo ExitE1
  End If

  sSQL = "select CCCRCD from F0010 where CCCO = '" & tmCO & "'"
  DB.Execute(sSQL, sCols, sRows)
  sDomCur = Trim(DB.Extract(sCols, sRows, 1, "CCCRCD"))

'  sCRRM = Trim(DB.Extract(sCols, sRows, 1, "PHCRRM"))

  sSQL = "select PDCRR, PDCRCD from F4311 where PDDOCO = " & tmDOCO & " and PDDCTO = '" & tmDCTO & "' and PDLNID = " & ConvDecimalsToSQL("LNID", tmLNID)
  DB.Execute(sSQL, sCols, sRows)

  sCRR = Trim(DB.Extract(sCols, sRows, 1, "PDCRR"))
  sCRCD = Trim(DB.Extract(sCols, sRows, 1, "PDCRCD"))


  '--------------'
  ' GetAuditInfo '
  '--------------'
  emGetAuditInfo.Name       = "GetAuditInfo"
  emGetAuditInfo.LogMode = LogNever
  emGetAuditInfo.DebugLog   = cJDELogPath
  '
  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emGetAuditInfo.Name, "", emGetAuditInfo)

  If Not emGetAuditInfo.Execute Then
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emGetAuditInfo.Name, "", emGetAuditInfo, tmUSER, TM.QueueName, TM.SeqNo)
    GoTo ExitE1
  End If

  '---------------------------'
  ' BatchOpenOnInitialization '
  '---------------------------'
  emBatchOpenOnInitialization.Name       = "BatchOpenOnInitialization"
  emBatchOpenOnInitialization.LogMode = LogNever
  emBatchOpenOnInitialization.DebugLog   = cJDELogPath
  '
  emBatchOpenOnInitialization.Param("BatchType") =    "O"
  emBatchOpenOnInitialization.Param("BatchDate") =    "0/0/0"
  '
  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emBatchOpenOnInitialization.Name, "", emBatchOpenOnInitialization)

  If Not emBatchOpenOnInitialization.Execute Then
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emBatchOpenOnInitialization.Name, "", emBatchOpenOnInitialization, tmUSER, TM.QueueName, TM.SeqNo)
    GoTo ExitE1
  End If
  '
  nBatchNo = Val(emBatchOpenOnInitialization.Param("BatchNumber"))

  If (nBatchNo = 0) Then
    App.LogError "BatchOpenOnInitialization", "Function did not return a valid number"
    GoTo ExitE1
  End If

  '---------------'
  ' F4312BeginDoc '
  '---------------'
  ' Notes: po receipt "option" 1-receive one line, 4-receive multiple lines, 7-receive and close line, 9-cancel line

  emF4312BeginDoc.Name       = "F4312BeginDoc"
  emF4312BeginDoc.LogMode = LogNever
  emF4312BeginDoc.DebugLog   = cJDELogPath
  '
  emF4312BeginDoc.Param("JobNumber")                = " "
  emF4312BeginDoc.Param("ComputerID")               = emGetAuditInfo.Param("Workstation_UserId")
  emF4312BeginDoc.Param("ActionCode")               = "A"
  emF4312BeginDoc.Param("ProcessEdits")             = "1"
  emF4312BeginDoc.Param("ProgramID")                = "EP4312"
  emF4312BeginDoc.Param("CurrencyProcessingFlag")   = "Y"
  emF4312BeginDoc.Param("OrderNumber")              = tmDOCO
  emF4312BeginDoc.Param("OrderType")                = tmDCTO
  emF4312BeginDoc.Param("OrderCompany")             = tmCO
  emF4312BeginDoc.Param("OrderSuffix")              = "000"
  emF4312BeginDoc.Param("CurrencyMode")             = " "
  emF4312BeginDoc.Param("ReceiptNumber")            = 0
  If sDomCur <> "USD" Then
    emF4312BeginDoc.Param("BaseCurrency")             = sDomCur
  Else
    emF4312BeginDoc.Param("BaseCurrency")             = " "
  End If
  If sDomCur <> "USD" Then
    emF4312BeginDoc.Param("POCurrency")               = sCRCD
  Else
    emF4312BeginDoc.Param("POCurrency")               = " "
  End If

  emF4312BeginDoc.Param("ReceiptDate")              = emGetAuditInfo.Param("Date")
  emF4312BeginDoc.Param("GLDate")                   = sGLDate
  emF4312BeginDoc.Param("HoldCode")                 = " "
  emF4312BeginDoc.Param("UserID")                   = emGetAuditInfo.Param("UserName")  'UCase(tmUSER)
  emF4312BeginDoc.Param("POVersion")                = tmZVERSION
  emF4312BeginDoc.Param("BatchNumber")              = nBatchNo
  emF4312BeginDoc.Param("BatchStatus")              = " "
  emF4312BeginDoc.Param("BatchDate")                = emBatchOpenOnInitialization.Param("BatchDate")
  emF4312BeginDoc.Param("Option")                   = ""
  emF4312BeginDoc.Param("ReceiptsByPO")             = ""
  emF4312BeginDoc.Param("CalledFromEDI")            = ""
  '
  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emF4312BeginDoc.Name, "", emF4312BeginDoc)

  If Not emF4312BeginDoc.Execute Then
    sErrDesc = "F4312BeginDoc"
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emF4312BeginDoc.Name, "", emF4312BeginDoc, tmUSER, TM.QueueName, TM.SeqNo)
    GoTo ExitE1
  End If

  '---------------'
  ' F4312EditLine '
  '---------------'
  emF4312EditLine.Name       = "F4312EditLine"
  emF4312EditLine.LogMode = LogNever
  emF4312EditLine.DebugLog   = cJDELogPath
  '
  emF4312EditLine.Param("JobNumber")                  = emF4312BeginDoc.Param("JobNumber")
  emF4312EditLine.Param("ComputerID")                 = emGetAuditInfo.Param("Workstation_UserId")
  emF4312EditLine.Param("ActionCode")                 = "1"
  emF4312EditLine.Param("ProcessEdits")               = "1"
  emF4312EditLine.Param("ProgramID")                  = "EP4312"
  emF4312EditLine.Param("CurrencyProcessingFlag")     = emF4312BeginDoc.Param("CurrencyProcessingFlag")
  emF4312EditLine.Param("OrderNumber")                = tmDOCO
  emF4312EditLine.Param("OrderType")                  = emF4312BeginDoc.Param("OrderType")
  emF4312EditLine.Param("OrderKeyCompany")            = emF4312BeginDoc.Param("OrderCompany")
  emF4312EditLine.Param("OrderSuffix")                = emF4312BeginDoc.Param("OrderSuffix")
  emF4312EditLine.Param("LineNumber")                 = tmLNID
  emF4312EditLine.Param("ReceiptLineNumber")          = 0
  emF4312EditLine.Param("ReceiptRecWritten")          = "0"
  emF4312EditLine.Param("Option")                     = "1"
  emF4312EditLine.Param("POVersion")                  = tmZVERSION
  emF4312EditLine.Param("QuantityReceived")           = tmQTY
  emF4312EditLine.Param("ReceiptUOM")                 = tmUOM
'  GetDecimals("UNCS",iDecCnt, nDecMult, sformat)
'  emF4312EditLine.Param("UnitCostReceived")           = Format(tmCOST, sformat) & "||" & CStr(iDecCnt)
  emF4312EditLine.Param("UnitCostReceived")           = tmCOST
'  GetDecimals("FUC",iDecCnt, nDecMult, sformat)
'  emF4312EditLine.Param("ForeignUnitCostReceived")    = Format(tmFUC, sformat) & "||" & CStr(iDecCnt)
  emF4312EditLine.Param("ForeignUnitCostReceived")    = tmFUC
  nAmtRcv = Val(tmCOST) * Val(tmQTY)
  nTAMT = Round(nAmtRcv, 2)
'  GetDecimals("ECST",iDecCnt, nDecMult, sformat)
'  emF4312EditLine.Param("AmountReceived")             = Format(nTAMT,sformat) & "|" & emF4312BeginDoc.Param("BaseCurrency") & "|" & CStr(iDecCnt)
  emF4312EditLine.Param("AmountReceived")             = nTAMT
  nAmtRcv = Val(tmFUC) * Val(tmQTY)
  nTAMT = Round(nAmtRcv, 2)
'  GetDecimals("FEC",iDecCnt, nDecMult, sformat)
  emF4312EditLine.Param("ForeignAmountReceived")      = nTAMT
  emF4312EditLine.Param("ReceiptBranch")              = tmMCU
  emF4312EditLine.Param("LocationDatabase")           = tmLOCN
  emF4312EditLine.Param("LotNumber")                  = tmLOTN
  emF4312EditLine.Param("LotStatus")                  = tmLOTS
  emF4312EditLine.Param("LotPotency")                 = 0
  emF4312EditLine.Param("LotGrade")                   = " "
  emF4312EditLine.Param("LotExpirationDate")          = tmXPDT
  emF4312EditLine.Param("LotDescription")             = " "
  emF4312EditLine.Param("SupplierLot")                = " "
  emF4312EditLine.Param("AssetID")                    = " "
  emF4312EditLine.Param("LandedCostRule")             = tmPDP5
  emF4312EditLine.Param("ReasonCode")                 = ""
  emF4312EditLine.Param("ContainerID")                = " "
  emF4312EditLine.Param("VendorRemark")               = tmRMRK
  emF4312EditLine.Param("Subledger")                  = " "
  emF4312EditLine.Param("SubledgerType")              = " "
  emF4312EditLine.Param("GLDate")                     = sGLDate
  emF4312EditLine.Param("ReceiptDate")                = emBatchOpenOnInitialization.Param("BatchDate")
  If sDomCur <> "USD" Then
    emF4312EditLine.Param("DomesticCurrencyCode")       = sDomCur
  Else
    emF4312EditLine.Param("DomesticCurrencyCode")       = " "
  End If
  emF4312EditLine.Param("POCurrencyCode")             = emF4312BeginDoc.Param("POCurrency")
  If sDomCur <> "USD" Then
    emF4312EditLine.Param("ExchangeRate")               = sCRR
  Else
    emF4312EditLine.Param("ExchangeRate")               = 0
  End If
  '
  If Trim(UCase(emF4312BeginDoc.Param("BaseCurrency"))) <> Trim(UCase(emF4312BeginDoc.Param("POCurrency"))) Then
    emF4312EditLine.Param("CurrencyMode")                 = "F"
  Else
    emF4312EditLine.Param("CurrencyMode")                 = "D"
  End If
  emF4312EditLine.Param("FirstOfMultiLine")           = "1"
  emF4312EditLine.Param("LandedCostCode")             = " "
  emF4312EditLine.Param("BatchNumber")                = nBatchNo
  emF4312EditLine.Param("BatchType")                  = "O"
  emF4312EditLine.Param("BatchDate")                  = emBatchOpenOnInitialization.Param("BatchDate")
  emF4312EditLine.Param("ReceiptDoc")                 = 0
  emF4312EditLine.Param("Supplier")                   = emF4312BeginDoc.Param("Supplier")
  emF4312EditLine.Param("InventoryInterface")         = " "
  emF4312EditLine.Param("GLInterface")                = " "
  emF4312EditLine.Param("TextLineYN")                 = " "
  emF4312EditLine.Param("QuantityBucketToUpdate")     = " "
  emF4312EditLine.Param("ReceiptAcknowledgement")     = " "
  emF4312EditLine.Param("PaymentEligible")            = " "
  emF4312EditLine.Param("F4111JobNumber")             = 0
  emF4312EditLine.Param("F0911JobNumber")             = 0
  emF4312EditLine.Param("F4111Written")               = "0"
  emF4312EditLine.Param("QtyCompleted")               = 0
  emF4312EditLine.Param("QtyScrapped")                = 0
  emF4312EditLine.Param("P3103UOM")                   = " "
  emF4312EditLine.Param("OperationStatus")            = " "
  emF4312EditLine.Param("LastJELine")                 = 0
  emF4312EditLine.Param("GLRemark")                   = " "
  emF4312EditLine.Param("InventoryTransRemark")       = " "
  emF4312EditLine.Param("CalledFromRouting")          = " "
  emF4312EditLine.Param("F4311JobNumber")             = 0
  emF4312EditLine.Param("CalledFromEDI")              = " "
  emF4312EditLine.Param("WMSLineNumber")              = 0
  emF4312EditLine.Param("MemoLotField1")              = tmLOT1
  emF4312EditLine.Param("MemoLotField2")              = tmLOT2
  emF4312EditLine.Param("SupplierLot")                = tmRLOT
  emF4312EditLine.Param("AmbientVolumeUOM")           = " "
  emF4312EditLine.Param("StandardVolume")             = 0
  emF4312EditLine.Param("StandardVolumeUOM")          = " "
  emF4312EditLine.Param("WeightQuantity")             = 0
  emF4312EditLine.Param("WeightQuantityUOM")          = " "
  emF4312EditLine.Param("Temperature")                = 0
  emF4312EditLine.Param("TemperatureType")            = " "
  emF4312EditLine.Param("DensityType")                = " "
  emF4312EditLine.Param("DensityTemperature")         = 0
  emF4312EditLine.Param("ProgramStatus")              = " "
  emF4312EditLine.Param("PrimaryUOMForBulk")          = ""
  emF4312EditLine.Param("DisplayDensity")             = 0
  emF4312EditLine.Param("TransactionTime")            = 0
  emF4312EditLine.Param("ManagerialAnalysisType1")    = " "
  emF4312EditLine.Param("ManagerialAnalysisCode1")    = " "
  emF4312EditLine.Param("ManagerialAnalysisType2")    = " "
  emF4312EditLine.Param("ManagerialAnalysisCode2")    = " "
  emF4312EditLine.Param("ManagerialAnalysisType3")    = " "
  emF4312EditLine.Param("ManagerialAnalysisCode3")    = " "
  emF4312EditLine.Param("ManagerialAnalysisType4")    = " "
  emF4312EditLine.Param("ManagerialAnalysisCode4")    = " "
  emF4312EditLine.Param("AgreementNumber")            = " "
  emF4312EditLine.Param("AgreementSupplement")        = 0
  emF4312EditLine.Param("BatchStatus")                = " "
  emF4312EditLine.Param("PostOutOfBalance")           = ""  '"N"
  emF4312EditLine.Param("WarehouseResSeq")            = 1
  emF4312EditLine.Param("ShipmentNumber")             = 0
  emF4312EditLine.Param("TransportationJobNumber")    = 0
  'emF4312EditLine.Param("SecondaryQty")               = nQty2
  'emF4312EditLine.Param("SecondaryUOM")               = sUOM2
  '
  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emF4312EditLine.Name, "", emF4312EditLine)

  If Not emF4312EditLine.Execute Then
    sErrDesc = "F4312EditLine"
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emF4312EditLine.Name, "", emF4312EditLine)
    GoTo ExitE1
  End If

  '--------------'
  ' F4312EditDoc '
  '--------------'
  emF4312EditDoc.Name       = "F4312EditDoc"
  emF4312EditDoc.LogMode = LogNever
  emF4312EditDoc.DebugLog   = cJDELogPath

  emF4312EditDoc.Param("JobNumber")             = emF4312BeginDoc.Param("JobNumber")
  emF4312EditDoc.Param("ComputerID")            = emGetAuditInfo.Param("Workstation_UserId")
  emF4312EditDoc.Param("ActionCode")            = emF4312BeginDoc.Param("ActionCode")
  emF4312EditDoc.Param("ProcessEdits")          = emF4312BeginDoc.Param("ProcessEdits")
  emF4312EditDoc.Param("ProgramID")             = "EP4312"
  emF4312EditDoc.Param("UserID")                = emGetAuditInfo.Param("UserName")  'tmUSER
  emF4312EditDoc.Param("POVersion")             = emF4312BeginDoc.Param("POVersion")
  emF4312EditDoc.Param("OrderNumber")           = emF4312BeginDoc.Param("OrderNumber")
  emF4312EditDoc.Param("OrderType")             = emF4312BeginDoc.Param("OrderType")
  emF4312EditDoc.Param("OrderKeyCompany")       = emF4312EditLine.Param("OrderKeyCompany")
  emF4312EditDoc.Param("OrderSuffix")           = emF4312BeginDoc.Param("OrderSuffix")
  emF4312EditDoc.Param("GLDate")                = emF4312EditLine.Param("GLDate")
  emF4312EditDoc.Param("BatchNumber")           = emF4312EditLine.Param("BatchNumber")
  emF4312EditDoc.Param("BatchType")             = emF4312EditLine.Param("BatchType")
  emF4312EditDoc.Param("CurrencyMode")          = emF4312EditLine.Param("CurrencyMode")
  emF4312EditDoc.Param("CurrencyCode")          = emF4312EditLine.Param("POCurrencyCode")
  emF4312EditDoc.Param("LCF0911JobNumber")      = 0
  emF4312EditDoc.Param("ReversalOption")        = " "
  emF4312EditDoc.Param("LandedCostJobNumber")   = 0
  '
  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emF4312EditDoc.Name, "", emF4312EditDoc)

  If Not emF4312EditDoc.Execute Then
    sErrDesc = "F4312EditDoc"
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emF4312EditDoc.Name, "", emF4312EditDoc, tmUSER, TM.QueueName, TM.SeqNo)
    GoTo ExitE1
  End If

  '--------------------'
  ' X0010GetNextNumber '
  '--------------------'
  emX0010GetNextNumber.Name       = "X0010GetNextNumber"
  emX0010GetNextNumber.LogMode = LogNever
  emX0010GetNextNumber.DebugLog   = cJDELogPath
  '
  emX0010GetNextNumber.Param("SystemCode")              = "43"
  emX0010GetNextNumber.Param("NextNumberingIndexNo")    = 7
  emX0010GetNextNumber.Param("CompanyKey")              = emF4312EditDoc.Param("OrderKeyCompany")
  emX0010GetNextNumber.Param("DocumentType")            = "OV"
  emX0010GetNextNumber.Param("Century")                 = 20
  emX0010GetNextNumber.Param("FiscalYear1")             = 4
  emX0010GetNextNumber.Param("SameAsDocumentType")      = " "
  '
  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emX0010GetNextNumber.Name, "", emX0010GetNextNumber)

  If Not emX0010GetNextNumber.Execute Then
    sErrDesc = "X0010GetNextNumber"
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emX0010GetNextNumber.Name, "", emX0010GetNextNumber, tmUSER, TM.QueueName, TM.SeqNo)
    GoTo ExitE1
  End If
  '
  nJobNo = Val(emX0010GetNextNumber.Param("NextNumber001"))

  If (nJobNo = 0) Then
    sErrDesc = "X0010GetNextNumber - Function did not return a valid number"
    GoTo ExitE1
  End If

  '-------------'
  ' F4312EndDoc '
  '-------------'
  emF4312EndDoc.Name       = "F4312EndDoc"
  emF4312EndDoc.LogMode = LogNever
  emF4312EndDoc.DebugLog   = cJDELogPath
  '
  emF4312EndDoc.Param("JobNumber")                = emF4312EditLine.Param("JobNumber")
  emF4312EndDoc.Param("ComputerID")               = emGetAuditInfo.Param("Workstation_UserId")
  emF4312EndDoc.Param("ActionCode")               = emF4312EditLine.Param("ActionCode")
  emF4312EndDoc.Param("ProcessEdits")             = "1"
  emF4312EndDoc.Param("ProgramID")                = "EP4312"
  emF4312EndDoc.Param("POVersion")                = emF4312EditLine.Param("POVersion")
  emF4312EndDoc.Param("CurrencyProcessingFlag")   = emF4312EditLine.Param("CurrencyProcessingFlag")
  emF4312EndDoc.Param("F4111JobNumber")           = 3 ' emF4312EditLine.Param("F4111JobNumber")
  emF4312EndDoc.Param("F0911JobNumber")           = 0 ' emF4312EditLine.Param("F0911JobNumber")
  emF4312EndDoc.Param("BatchNumber")              = emF4312EditLine.Param("BatchNumber")
  emF4312EndDoc.Param("BatchType")                = emF4312EditLine.Param("BatchType")
  emF4312EndDoc.Param("BatchStatus")              = emF4312EditLine.Param("BatchStatus")
  emF4312EndDoc.Param("CurrencyMode")             = emF4312EditDoc.Param("CurrencyMode")
  emF4312EndDoc.Param("UserID")                   = emGetAuditInfo.Param("UserName")  'tmUSER
  emF4312EndDoc.Param("DocumentNumber")           = nJobNo
  emF4312EndDoc.Param("TransIntransitFlag")       = " " '"0"
  emF4312EndDoc.Param("LandedCJobNo")             = emF4312EditDoc.Param("LandedCostJobNumber")
  '
  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emF4312EndDoc.Name, "", emF4312EndDoc)

  If Not emF4312EndDoc.Execute Then
    sErrDesc = "F4312EndDoc"
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emF4312EndDoc.Name, "", emF4312EndDoc, tmUSER, TM.QueueName, TM.SeqNo)
    GoTo ExitE1
  End If

  '--------------'
  ' FSCloseBatch '
  '--------------'
  emFSCloseBatch.Name       = "FSCloseBatch"
  emFSCloseBatch.LogMode = LogNever
  emFSCloseBatch.DebugLog   = cJDELogPath
  '
  emFSCloseBatch.Param("Batchnumber")         = nBatchNo
  emFSCloseBatch.Param("Batchtype")           = emF4312EditLine.Param("BatchType")
  emFSCloseBatch.Param("ChangeBatchStatus")   = " "
  emFSCloseBatch.Param("OverrideMode")        = "A"
  '
  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emFSCloseBatch.Name, "", emFSCloseBatch)

  If Not emFSCloseBatch.Execute Then
    sErrDesc = "FSCloseBatch"
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emFSCloseBatch.Name, "", emFSCloseBatch, tmUSER, TM.QueueName, TM.SeqNo)
    GoTo ExitE1
  End If

  '------------------------'
  ' BatchControlProcessing '
  '------------------------'
  emBatchControlProcessing.Name       = "BatchControlProcessing"
  emBatchControlProcessing.LogMode = LogNever
  emBatchControlProcessing.DebugLog   = cJDELogPath
  '
  emBatchControlProcessing.Param("BatchType")     = emF4312EditLine.Param("BatchType")
  emBatchControlProcessing.Param("BatchNumber")   = nBatchNo
  '
  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emBatchControlProcessing.Name, "", emBatchControlProcessing)

  If Not emBatchControlProcessing.Execute Then
    sErrDesc = "BatchControlProcessing"
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emBatchControlProcessing.Name, "", emBatchControlProcessing, tmUSER, TM.QueueName, TM.SeqNo)
    GoTo ExitE1
  End If

  bSuccess = True

'-------'
' Exits '
'-------'
ExitE1:
  If tmERRID <> "" Then
    emError.Name = "GetErrorMessageGlossaryText"
    emError.LogMode = LogNever
    emError.DebugLog   = cJDELogPath
    emError.Param("ErrorMessageID") = tmERRID
    emError.Execute
    tmERRTEXT = emError.Param("GlossaryText_500Chars")
  Else
    tmERRTEXT = sErrDesc
  End If
  '
  Set emGetAuditInfo                = Nothing
  Set emBatchOpenOnInitialization   = Nothing
  Set emX0010GetNextNumber          = Nothing
  Set emF4312BeginDoc               = Nothing
  Set emF4312EditLine               = Nothing
  Set emF4312EditDoc                = Nothing
  Set emF4312EndDoc                 = Nothing
  Set emFSCloseBatch                = Nothing
  Set emBatchControlProcessing      = Nothing
  Set emError                       = Nothing
  Set emBackorderReleaseEditLine    = Nothing
  Set emBackorderReleaseEndDoc      = Nothing
  '
  If Not bSuccess Then
    ERP.RollbackTrans
  Else
    ERP.CommitTrans
  End If
  '
  ' Offline inventory
  If gbOfflineEnabled Then
    If bSuccess Then
      DeleteOI(TM.QueueName,TM.SeqNo)
    Else
      DeleteOI(TM.QueueName,TM.SeqNo, tmUSER, "Unable to execute " & cTNId & "; reason: " & vbCrLf & sErrDesc, Format(Date, "YYYYMMDD") & Format(Time, "HHNNSS"))
    End If
  End If
  '
  Transaction = bSuccess

  Exit Function
  '
World:
  Dim sOrder        As String
  Dim sType         As String
  Dim sItem         As String
  Dim sBO           As String
  Dim sLine         As String
  Dim sFirstLine    As String
  '
  If tmTYPE = "ByLine" Then GoTo WorldLine
  '
  ' Macro for Receive By Item
  ' Force all business functions to use the same connection
  If Not SM.BeginTrans Then
    TM.AbortTrans
    tmERRTEXT = "No ERP Handle - retry!"
    Exit Function
  End If
  '
  SM.GoToScreen("HPOIR0100")

  SM.SendTextAlt 67, 2, tmMCU, 12
  SM.SendTextAlt 19, 4, tmLITM, 26
  SM.SendKey KeyEnter
  SM.SendKey KeyF4
  '
  Do
    SM.GetText 67, 17, 8, sLine,  True
    SM.GetText 5,  12, 8, sOrder, True
    SM.GetText 14, 12, 2, sType,  True
    If sOrder = tmDOCO And sType = tmDCTO And Val(sLine) = tmLNID Then Exit Do
    If sOrder & sType & sLine = sFirstLine Then
      tmERRTEXT = "Line not found."
      SM.SendKey KeyF3
      SM.SendKey KeyF12
      GoTo ExitWorld
    End If
    If sFirstLine = "" Then sFirstLine = sOrder & sType & sLine
    SM.SendKey KeyPageDown
    i = i + 1
    If i > 999 Then
      tmERRTEXT = "Line not found."
      SM.SendKey KeyF3
      SM.SendKey KeyF12
      GoTo ExitWorld
    End If
  Loop
  '
  SM.SendTextAlt 2,  12, "1"
  SM.SendTextAlt 66, 12, " "  ,  15
  SM.SendTextAlt 31, 12, tmQTY,  15
  SM.SendTextAlt 47, 12, tmUOM,  2
  SM.SendTextAlt 50, 12, tmCOST, 15
  SM.SendTextAlt 19, 18, tmLOCN, 20
  SM.SendTextAlt 19, 19, tmLOTN, 15
  SM.SendKey KeyEnter
  SM.GetText(19,4,6,sItem,True)
  '
  If sItem <> "" Then Call GetWorldErr(tmERRID,tmERRTEXT)

  bSuccess = (sErrID = "")
  '
  If bSuccess Then
    SM.SendKey KeyEnter
    SM.SendKey KeyF3
    SM.GetText(27,1,18,sBO)
    If sBO = "Back Order Release" Then
      SM.SendKey KeyF3
      SM.SendTextAlt 7, 19, "G4211"
      SM.SendKey KeyEnter
      SM.SendTextAlt 7, 19, "15"
      SM.SendKey KeyEnter
    Else
      SM.SendTextAlt 7, 19, "8"
      SM.SendKey KeyEnter
    End If
  Else
    SM.SendKey KeyF3
    SM.SendTextAlt 7, 19, "8"
    SM.SendKey KeyEnter
  End If
  '
  SM.CommitTrans

  Transaction = bSuccess

  Exit Function
  '
WorldLine:
  ' Macro for Receive By Line
  ' Force all business functions to use the same connection
  If Not SM.BeginTrans Then GoTo ExitWorld
  '
  SM.GoToScreen("HPOLR0100")

  SM.SendTextAlt 67, 2, tmMCU, 12
  SM.SendTextAlt 19, 4, tmDOCO, 8
  SM.SendTextAlt 28, 4, tmDCTO, 2
  '
  SM.SendKey KeyEnter
  SM.SendKey KeyF4
  SM.SendTextAlt 67, 9, tmLNID, 7
  SM.GetText(5,12,25,sItem,True)
  '
  If sItem = "" Then
    tmERRTEXT = "Line not found."
    SM.SendKey KeyF3
    SM.SendTextAlt 7, 19, "7"
    SM.SendKey KeyEnter
    GoTo ExitWorld
  End If
  '
  SM.SendTextAlt 66, 12, "", 15
  SM.SendTextAlt 47, 12, tmUOM,  2
  SM.SendTextAlt 50, 12, tmCOST, 15
  SM.SendTextAlt 19, 20, tmLOTN, 15
  SM.SendKey KeyEnter
  SM.SendTextAlt 2, 12, "1", 1
  SM.SendTextAlt 66, 12, "", 15
  SM.SendTextAlt 31, 12, tmQTY, 15
  SM.SendTextAlt 19, 19, tmLOCN, 20
  '
LoopErr:
  SM.SendKey KeyEnter
  SM.GetText(19,4,8,sOrder,True)
  '
  If sOrder <> "" Then
    Call GetWorldErr(sErrID, sErrText)  'Indicates a hard error has occured
    If Len(sErrID) = 0 Then GoTo LoopErr
  End If

  bSuccess = (sErrID = "")
  '
  tmERRID = sErrID
  tmERRTEXT = sErrText
  '
  If bSuccess Then
    SM.SendKey KeyEnter
    SM.SendKey KeyF3
    SM.GetText(27,1,18,sBO)
    If sBO = "Back Order Release" Then
      SM.SendKey KeyF3
      SM.SendTextAlt 7, 19, "G4211"
      SM.SendKey KeyEnter
      SM.SendTextAlt 7, 19, "15"
      SM.SendKey KeyEnter
    Else
      SM.SendTextAlt 7, 19, "7"
      SM.SendKey KeyEnter
    End If
  Else
    SM.SendKey KeyF3
    SM.SendTextAlt 7, 19, "7"
    SM.SendKey KeyEnter
  End If
  '
ExitWorld:
  SM.SendKey KeyF3                           ' Exit Screen
  SM.WaitForHost(10)
  SM.SendTextAlt 7, 19, gsSMMain              ' Goto back to SM Main Menu
  SM.SendKey KeyEnter

  SM.CommitTrans

  Transaction = bSuccess

End Function
</Code>
