<Record FileDesc="SO - Pick Confirm (multi lines)" FileVersion="5.0.8.0" Desc="SO - Pick Confirm (multi lines)" Group="AMS" LinkTo="No Links" LinkType="0" LinkMode="0" PromptList="lstScanned&vm;txtMCU&vm;txtDOCO&vm;txtDCTO&vm;txtLITM&vm;lblItemDesc&vm;lblSOQty&vm;lblScanCnt&vm;txtLOCN&vm;txtLOTN&vm;txtQTY&vm;txtAccept&vm;lblFKey&vm;lblLPID&vm;cbBackorder" Depends="X41.bas">
<Schema>
<SchemaParam Linked="0" Attr="1" Name="lstScanned" />
<SchemaParam Linked="0" Attr="2" Name="txtMCU" />
<SchemaParam Linked="0" Attr="3" Name="txtDOCO" />
<SchemaParam Linked="0" Attr="4" Name="txtDCTO" />
<SchemaParam Linked="0" Attr="5" Name="txtLITM" />
<SchemaParam Linked="0" Attr="6" Name="lblItemDesc" />
<SchemaParam Linked="0" Attr="7" Name="lblSOQty" />
<SchemaParam Linked="0" Attr="8" Name="lblScanCnt" />
<SchemaParam Linked="0" Attr="9" Name="txtLOCN" />
<SchemaParam Linked="0" Attr="10" Name="txtLOTN" />
<SchemaParam Linked="0" Attr="11" Name="txtQTY" />
<SchemaParam Linked="0" Attr="12" Name="txtAccept" />
<SchemaParam Linked="0" Attr="13" Name="lblFKey" />
<SchemaParam Linked="0" Attr="14" Name="lblLPID" />
<SchemaParam Linked="0" Attr="15" Name="cbBackorder" />
</Schema>
<Displays>
<Display Name="EnglishGUI" Type="1" Width="1920" Height="7040" Locale="1033" />
</Displays>
<Form FieldId="Form" Attr="0" LinkMode="0" Pages="2">
<Controls>
<Control Type="3" FieldId="lstScanned" Attr="1" Sorted="0">
<Layouts>
<Layout PageNo="1" Visible="1" ExtendCol="-1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="22" Width="111" Height="22" AnchorRight="1112" AnchorBottom="276" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="Scanned Items" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="0" BackFill="0" FontSize="0" FontStyle="0" MultiLine="1" Left="0" Top="44" Width="1223" Height="220" AnchorRight="0" AnchorBottom="56" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="1" />
<Columns />
</Layout>
</Layouts>
</Control>
<Control Type="1" FieldId="txtMCU" Attr="2" KeyField="0" MaskInput="0" Required="1">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="22" Width="55" Height="22" AnchorRight="1168" AnchorBottom="276" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="Plant:" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="3" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="48" Top="22" Width="119" Height="22" AnchorRight="1056" AnchorBottom="276" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
<Control Type="1" FieldId="txtDOCO" Attr="3" Defaults="@LAST" KeyField="0" MaskInput="0" Required="1">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="44" Width="79" Height="22" AnchorRight="1144" AnchorBottom="254" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="SO/Pick#:" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="3" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="72" Top="44" Width="111" Height="22" AnchorRight="1040" AnchorBottom="254" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
<Control Type="1" FieldId="txtDCTO" Attr="4" Defaults="@LAST" KeyField="0" MaskInput="0" Required="1">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="152" Top="44" Width="0" Height="22" AnchorRight="1071" AnchorBottom="254" BackColor1="000001" BackColor2="000001" ForeColor="000001" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="3" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="192" Top="44" Width="39" Height="22" AnchorRight="992" AnchorBottom="254" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
<Control Type="1" FieldId="txtLITM" Attr="5" KeyField="0" MaskInput="0" Required="1">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="66" Width="79" Height="22" AnchorRight="1144" AnchorBottom="232" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="LP/Item#:" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="3" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="72" Top="66" Width="159" Height="22" AnchorRight="992" AnchorBottom="232" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
<Control Type="10" FieldId="lblItemDesc" Attr="6">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="10" FontStyle="0" MultiLine="0" Left="0" Top="88" Width="95" Height="22" AnchorRight="1128" AnchorBottom="210" BackColor1="000001" BackColor2="000001" ForeColor="00FFFF" Caption="lblItemDesc" />
</Layout>
</Layouts>
</Control>
<Control Type="10" FieldId="lblSOQty" Attr="7">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="110" Width="71" Height="22" AnchorRight="1152" AnchorBottom="188" BackColor1="000001" BackColor2="000001" ForeColor="00FFFF" Caption="lblSOQty" />
</Layout>
</Layouts>
</Control>
<Control Type="10" FieldId="lblScanCnt" Attr="8">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="154" Width="87" Height="22" AnchorRight="1136" AnchorBottom="144" BackColor1="000001" BackColor2="000001" ForeColor="00FFFF" Caption="lblScanCnt" />
</Layout>
</Layouts>
</Control>
<Control Type="1" FieldId="txtLOCN" Attr="9" Defaults=" ;O" KeyField="0" MaskInput="0" Required="1">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="8" Top="176" Width="47" Height="22" AnchorRight="1168" AnchorBottom="122" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="Locn:" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="3" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="48" Top="176" Width="183" Height="22" AnchorRight="992" AnchorBottom="122" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
<Control Type="1" FieldId="txtLOTN" Attr="10" Defaults=";O" KeyField="0" MaskInput="0" Required="0">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="8" Top="198" Width="47" Height="22" AnchorRight="1168" AnchorBottom="100" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="Lot#:" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="3" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="48" Top="198" Width="183" Height="22" AnchorRight="992" AnchorBottom="100" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
<Control Type="1" FieldId="txtQTY" Attr="11" KeyField="0" MaskInput="0" Required="1">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="16" Top="220" Width="39" Height="22" AnchorRight="1168" AnchorBottom="78" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="Qty:" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="3" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="48" Top="220" Width="87" Height="22" AnchorRight="1088" AnchorBottom="78" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
<Control Type="1" FieldId="txtAccept" Attr="12" KeyField="0" MaskInput="0" Required="0">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="264" Width="151" Height="22" AnchorRight="1072" AnchorBottom="34" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="Enter to accept..." />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="0" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="0" Width="0" Height="0" AnchorRight="1223" AnchorBottom="320" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
<Control Type="10" FieldId="lblFKey" Attr="13">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="264" Width="167" Height="22" AnchorRight="1056" AnchorBottom="34" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="F2-Change SO F5-Show" />
</Layout>
</Layouts>
</Control>
<Control Type="10" FieldId="lblLPID" Attr="14">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="132" Width="63" Height="22" AnchorRight="1160" AnchorBottom="166" BackColor1="000001" BackColor2="000001" ForeColor="00FFFF" Caption="lblLPID" />
</Layout>
</Layouts>
</Control>
<Control Type="7" FieldId="cbBackorder" Attr="15" Check="1" CanFocus="1">
<Layouts>
<Layout PageNo="2" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="64" Top="242" Width="127" Height="22" AnchorRight="1032" AnchorBottom="56" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="Allow Backorder" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="0" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="192" Top="242" Width="31" Height="31" AnchorRight="1000" AnchorBottom="56" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
</Controls>
<Layouts>
<Layout Visible="1" FormWidth="1223" FormHeight="320" Scrollbars="0">
<Label Align="1" AutoSize="2" FontSize="0" FontStyle="0" Width="0" Height="22" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="[Pick - Confirm]" />
<Field AutoSize="0" BorderStyle="3" DropShadow="1" FontSize="0" FontStyle="0" BackColor1="000001" BackColor2="000001" ForeColor="000001" />
</Layout>
</Layouts>
</Form>
</Record>
<Code>
' -------------------------------------------------------------------------------
' | (C)opyright 2003-2012 The DataMAX Software Group, Inc., All Rights Reserved.|
' | RFgen JD Edwards Integration Suite Vers.# 420                               |
' -------------------------------------------------------------------------------
'
' SALES ORDERS: SO Pick Confirm
'
' NOTES:
'
' MODIFICATION HISTORY:
' Original development: Jim Wagner - WhiteLight Group
' WLG01 - KMD 8/12/2013:  change screen flow to bring user to doco prompt when they've completed picking an order.
' WLG02 - KMD 8/14/2013:  comment out code that prevented user from entering negative quantity so they can process returns via gun.
' WLG03 - KMD 8/28/2013:  fixed issues with the DCTO not processing correctly in QTY_OnEnter and the DCTO not writing to LP tables consistently.
' WLG04 - KMD 8/30/2013:  a checkbox was added to the screen layout for backorder prompt.  Code was added to only ask if user wants to backorder remaining if this box is checked.  JW did development.
' WLG05 - KMD 8/30/2013:  moving code to check location and lot number to the QTY_OnEnter code (only doing these checks if not returning product - aka Qty >0).
                        ' add check to ensure PQOH - HCOMM >= Qty (like availability check, but doens't include soft commit)

Option Explicit

Private Const cTNId         = "FSOPC0200"
Private Const cForceLOTN    = False     ' True = force User to confirm same Lot Number
Private Const cForceLOCN    = False     ' True = force User to confirm same Location
Private Const cF00095       = False     ' True = run record lock in F00095
Private msPgm               As String
Private msVersion           As String
Private msBOVersion         As String
Private msStatusF           As String
Private msStatusT           As String
Private msRelInv            As Boolean
Private mbAddFr             As Boolean
Private mnMaxQty            As Currency
Private mnMaxQoH            As Currency
Private msHardLOCN          As String
Private msHardLOTN          As String
Private mbSerialized        As Boolean
Private mbHasLots           As Boolean
Private msResKey            As String
Private msResKeySav         As String
Private msAppl              As String
Private mnUKID              As Long
Private msValCache          As Variant
Private mnCnt               As Long
Private msCurrentLITM       As String
Private mbPickList          As Boolean
Private mnTotalPick         As Long
Private mbIsLP              As Boolean
Private mbDisplayListFkey   As Boolean

Private Sub Form_GotFocus(ByRef Rsp As String, ByRef AllowChange As Boolean)
  On Error Resume Next
  '
  Dim iCN As Integer
  Dim sFieldId As String
  '
  iCN = App.PromptNo
  RFPrompt(iCN).BorderStyle = DisplayStandard
  RFPrompt(iCN).BackColor1 = cFieldFocusBC
  RFPrompt(iCN).ForeColor = cFieldFocusFC
  '
  sFieldId = RFPrompt(iCN).FieldId

End Sub

Private Sub Form_Load()
  On Error Resume Next
  '
  Dim sHeader As String
  Dim vArray  As Variant
  '
  Call SetDisplay()

  'App.SetOption ShowHorizontalScrollBar, True   ' todo - upgrade: App.SetOption removed
  '
  ' Initialize the RFGen recordset with extra fields
  App.SetValue("tmCO",      "")
  App.SetValue("tmMCU",     "")
  App.SetValue("tmDOCO",    "")
  App.SetValue("tmDCTO",    "")
  App.SetValue("tmLITM",    "")
  App.SetValue("tmLOTN",    "")
  App.SetValue("tmLOCN",    "")
  App.SetValue("tmQTY",     "")
  App.SetValue("tmUOM",     "")
  App.SetValue("tmLNID",    "")
  App.SetValue("tmSHIPTO",  "")
  App.SetValue("tmCARRIER", "")
  App.SetValue("tmLNTY",    "")
  '
  ' Initialize special controls
  lblItemDesc.Caption = ""
  lblItemDesc.Label.BackColor1 = cFieldDefaultBC
  lblItemDesc.Label.ForeColor = cFieldDefaultFC
  '
  lblSOQty.Caption = ""
  lblSOQty.Label.BackColor1 = cFieldDefaultBC
  lblSOQty.Label.ForeColor = cFieldDefaultFC
  '
  lblLPID.Caption = ""
  lblLPID.Label.BackColor1 = cFieldDefaultBC
  lblLPID.Label.ForeColor = cFieldDefaultFC
  '
  lblScanCnt.Caption = ""
  lblScanCnt.Label.BackColor1 = cFieldDefaultBC
  lblScanCnt.Label.ForeColor = cFieldDefaultFC
  '
  txtLOTN.Required = False
  txtLOTN.Visible = False
  '
  txtAccept.Visible = False

  ' Get Proc.Opt. Version from Menu
  msPgm     = App.GetValue("Pgm")
  msVersion = App.GetValue("Vers")
  msBOVersion = App.GetValue("BOVers")

  ' Get Status From from Proc.Opt. and Header
  msStatusF = GetProcOpt(msPgm,msVersion,"1;1",sHeader)

  If gbPOError Then
    App.ExitForm
    Exit Sub
  End If

'  If  App.ClientType = "GUI" Then
'    Form.Caption = Left(sHeader,29)
'  Else
'    Form.Caption = Left(sHeader,20)
'  End If

  ' get Status To from Proc.Opt. and Header
  msStatusT = GetProcOpt(msPgm,msVersion,"1;2")

  If gbPOError Then
    App.ExitForm
    Exit Sub
  End If

  ' Does Version relieve Inv?  from Proc.Opt.
  msRelInv = True

  If GetProcOpt(msPgm,msVersion,"5;4") = "1" Then msRelInv = False

  If gbPOError Then
    App.ExitForm
    Exit Sub
  End If

  ' Does Version allow Add Freight?  from Proc.Opt.
  mbAddFr = False

  If GetProcOpt(msPgm,msVersion,"3;1") <> "1" Then mbAddFr = False

  If gbPOError Then
    App.ExitForm
    Exit Sub
  End If

  txtDCTO.Visible = False
  txtLITM.Visible = False
  txtLOCN.Visible = False
  txtLOTN.Visible = False
  txtQTY.Visible = False


  lblFKey.Visible = mbAddFr

'  'check if data were left from last transaction
'  If Len(gsValP4205) > 0 Then
'    msValCache = gsValP4205
'    mnCnt = DCount(Ext(gsValP4205,1),Chr(2))
'    lblScanCnt.Caption = "Items Scanned: " & mnCnt
'    BuildListBox
'    vArray = Split(Ext(gsValP4205,1),";")
'    App.SetValue("tmCO", vArray(0))
'    App.SetValue("tmMCU", vArray(1))
'    App.SetValue("tmDOCO", vArray(2))
'    App.SetValue("tmDCTO", vArray(3))
'    lstScanned.DisplayOnly = False
'    App.SetFocus("lstScanned")           ' Show Listbox
'    Exit Sub
'  End If

End Sub

Private Sub Form_LostFocus()
  On Error Resume Next
  '
  Dim iCN As Integer
  '
  iCN = App.PromptNo
  RFPrompt(iCN).BorderStyle = DisplayTransparent
  RFPrompt(iCN).BackColor1 = cFieldDefaultBC
  RFPrompt(iCN).ForeColor = cFieldDefaultFC

End Sub

Private Sub Form_OnFkey(ByRef Fkey As Long)
  On Error Resume Next
  '
  Dim sData   As String
  

  If Fkey = 6 Then
    If mbAddFr Then
      sData = " -MCU="  & Trim(App.GetValue("tmMCU"))   & _
              " -DOCO=" & Trim(App.GetValue("tmDOCO"))  & _
              " -DCTO=" & Trim(App.GetValue("tmDCTO"))  & _
              " -VERS=" & Trim(msVersion)
      App.CallForm("FSOAL0100" & sData,True,True)
    End If
  End If

  If Fkey = 2 Then
    Dim vRsp As Variant

    If Trim(msValCache) <> "" Then
      ' Ask if the user wants to backorder remaining.
      ' If yes - process using backorder remaining version.
      vRsp = "No"

      'WLG04 START
      If cbBackorder.Checked = True Then
        vRsp = App.MsgBox("The current item is not completely picked.  Do you want to backorder the remaining quantity?",,,"[Yes] [No]")
      End If
      'WLG04 END
      '
      If vRsp = "Yes" Then
        If Not ExecuteTM(True) Then
          lstScanned.DisplayOnly = False
          App.SetFocus("lstScanned")           ' Show Listbox
        Else ' Execute TM didn't work
          Screen.Clear
          msValCache = ""
          mnCnt = 0
          lblScanCnt.Caption = ""
          lblSOQty.Caption   = ""
          lblItemDesc.Caption = ""
          lblLPID = ""
          lblFKey.Visible = True
          txtDCTO.List.Clear
          txtLITM.List.Clear
          txtLOCN.List.Clear
          txtLOTN.List.Clear
          txtQTY.List.Clear
          txtDOCO.List.Clear
          txtLITM.Visible = False
          txtLOCN.Visible = False
          txtLOCN.DisplayOnly = False
          txtLOTN.Visible = False
          txtLOTN.DisplayOnly = False
          txtQTY.Visible = False
          txtDCTO.Visible = False
          App.SetFocus("txtDOCO")             ' start over with Doco
        End If ' Execute TM didn't work
      Else ' vRsp = No
        ' If no - process using normal version.  Line will split & remain open.
        If Not ExecuteTM(False) Then
          lstScanned.DisplayOnly = False
          App.SetFocus("lstScanned")           ' Show Listbox
        Else ' Execute TM didn't work
          Screen.Clear
          msValCache = ""
          mnCnt = 0
          lblScanCnt.Caption = ""
          lblSOQty.Caption   = ""
          lblItemDesc.Caption = ""
          lblLPID = ""
          lblFKey.Visible = True
          txtDCTO.List.Clear
          txtLITM.List.Clear
          txtLOCN.List.Clear
          txtLOTN.List.Clear
          txtQTY.List.Clear
          txtDOCO.List.Clear
          txtLITM.Visible = False
          txtLOCN.Visible = False
          txtLOCN.DisplayOnly = False
          txtLOTN.Visible = False
          txtLOTN.DisplayOnly = False
          txtQTY.Visible = False
          txtDCTO.Visible = False
          App.SetFocus("txtDOCO")             ' start over with Doco
        End If 'Execute TM didn't work
      End If 'Value of vRsp
    Else 'There is nothing in msValCache
      Screen.Clear
      msValCache = ""
      mnCnt = 0
      lblScanCnt.Caption = ""
      lblSOQty.Caption   = ""
      lblItemDesc.Caption = ""
      lblLPID = ""
      lblFKey.Visible = True
      txtLITM.List.Clear
      txtLOCN.List.Clear
      txtLOTN.List.Clear
      txtQTY.List.Clear
      txtDOCO.List.Clear
      txtLITM.Visible = False
      txtLOCN.Visible = False
      txtLOCN.DisplayOnly = False
      txtLOTN.Visible = False
      txtLOTN.DisplayOnly = False
      txtQTY.Visible = False
      App.SetFocus("txtDOCO")             ' start over with Doco
    End If 'End if there is nothing in msValCache

  End If ' If Fkey = 2

  If Fkey = 5 Then
    BuildListBox
    mbDisplayListFkey = True
    lstScanned.DisplayOnly = False
    App.SetFocus("lstScanned")             ' Show Listbox
  End If

End Sub

Private Sub Form_Unload()
  On Error Resume Next
  '
  Dim vRsp As Variant

  If Trim(msValCache) <> "" Then
    ' Ask if the user wants to backorder remaining.
    ' If yes - process using backorder remaining version.
    vRsp = "No"

    'WLG04 START
    If cbBackorder.Checked = True Then
      vRsp = App.MsgBox("The current item is not completely picked.  Do you want to backorder the remaining quantity?",,,"[Yes] [No]")
    End If    '
    'WLG04 END

    If vRsp = "Yes" Then
      Call ExecuteTM(True)
    Else
      ' If no - process using normal version.  Line will split & remain open.
      Call ExecuteTM(False)
    End If
  Else
    'Do nothing
  End If


  If cF00095 Then F00095RemoveReservation("F4211", msResKeySav, msAppl)
  'App.SetOption(ShowHorizontalScrollBar, False)   ' todo - upgrade: App.SetOption removed

End Sub

Private Sub lstScanned_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next
  '
  lstScanned.DisplayOnly = True

End Sub

Private Sub lstScanned_OnFkey(ByRef Fkey As Long)
  On Error Resume Next
  '
  Dim vRsp As Variant
  '
  If Fkey = 3 Then
    vRsp = App.MsgBox(GetMsg(253),vbYesNo, 1)
    If vRsp = vbYes Then
      lstScanned.List.Clear
      msValCache = ""
      mnCnt      = 0
      App.SetFocus(2)             ' start over
    End If
  End If

  If Fkey = 4 Then
    Fkey = 0
    App.SendKey(vbKeyReturn)
  End If

End Sub

Private Sub txtLOTN_OnFkey(ByRef Fkey As Long)
  On Error Resume Next
  '
  If Fkey = 2 Then
    txtMCU.Required = False
    txtLITM.Required = False
    txtLOCN.Required = False
    txtLOTN.Required = False
    txtQTY.Required = False
    lblFKey.Visible =  False
    App.SetFocus("txtLITM")
    Exit Sub
  End If

End Sub

Private Sub txtMCU_GotFocus(ByRef Rsp As String, ByRef AllowChange As Boolean)
  On Error Resume Next
  '
  If (Len(Rsp)=0) Then Rsp = GetDefaultMCU()
  If Len(Rsp) > 0 Then AllowChange = False
End Sub

Private Sub txtMCU_OnBackup(ByRef Cancel As Boolean)
  On Error Resume Next
  '
  App.SetValue("tmMCU", "")
  App.SetValue("tmCO",  "")

End Sub

Private Sub txtMCU_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next
  '
  Dim sMCU     As String
  Dim sCompany As String
  '
  If (Len(Rsp)=0) Then Exit Sub
  '
  Cancel = True
  If Not Validate_BranchPlant(Rsp, sMCU, sCompany) Then Exit Sub
  '
  App.SetValue("tmCO",   sCompany)
  App.SetValue("tmMCU",  sMCU)
  Cancel = False
End Sub

Private Sub txtMCU_OnSearch(ByRef Rsp As String, ByRef Cancel As Boolean)
  On Error Resume Next
  '
  Cancel = Not Search_BranchPlant(Rsp)
End Sub

Private Sub txtDOCO_OnBackup(ByRef Cancel As Boolean)
  On Error Resume Next
  '
  App.SetValue("tmDOCO", "")

End Sub

Private Sub txtDOCO_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  Dim bSalesOrder As Boolean
  '
  If (Len(Rsp)=0) Then Exit Sub

  Cancel = True
  '
  ' Numeric?
  If Not IsNumeric(Rsp) Then
    App.MsgBox GetMsg(276)
    Exit Sub
  End If

  mbPickList = False
  
  sSql = "select DISTINCT SDDOCO, SDDCTO from  F4211" & _
         " where SDDOCO = " & Rsp & " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' " & _
         " order by SDDOCO, SDDCTO "
  '
  DB.Execute(sSql, sCols, sRows)
  If Not (Len(sRows) = 0) Then
    bSalesOrder = True
  Else
    sSql = "select DISTINCT SDDOCO, SDDCTO from  F4211" & _
         " where SDURAB = " & Rsp & " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' " & _
         " order by SDDOCO, SDDCTO "
    '
    DB.Execute(sSql, sCols, sRows)

    If Not (Len(sRows) = 0) Then
      mbPickList = True
    End If
  End If

  If (Not bSalesOrder) And (Not mbPickList) Then
    App.MsgBox("Entry is not a valid sales order or pick list")
    Cancel = True
    Exit Sub
  End If

  '
  ' If Ordernumber is unique default DocType
  If (bSalesOrder) Then
    txtDCTO.Visible = True
    txtDCTO.Text = DB.Extract(sCols,sRows,1,"SDDCTO")
    txtDCTO.DisplayOnly = True
  End If

  If (mbPickList) Then
    txtDCTO.Visible = False
    txtDCTO.DisplayOnly = True
    App.SetFocus("txtLITM", True)
  End If
  '
  App.SetValue("tmDOCO", Rsp)

  sSql = "Select SDLITM, sum(SDSOQS) as SDSOQS, SDUOM from  F4211 " & _
       " where SDMCU = '" & App.GetValue("tmMCU") & "' and ( SDDOCO = " & App.GetValue("tmDOCO") & " or SDURAB = " & App.GetValue("tmDOCO") & ") " & _
       " and SDSOQS <> 0 and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' group by SDLITM, SDUOM order by SDLITM"
  DB.Execute(sSql, sCols, sRows)
  lblItemDesc.Caption = "Open SO Lines: " & DB.Count(sRows)
  '
  Cancel = False

End Sub

Private Sub txtDOCO_OnSearch(ByRef Rsp As String, ByRef Cancel As Boolean)
  On Error Resume Next
  '
  Dim sMCU     As String
  Dim sDocType As String
  '
  sMCU = App.GetValue("tmMCU")
  '
  Cancel = Not Search_F4211_DOCO(Rsp, sMCU, msStatusF, msStatusT, sDocType)
  If Not Cancel Then txtDCTO.Text = sDocType
End Sub

Private Sub txtDCTO_OnBackup(ByRef Cancel As Boolean)
  On Error Resume Next
  '
  App.SetValue("tmDCTO", "")

End Sub

Private Sub txtDCTO_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  Dim sHold As String
  '
  If (Len(Rsp)=0) Then Exit Sub
  Cancel = True
  '
  Rsp = UCase(Rsp)
  '
  sSql = "select count(*) from  F4211" & _
         " where SDDCTO = '" & Rsp & "' and SDDOCO = %tmDOCO and SDMCU = '%tmMCU'"
  '
  DB.Execute(sSql, sCols, sRows)

  If (Val(sRows) = 0) Then
    App.MsgBox GetMsg(197)
    Exit Sub
  End If

  ' check if SO is on Hold
  sSql = "select SHHOLD from  F4201" & _
         " where SHDCTO = '" & Rsp & "' and SHDOCO = %tmDOCO and SHMCU = '%tmMCU'"
  '
  DB.Execute(sSql, sCols, sRows)

  sHold = DB.Extract(sCols,sRows,1,1)

  If Trim(sHold) <> "" Then
    App.MsgBox GetMsg(214)
    Exit Sub
  End If
  '
  App.SetValue("tmDCTO", Rsp)
  '
  ' unlock record from prior document
  '
  If cF00095 Then
    If Len(Trim(msResKeySav)) > 0 Then F00095RemoveReservation("F4211", msResKeySav, msAppl)
    '
    ' proceed JDE Record Lock
    '
    msResKey = Trim(App.GetValue("tmDOCO")) & Trim(App.GetValue("tmDCTO")) & Trim(App.GetValue("tmCO"))
    '
    If Not F00095ReserveObject("F4211",msResKey,msAppl,msResKeySav) Then
      txtDOCO.Text = ""
      App.SetFocus("txtDOCO")
      Exit Sub
    End If
  End If

  Cancel = False

End Sub

Private Sub txtDCTO_OnSearch(ByRef Rsp As String, ByRef Cancel As Boolean)
  On Error Resume Next
  '
  Dim sMCU  As String
  Dim vDOCO As String
  '
  sMCU  = App.GetValue("tmMCU")
  vDOCO = App.GetValue("tmDOCO")
  '
  Cancel = Not Search_F4211_DCTO(Rsp, sMCU, vDOCO, msStatusF, msStatusT)
End Sub

Private Sub txtLITM_OnBackup(ByRef Cancel As Boolean)
  On Error Resume Next
  '
  App.SetValue("tmLITM", "")
  App.SetValue("tmITM",  "")
  App.SetValue("tmUOM",  "")
  App.SetValue("tmLNID", "")
  App.SetValue("tmSearchLNID", "")
  App.SetValue("tmLOTN", "")
  App.SetValue("tmLNTY", "")
  App.SetValue("tmSOBK", "")
  App.SetValue("tmSOCN", "")
  '
  lblItemDesc.Caption = ""
  lblSOQty.Caption = ""
  '
  txtLOTN.Required = False
  txtLOTN.Visible = False
  '
  mnMaxQty = 0
  mnMaxQoH = 0
  msHardLOTN = ""
  msHardLOCN = ""
  mbSerialized = False

  If (mbPickList) Then
    App.SetFocus("txtDOCO")
  End If

End Sub

Private Sub txtLITM_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next
  '
  Dim nLNID    As Currency
  Dim nSOBK    As Currency
  Dim nSOCN    As Currency
  Dim sMCU     As String
  Dim sLot     As String
  Dim sLocn    As String
  Dim sCOMM    As String
  Dim sITM     As String
  Dim sLITM    As String
  Dim sAITM    As String
  Dim sDesc    As String
  Dim sDSC1    As String
  Dim sUOM     As String
  Dim nType    As Long
  Dim iCnt     As Long
  Dim vArray   As Variant
  Dim sSql     As String
  Dim sCols    As String
  Dim sRows    As String
  Dim sSQL2    As String
  Dim sCols2   As String
  Dim sRows2   As String
  Dim sSqlItem As String
  Dim sColsItem As String
  Dim sRowsItem As String

  Dim sSqlJDEInv As String
  Dim sColsJDEInv As String
  Dim sRowsJDEInv As String

  Dim sSqlVerify As String
  Dim sColsVerify As String
  Dim sRowsVerify As String

  Dim sSqlSO As String
  Dim sColsSO As String
  Dim sRowsSO As String

  Dim sCurrentLITM As String
  Dim sPreviousLITM As String

  Dim sDCTO As String

  Dim sPrimaryUOM As String
  Dim nAddToTotalPick As Long

  Dim nValidateTotalOnSO As Long
  Dim nQtyBeingPickedOnPallet As Long

  Dim sSqlVerifyUOM As String
  Dim sColsVerifyUOM As String
  Dim sRowsVerifyUOM As String
  Dim sVerifyPrimaryUOM As String

  Dim x As Long
  Dim y As Long
  Dim z As Long

  Dim uLP101 As LP101Data       ' create LP101 Structure
  Dim uLP102 As LP102Data       ' create LP101 Structure

  Dim vRsp As Variant

  Dim sLPID    As String

  Dim a As Integer
  Dim nQty As Long
  Dim nQtyRemain As Long

  Dim nCartonMax As Long

  Cancel = True
  '
  If (Len(Rsp) = 0) Then Exit Sub

  If mbDisplayListFkey Then
    mbDisplayListFkey = False
    Cancel = False
    Exit Sub
  End If

  Cancel=True
  mbIsLP = False
  lblLPID.Caption = ""
  txtLOCN.DisplayOnly = False
  txtLOTN.DisplayOnly = False
  '
  Rsp = Trim(UCase(Rsp))

  '
  ' Validate Item Master / get Item Branch
  If Validate_Item(App.GetValue("tmMCU"), Rsp, sITM, sLITM, sAITM, sDSC1, sUOM, nType, mbHasLots, mbSerialized, False, True) Then


    App.SetValue("tmITM", sITM)
    App.SetValue("tmLITM", Rsp)
    App.SetValue("tmLOTN", "")


    ' Get First SO Line
    sSql = "select * from  F4211 left join F41002 on SDITM = UMITM" & _
           " where (SDUOM = UMUM and UMRUM = '" & sUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & Rsp & "' and SDSOQS <> 0 " & _
           " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
    DB.Execute(sSql,sCols,sRows)

    If (DB.Count(sRows) = 0) Then
      sSql = "select * from  F4211" & _
             " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & Rsp & "' and SDSOQS <> 0 " & _
             " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
      '
      DB.Execute(sSql,sCols,sRows)
    End If

    App.SetValue("tmFirstDOCO", Trim(DB.Extract(sCols, sRows, 1, "SDDOCO")))
    App.SetValue("tmFirstDCTO", Trim(DB.Extract(sCols, sRows, 1, "SDDCTO")))

    App.SetValue("tmDCTO", DB.Extract(sCols, sRows, 1, "SDDCTO"))
    sDCTO = App.GetValue("tmDCTO")

    If (Len(sRows) = 0) Then
      App.MsgBox(GetMsg(101))
      Exit Sub
    End If

    ' Get Total Pick Quantity
    sSQL2 = "select * from  F4211 left join F41002 on SDITM = UMITM" & _
             " where (SDUOM = UMUM and UMRUM = '" & sUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & Rsp & "' and SDSOQS <> 0 " & _
             " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
    DB.Execute(sSQL2,sCols2,sRows2)

    mnTotalPick = 0
    For x = 1 To DB.Count(sRows2)
      sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
      DB.Execute(sSqlItem,sColsItem,sRowsItem)
      sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

      If (sPrimaryUOM <> Trim(DB.Extract(sCols2,sRows2,x,"SDUOM"))) Then

        sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
        DB.Execute(sSqlItem,sColsItem,sRowsItem)
        nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
      Else
        nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
      End If
      mnTotalPick = nAddToTotalPick + mnTotalPick
    Next

    sSQL2 = "select * from  F4211" & _
             " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & Rsp & "' and SDSOQS <> 0 and SDUOM = '" & sUOM & "'" & _
             " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
      '
    DB.Execute(sSQL2,sCols2,sRows2)
    For x = 1 To DB.Count(sRows2)
      sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
      DB.Execute(sSqlItem,sColsItem,sRowsItem)
      sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

      If (sPrimaryUOM <> Trim(DB.Extract(sCols2,sRows2,x,"SDUOM"))) Then

        sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
        DB.Execute(sSqlItem,sColsItem,sRowsItem)
        nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
      Else
        nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
      End If
      mnTotalPick = nAddToTotalPick + mnTotalPick
    Next


    '
    sDesc    = DB.Extract(sCols, sRows, 1, "SDDSC1")
    sLot     = DB.Extract(sCols, sRows, 1, "SDLOTN")
    sLocn    = DB.Extract(sCols, sRows, 1, "SDLOCN")
    sCOMM    = DB.Extract(sCols, sRows, 1, "SDCOMM")
    nSOBK    = ConvDecimalsFromSQL("SOBK", DB.Extract(sCols,sRows,1,"SDSOBK"))
    nSOCN    = ConvDecimalsFromSQL("SOCN", DB.Extract(sCols,sRows,1,"SDSOCN"))
    nLNID    = ConvDecimalsFromSQL("LNID", DB.Extract(sCols,sRows,1,"SDLNID"))

    For x = 1 To 1
      sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols, sRows, x, "SDLITM")) & "'"
      DB.Execute(sSqlItem,sColsItem,sRowsItem)
      sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

      If (sPrimaryUOM <> Trim(DB.Extract(sCols,sRows,x,"SDUOM"))) Then

        sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols, sRows, 1, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols, sRows, 1, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
        DB.Execute(sSqlItem,sColsItem,sRowsItem)
        nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols,sRows,1,"SDSOQS"))
      Else
        nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols,sRows,x,"SDSOQS"))
      End If
      mnMaxQty = nAddToTotalPick
    Next
'    mnMaxQty = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols,sRows,1,"SDSOQS"))


    '
'    lblItemDesc.Caption = sDesc
    App.SetValue("tmLNID",    nLNID)
    App.SetValue("tmPrimaryUOM",     sPrimaryUOM)
    App.SetValue("tmUOM",     Trim(DB.Extract(sCols, sRows, 1, "SDUOM")))
    App.SetValue("tmITM",     DB.Extract(sCols, sRows, 1, "SDITM"))
    App.SetValue("tmLNTY",    DB.Extract(sCols, sRows, 1, "SDLNTY"))
    App.SetValue("tmShipTo",  DB.Extract(sCols, sRows, 1, "SDSHAN"))
    App.SetValue("tmCarrier", DB.Extract(sCols, sRows, 1, "SDCARS"))
    App.SetValue("tmCO",      DB.Extract(sCols, sRows, 1, "SDKCOO"))  ' INS RBR 01/08/2007
    App.SetValue("tmSOBK",    nSOBK)
    App.SetValue("tmSOCN",    nSOCN)
    App.SetValue("SelCOMM",   sCOMM)
    App.SetValue("tmCOMM",    sCOMM)
    App.SetValue("tmSOQS",    mnMaxQty)
    '
    ' Reduce from label what's already picked
    For iCnt = 1 To mnCnt
      vArray = Split(Ext(msValCache,1, iCnt),";")
      If vArray(2) = Trim(App.GetValue("tmFirstDOCO")) And vArray(3) = Trim(App.GetValue("tmFirstDCTO")) And vArray(4) = Trim(App.GetValue("tmLNID")) Then
        mnMaxQty = mnMaxQty - Val(Ext(msValCache, 16, iCnt))
        mnTotalPick = mnTotalPick - Val(Ext(msValCache, 16, iCnt))
      End If
    Next iCnt

    msHardLOTN = Trim(sLot)
    '
    If Len(Trim(sLocn)) > 0 Then
      sMCU = App.GetValue("tmMCU")
      msHardLOCN = sLocn
      Call Validate_Locn(msHardLOCN, sMCU, sLocn)
    End If
    '
'    lblItemDesc.Caption = sDesc
    '
    lblSOQty.Caption = "Open Qty:" & mnTotalPick & " " & App.GetValue("tmPrimaryUOM")
    '
    txtLOCN.Visible = True
    txtLOTN.Visible = mbHasLots
    txtLOTN.Required = mbHasLots
    '
    If Not mbHasLots Then  App.SetValue("tmLOTN", "")
  Else
    'Check if it is a license plate - if it is, find the LITM and process.

    sLPID = Trim(Rsp)
    sSql = "select * from F55101 where LMLPID = '" & sLPID & "' and LMMCU = '" & App.GetValue("tmMCU") & "'"
    DB.Execute(sSql, sCols, sRows)

    If (DB.Count(sRows) = 0) Then
      App.MsgBox("LP or Item # Is Not Valid or LP Is Not In Correct Branch For Picking")
      Cancel = True
      Exit Sub
    End If


    PlateStart:

    If (Trim(DB.Extract(sCols,sRows,1,"LMTYPE")) <> "P") Then
      App.SetValue("tmLPID", sLPID)


      If Trim(msValCache) <> "" Then
        ' Ask if the user wants to backorder remaining.
        ' If yes - process using backorder remaining version.
        vRsp = "No"

        'WLG04 START
        If cbBackorder.Checked = True Then
          vRsp = App.MsgBox("The current item is not completely picked.  Do you want to backorder the remaining quantity?",,,"[Yes] [No]")
        End If        '
        'WLG04 END

        If vRsp = "Yes" Then
          Call ExecuteTM(True)
        Else
          ' If no - process using normal version.  Line will split & remain open.
          Call ExecuteTM(False)
        End If
      Else
        'Do nothing
      End If


      sSql = "select LDLITM, LMLOCN, LDLOTN, sum(LDUORG-LDSOQS) as QtyAvail from F55102 inner join F55101 on LDLPID = LMLPID where LMLPID = '" & sLPID & "'" & " or LMPALP = '" & sLPID & "' group by LDLITM, LMLOCN, LDLOTN order by LDLITM"
      DB.Execute(sSql, sCols, sRows)

      If (DB.Count(sRows) = 0) Then
        App.MsgBox("Nothing is on this pallet.")
        Cancel = True
        Exit Sub
      End If

      'Verify that qty exists in JDE

      For a = 1 To DB.Count(sRows)
        sSqlItem = "select IMITM from F4101 where IMLITM = '" & Trim(DB.Extract(sCols, sRows, a, "LDLITM")) & "'"
        DB.Execute(sSqlItem,sColsItem,sRowsItem)

        sSqlJDEInv = "select sum(LIPQOH) as JDEQTY from F41021 where LIMCU = '%tmMCU' and LIITM = " & Val(DB.Extract(sColsItem, sRowsItem, 1, "IMITM")) & _
                  " and LILOCN = '" & Trim(DB.Extract(sCols, sRows, a, "LMLOCN")) & "' and " & _
                  "LILOTN = '" & Trim(DB.Extract(sCols, sRows, a, "LDLOTN")) & "'"
        DB.Execute(sSqlJDEInv, sColsJDEInv, sRowsJDEInv)
        If (Val(DB.Extract(sCols, sRows, a, "QtyAvail")) > ConvDecimalsFromSQL("PQOH", (DB.Extract(sColsJDEInv, sRowsJDEInv, 1, "JDEQTY")))) Then
          App.MsgBox("JDE Inventory Does Not Match License Plate Inventory.  Contact IT Manager")
          Cancel = True
          Exit Sub
        End If
      Next

      'Verify that there is enough qty needed on sales order / consolidated pick for entire pallet.

      sSqlVerify = "select LDLITM, sum(LDUORG-LDSOQS) as QtyAvail from F55102 inner join F55101 on LDLPID = LMLPID where LMLPID = '" & sLPID & "'" & " or LMPALP = '" & sLPID & "' group by LDLITM "
      DB.Execute(sSqlVerify, sColsVerify, sRowsVerify)

      For a = 1 To DB.Count(sRowsVerify)
        sCurrentLITM = Trim(DB.Extract(sColsVerify, sRowsVerify, a, "LDLITM"))
        ' Get Current LITM's primary UOM

        sSqlVerifyUOM = "select IMUOM1 from F4101 where IMLITM = '" & sCurrentLITM & "'"
        DB.Execute(sSqlVerifyUOM,sColsVerifyUOM,sRowsVerifyUOM)
        sVerifyPrimaryUOM = Trim(DB.Extract(sColsVerifyUOM, sRowsVerifyUOM, 1, "IMUOM1"))
        ' Get Total Pick Quantity
        sSQL2 = "select * from  F4211 left join F41002 on SDITM = UMITM" & _
                 " where (SDUOM = UMUM and UMRUM = '" & sVerifyPrimaryUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & sCurrentLITM & "' and SDSOQS <> 0 " & _
                 " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
        DB.Execute(sSQL2,sCols2,sRows2)


        nValidateTotalOnSO = 0
        For x = 1 To DB.Count(sRows2)
          sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
          DB.Execute(sSqlItem,sColsItem,sRowsItem)
          sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

          If (sPrimaryUOM <> Trim(DB.Extract(sCols2,sRows2,x,"SDUOM"))) Then

            sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & Trim(sPrimaryUOM) & "'"
            DB.Execute(sSqlItem,sColsItem,sRowsItem)
            nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
          Else
            nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
          End If
          nValidateTotalOnSO = nAddToTotalPick + nValidateTotalOnSO
        Next

        sSQL2 = "select * from  F4211" & _
               " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & sCurrentLITM & "' and SDSOQS <> 0 and SDUOM = '" & sVerifyPrimaryUOM & "'" & _
               " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
        '
        DB.Execute(sSQL2,sCols2,sRows2)

        For x = 1 To DB.Count(sRows2)
          sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
          DB.Execute(sSqlItem,sColsItem,sRowsItem)
          sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

          If (sPrimaryUOM <> Trim(DB.Extract(sCols2,sRows2,x,"SDUOM"))) Then

            sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & Trim(sPrimaryUOM) & "'"
            DB.Execute(sSqlItem,sColsItem,sRowsItem)
            nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
          Else
            nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
          End If
          nValidateTotalOnSO = nAddToTotalPick + nValidateTotalOnSO
        Next

        nQtyBeingPickedOnPallet = Val(DB.Extract(sColsVerify, sRowsVerify, a, "QtyAvail"))

        If nQtyBeingPickedOnPallet > nValidateTotalOnSO Then
          App.MsgBox("There are too many of item " & sCurrentLITM & " on the pallet for the Sales Order(s).  Remove enough before continuing")
          Cancel = True
          Exit Sub
        End If

      Next


      For a = 1 To DB.Count(sRows)
        sCurrentLITM = Trim(DB.Extract(sCols, sRows, a, "LDLITM"))

        sSqlVerifyUOM = "select IMUOM1 from F4101 where IMLITM = '" & sCurrentLITM & "'"
        DB.Execute(sSqlVerifyUOM,sColsVerifyUOM,sRowsVerifyUOM)
        sVerifyPrimaryUOM = Trim(DB.Extract(sColsVerifyUOM, sRowsVerifyUOM, 1, "IMUOM1"))

        If msValCache <> "" And sCurrentLITM <> sPreviousLITM And Trim(sPreviousLITM) <> "" Then
          Call ExecuteTM(False)
        End If

        nQty = Val(DB.Extract(sCols,sRows,a,"QtyAvail"))
        mbIsLP = True
          'sSQL = "select LDLITM, LMLOCN, LDLOTN, sum(LDUORG-LDSOQS) as QtyAvail from F55102 inner join F55101 on LDLPID = LMLPID where LMLPID = '" & sLPID & "'" & " or LMPALP = '" & sLPID & "' group by LDLITM, LMLOCN, LDLOTN "
          '      DB.Execute(sSQL, sCols, sRows)
        App.SetValue("tmLOCN", Trim(DB.Extract(sCols, sRows, a, "LMLOCN")))
        App.SetValue("tmDspLOCN", Trim(DB.Extract(sCols, sRows, a, "LMLOCN")))
        txtLOCN.Text = Trim(DB.Extract(sCols, sRows, a, "LMLOCN"))
        txtLOCN.DisplayOnly = True

        App.SetValue("tmLOTN", Trim(DB.Extract(sCols, sRows, a, "LDLOTN")))
        txtLOTN.Text = Trim(DB.Extract(sCols, sRows, a, "LDLOTN"))
        txtLOTN.DisplayOnly = True

        App.SetValue("tmQtyAvail", Val(DB.Extract(sCols, sRows, a, "QtyAvail")))

        App.SetValue("tmITM", sITM)
        App.SetValue("tmLITM", sCurrentLITM)


        ' Get First SO Line
        sSqlSO = "select * from  F4211 left join F41002 on SDITM = UMITM" & _
               " where (SDUOM = UMUM and UMRUM = '" & sVerifyPrimaryUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & sCurrentLITM & "' and SDSOQS <> 0 " & _
               " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
        DB.Execute(sSqlSO,sColsSO,sRowsSO)

        If (DB.Count(sRowsSO) = 0) Then
          sSqlSO = "select *  from  F4211" & _
                 " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & sCurrentLITM & "' and SDSOQS <> 0 and SDUOM = '" & sVerifyPrimaryUOM & "'" & _
                 " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
          '
          DB.Execute(sSqlSO,sColsSO,sRowsSO)
        End If

        If (Len(sRowsSO) = 0) Then
          App.MsgBox(GetMsg(101))
          Exit Sub
        End If

        App.SetValue("tmFirstDOCO", Trim(DB.Extract(sColsSO, sRowsSO, 1, "SDDOCO")))
        App.SetValue("tmFirstDCTO", Trim(DB.Extract(sColsSO, sRowsSO, 1, "SDDCTO")))

        'WLG03 START
        App.SetValue("tmDCTO", DB.Extract(sCols, sRows, 1, "SDDCTO"))
        'WLG03 END

        ' Get Total Pick Quantity
        sSQL2 = "select * from  F4211 left join F41002 on SDITM = UMITM" & _
                 " where (SDUOM = UMUM and UMRUM = '" & sVerifyPrimaryUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & sCurrentLITM & "' and SDSOQS <> 0 " & _
                 " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
        DB.Execute(sSQL2,sCols2,sRows2)


        mnTotalPick = 0
        For x = 1 To DB.Count(sRows2)
          sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
          DB.Execute(sSqlItem,sColsItem,sRowsItem)
          sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

          If (sPrimaryUOM <> Trim(DB.Extract(sCols2,sRows2,x,"SDUOM"))) Then

            sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & Trim(sPrimaryUOM) & "'"
            DB.Execute(sSqlItem,sColsItem,sRowsItem)
            nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
          Else
            nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
          End If
          mnTotalPick = nAddToTotalPick + mnTotalPick
        Next

        sSQL2 = "select * from  F4211" & _
               " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & sCurrentLITM & "' and SDSOQS <> 0 and SDUOM = '" & sVerifyPrimaryUOM & "'" & _
               " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
        '
        DB.Execute(sSQL2,sCols2,sRows2)

        For x = 1 To DB.Count(sRows2)
          sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
          DB.Execute(sSqlItem,sColsItem,sRowsItem)
          sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

          If (sPrimaryUOM <> Trim(DB.Extract(sCols2,sRows2,x,"SDUOM"))) Then

            sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & Trim(sPrimaryUOM) & "'"
            DB.Execute(sSqlItem,sColsItem,sRowsItem)
            nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
          Else
            nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
          End If
          mnTotalPick = nAddToTotalPick + mnTotalPick
        Next

        '
        sDesc    = DB.Extract(sColsSO, sRowsSO, 1, "SDDSC1")
        sLot     = DB.Extract(sColsSO, sRowsSO, 1, "SDLOTN")
        sLocn    = DB.Extract(sColsSO, sRowsSO, 1, "SDLOCN")
        sCOMM    = DB.Extract(sColsSO, sRowsSO, 1, "SDCOMM")
        nSOBK    = ConvDecimalsFromSQL("SOBK", DB.Extract(sColsSO,sRowsSO,1,"SDSOBK"))
        nSOCN    = ConvDecimalsFromSQL("SOCN", DB.Extract(sColsSO,sRowsSO,1,"SDSOCN"))
        nLNID    = ConvDecimalsFromSQL("LNID", DB.Extract(sColsSO,sRowsSO,1,"SDLNID"))

        For x = 1 To 1
          sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sColsSO, sRowsSO, 1, "SDLITM")) & "'"
          DB.Execute(sSqlItem,sColsItem,sRowsItem)
          sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

          If (sPrimaryUOM <> Trim(DB.Extract(sColsSO,sRowsSO,1,"SDUOM"))) Then

            sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sColsSO, sRowsSO, 1, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sColsSO, sRowsSO, 1, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
            DB.Execute(sSqlItem,sColsItem,sRowsItem)
            nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sColsSO,sRowsSO,1,"SDSOQS"))
          Else
            nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sColsSO,sRowsSO,1,"SDSOQS"))
          End If
          mnMaxQty = nAddToTotalPick
        Next
    '    mnMaxQty = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols,sRows,1,"SDSOQS"))
        '
'        lblItemDesc.Caption = sDesc
        App.SetValue("tmLNID",    nLNID)
        App.SetValue("tmPrimaryUOM",     sPrimaryUOM)
        App.SetValue("tmUOM",     Trim(DB.Extract(sColsSO, sRowsSO, 1, "SDUOM")))
        App.SetValue("tmITM",     DB.Extract(sColsSO, sRowsSO, 1, "SDITM"))
        App.SetValue("tmLNTY",    DB.Extract(sColsSO, sRowsSO, 1, "SDLNTY"))
        App.SetValue("tmShipTo",  DB.Extract(sColsSO, sRowsSO, 1, "SDSHAN"))
        App.SetValue("tmCarrier", DB.Extract(sColsSO, sRowsSO, 1, "SDCARS"))
        App.SetValue("tmCO",      DB.Extract(sColsSO, sRowsSO, 1, "SDKCOO"))  ' INS RBR 01/08/2007
        App.SetValue("tmSOBK",    nSOBK)
        App.SetValue("tmSOCN",    nSOCN)
        App.SetValue("SelCOMM",   sCOMM)
        App.SetValue("tmCOMM",    sCOMM)
        App.SetValue("tmSOQS",    mnMaxQty)
        '
        ' Reduce from label what's already picked
        For iCnt = 1 To mnCnt
          vArray = Split(Ext(msValCache,1, iCnt),";")
          If vArray(2) = Trim(App.GetValue("tmFirstDOCO")) And vArray(3) = Trim(App.GetValue("tmFirstDCTO")) And vArray(4) = Trim(App.GetValue("tmLNID")) Then
            mnMaxQty = mnMaxQty - Val(Ext(msValCache, 16, iCnt))
            mnTotalPick = mnTotalPick - Val(Ext(msValCache, 16, iCnt))
          End If
        Next iCnt


        QuantityOnEnter:

        If (nQty >= mnMaxQty And nQty <= mnTotalPick) Then
          ' Go get more lines to put quantity on and loop until the whole qty is added to the pick
          App.SetValue("tmQTY", mnMaxQty)

          nQtyRemain = nQty - mnMaxQty
          'Accumulate the Values and loop until F2
          Call CumValues()
          'Execute the Transaction
          Call ExecuteTM(False)

          While nQtyRemain > 0
            ' Get First SO Line
            sSqlSO = "select * from  F4211 left join F41002 on SDITM = UMITM" & _
                   " where (SDUOM = UMUM and UMRUM = '" & sVerifyPrimaryUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & sCurrentLITM & "' and SDSOQS <> 0 " & _
                   " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
            DB.Execute(sSqlSO,sColsSO,sRowsSO)

            If (DB.Count(sRowsSO) = 0) Then
              sSqlSO = "select * from  F4211" & _
                     " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & sCurrentLITM & "' and SDSOQS <> 0 " & _
                     " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
              '
              DB.Execute(sSqlSO,sColsSO,sRowsSO)
            End If
            '

            App.SetValue("tmFirstDOCO", Trim(DB.Extract(sColsSO, sRowsSO, 1, "SDDOCO")))
            App.SetValue("tmFirstDCTO", Trim(DB.Extract(sColsSO, sRowsSO, 1, "SDDCTO")))

            'WLG03 START
            App.SetValue("tmDCTO", DB.Extract(sCols, sRows, 1, "SDDCTO"))
            'WLG03 END

            If (Len(sRowsSO) = 0) Then
              App.MsgBox(GetMsg(101))
              Exit Sub
            End If

            ' Get Total Pick Quantity
            sSQL2 = "select * from  F4211 left join F41002 on SDITM = UMITM" & _
                   " where (SDUOM = UMUM and UMRUM = '" & sVerifyPrimaryUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & sCurrentLITM & "' and SDSOQS <> 0 " & _
                   " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
            DB.Execute(sSQL2,sCols2,sRows2)

            mnTotalPick = 0
            For x = 1 To DB.Count(sRows2)
              sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
              DB.Execute(sSqlItem,sColsItem,sRowsItem)
              sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

              If (sPrimaryUOM <> Trim(DB.Extract(sColsSO,sRowsSO,x,"SDUOM"))) Then

                sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
                DB.Execute(sSqlItem,sColsItem,sRowsItem)
                nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
              Else
                nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
              End If
              mnTotalPick = nAddToTotalPick + mnTotalPick
            Next

            sSQL2 = "select * from  F4211" & _
                   " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & App.GetValue("tmLITM") & "' and SDSOQS <> 0  and SDUOM = '" & sVerifyPrimaryUOM & "'" & _
                   " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
            '
            DB.Execute(sSQL2,sCols2,sRows2)

            For x = 1 To DB.Count(sRows2)
              sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
              DB.Execute(sSqlItem,sColsItem,sRowsItem)
              sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

              If (sPrimaryUOM <> Trim(DB.Extract(sColsSO,sRowsSO,x,"SDUOM"))) Then

                sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
                DB.Execute(sSqlItem,sColsItem,sRowsItem)
                nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
              Else
                nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
              End If
              mnTotalPick = nAddToTotalPick + mnTotalPick
            Next

            '
            sDesc    = DB.Extract(sColsSO, sRowsSO, 1, "SDDSC1")
            sLot     = DB.Extract(sColsSO, sRowsSO, 1, "SDLOTN")
            sLocn    = DB.Extract(sColsSO, sRowsSO, 1, "SDLOCN")
            sCOMM    = DB.Extract(sColsSO, sRowsSO, 1, "SDCOMM")
            nSOBK    = ConvDecimalsFromSQL("SOBK", DB.Extract(sColsSO,sRowsSO,1,"SDSOBK"))
            nSOCN    = ConvDecimalsFromSQL("SOCN", DB.Extract(sColsSO,sRowsSO,1,"SDSOCN"))
            nLNID    = ConvDecimalsFromSQL("LNID", DB.Extract(sColsSO,sRowsSO,1,"SDLNID"))

            For x = 1 To 1
              sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sColsSO, sRowsSO, 1, "SDLITM")) & "'"
              DB.Execute(sSqlItem,sColsItem,sRowsItem)
              sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

              If (sPrimaryUOM <> Trim(DB.Extract(sColsSO,sRowsSO,1,"SDUOM"))) Then

                sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sColsSO, sRowsSO, 1, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sColsSO, sRowsSO, 1, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
                DB.Execute(sSqlItem,sColsItem,sRowsItem)
                nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sColsSO,sRowsSO,1,"SDSOQS"))
              Else
                nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sColsSO,sRowsSO,1,"SDSOQS"))
              End If
              mnMaxQty = nAddToTotalPick
            Next
      '      mnMaxQty = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols,sRows,1,"SDSOQS"))
            '
'            lblItemDesc.Caption = sDesc
            App.SetValue("tmLNID",    nLNID)
            App.SetValue("tmPrimaryUOM",     sPrimaryUOM)
            App.SetValue("tmUOM",     Trim(DB.Extract(sColsSO, sRowsSO, 1, "SDUOM")))
            App.SetValue("tmITM",     DB.Extract(sColsSO, sRowsSO, 1, "SDITM"))
            App.SetValue("tmLNTY",    DB.Extract(sColsSO, sRowsSO, 1, "SDLNTY"))
            App.SetValue("tmShipTo",  DB.Extract(sColsSO, sRowsSO, 1, "SDSHAN"))
            App.SetValue("tmCarrier", DB.Extract(sColsSO, sRowsSO, 1, "SDCARS"))
            App.SetValue("tmCO",      DB.Extract(sColsSO, sRowsSO, 1, "SDKCOO"))  ' INS RBR 01/08/2007
            App.SetValue("tmSOBK",    nSOBK)
            App.SetValue("tmSOCN",    nSOCN)
            App.SetValue("SelCOMM",   sCOMM)
            App.SetValue("tmCOMM",    sCOMM)
            App.SetValue("tmSOQS",    mnMaxQty)
            '
            ' Reduce from label what's already picked
            For iCnt = 1 To mnCnt
              vArray = Split(Ext(msValCache,1, iCnt),";")

              'WLG03 START
              'If vArray(2) = Trim(App.GetValue("tmDOCO")) And vArray(3) = Trim(App.GetValue("tmDCTO")) And vArray(4) = Trim(App.GetValue("tmLNID")) Then
              If vArray(2) = Trim(App.GetValue("tmFirstDOCO")) And vArray(3) = Trim(App.GetValue("tmFirstDCTO")) And vArray(4) = Trim(App.GetValue("tmLNID")) Then
              'WLG03 END

                mnMaxQty = mnMaxQty - Val(Ext(msValCache, 16, iCnt))
                mnTotalPick = mnTotalPick - Val(Ext(msValCache, 16, iCnt))
              End If
            Next iCnt

            '
'            lblItemDesc.Caption = sDesc
            '
            lblSOQty.Caption = "Open Qty:" & mnTotalPick & " " & App.GetValue("tmPrimaryUOM")


            'mnMaxQty = the SOQS on the new SO line for the pick List.Data
            If (nQtyRemain > mnMaxQty) Then
              App.SetValue("tmQTY", mnMaxQty)
              nQtyRemain = nQtyRemain - mnMaxQty
              Call CumValues()
              Call ExecuteTM(False)
            Else
              App.SetValue("tmQTY", nQtyRemain)
              nQtyRemain = 0
              Call CumValues()
              If mnMaxQty = 0 Then
                Call ExecuteTM(False)
              End If
            End If
          Wend
        Else
          App.SetValue("tmQTY", nQty)

          'Accumulate the Values and loop until F2
          Call CumValues()
          '
        End If

        sPreviousLITM = sCurrentLITM

      Next a




      'Update the LP records

      UpdateLP:
      sSql = "select * from F55101 where LMPALP = '" & sLPID & "' or LMLPID = '" & sLPID & "'"
      DB.Execute(sSql, sCols, sRows)

      For y=1 To DB.Count(sRows)
        Call LP101_Reset(uLP101)
        uLP101.sLMLPID = Trim(DB.Extract(sCols, sRows, y, "LMLPID"))
        X_LP101("I",uLP101)
'        uLP101.sLMRNXTR = "560"
        uLP101.sLMRDOCO = Trim(App.GetValue("tmDOCO"))
        uLP101.sLMRDCTO = Trim(App.GetValue("tmDCTO"))
        If Not X_LP101("C",uLP101) Then
          App.MsgBox("Error in LP Update - New LP Work Order and Status Could Not Be Committed - Contact IT Manager")
        End If

        uLP101.sLMRNXTR = ""
        uLP101.sLMRDOCO = ""
        uLP101.sLMRDCTO = ""
        If Not X_LP101("C",uLP101) Then
          App.MsgBox("Error in LP Update - New LP Work Order and Status Could Not Be Committed - Contact IT Manager")
        End If

        'Get each F55102 Record under the F55101 record being processed:
        sSQL2 = "select * from F55102 where LDLPID = '" & Trim(DB.Extract(sCols, sRows, y, "LMLPID")) & "'"
        DB.Execute(sSQL2, sCols2, sRows2)

        For z = 1 To DB.Count(sRows2)
          Call LP102_Reset(uLP102)
          uLP102.sLDLPID = Trim(DB.Extract(sCols2, sRows2, z, "LDLPID"))
          uLP102.nLDLNID = Val(DB.Extract(sCols2, sRows2, z, "LDLNID"))
          X_LP102("I",uLP102)
          uLP102.sLDRNXTR = "560"
          uLP102.sLDRDOCO = Trim(App.GetValue("tmDOCO"))
          uLP102.sLDRDCTO = Trim(App.GetValue("tmDCTO"))
          uLP102.nLDSOQS = uLP102.nLDUORG
          If Not X_LP102("C",uLP102) Then
            App.MsgBox("Error in LP Update - New LP Work Order and Status Could Not Be Committed - Contact IT Manager")
          End If
          uLP102.sLDRNXTR = ""
          uLP102.sLDRDOCO = ""
          uLP102.sLDRDCTO = ""
          uLP102.nLDSOQS = 0
          uLP102.nLDUORG = 0
          If Not X_LP102("C",uLP102) Then
            App.MsgBox("Error in LP Update - New LP Work Order and Status Could Not Be Committed - Contact IT Manager")
          End If
        Next z

      Next y

      lblLPID.Caption = App.GetValue("tmLPID")
      Screen.Bell(1)

      sSql = "Select SDLITM, sum(SDSOQS) as SDSOQS, SDUOM from  F4211 " & _
       " where SDMCU = '" & App.GetValue("tmMCU") & "' and ( SDDOCO = " & App.GetValue("tmDOCO") & " or SDURAB = " & App.GetValue("tmDOCO") & ") " & _
       " and SDSOQS <> 0 and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' group by SDLITM, SDUOM order by SDLITM"
      DB.Execute(sSql, sCols, sRows)
      lblItemDesc.Caption = "Open SO Lines: " & DB.Count(sRows)

      mbIsLP = False
      Cancel = True
      Exit Sub


    End If 'If it's a Pallet type








    sSql = "select LDLITM, LMLOCN, LDLOTN, (LDUORG-LDSOQS) as QtyAvail from F55102 inner join F55101 on LDLPID = LMLPID where LDLPID = '" & sLPID & "'
    DB.Execute(sSql, sCols, sRows)

    If (Val(DB.Extract(sCols, sRows, 1, "QtyAvail")) <= 0) Then
      App.MsgBox("No Quantity Remains On LP")
      Cancel = True
      Exit Sub
    End If

    mbIsLP = True

    App.SetValue("tmLOCN", Trim(DB.Extract(sCols, sRows, 1, "LMLOCN")))
    App.SetValue("tmDspLOCN", Trim(DB.Extract(sCols, sRows, 1, "LMLOCN")))
    txtLOCN.Text = Trim(DB.Extract(sCols, sRows, 1, "LMLOCN"))
    txtLOCN.DisplayOnly = True

    App.SetValue("tmLOTN", Trim(DB.Extract(sCols, sRows, 1, "LDLOTN")))
    txtLOTN.Text = Trim(DB.Extract(sCols, sRows, 1, "LDLOTN"))
    txtLOTN.DisplayOnly = True

    App.SetValue("tmLPID", Rsp)
    lblLPID.Caption = "LP #: " & Rsp
    App.SetValue("tmQtyAvail", Val(DB.Extract(sCols, sRows, 1, "QtyAvail")))
    Rsp = Trim(DB.Extract(sCols,sRows,1,"LDLITM"))

    App.SetValue("tmITM", sITM)
    App.SetValue("tmLITM", Rsp)

    sSqlVerifyUOM = "select IMUOM1 from F4101 where IMLITM = '" & Rsp & "'"
    DB.Execute(sSqlVerifyUOM,sColsVerifyUOM,sRowsVerifyUOM)
    sVerifyPrimaryUOM = Trim(DB.Extract(sColsVerifyUOM, sRowsVerifyUOM, 1, "IMUOM1"))

    ' Get First SO Line
    sSql = "select * from  F4211 left join F41002 on SDITM = UMITM" & _
           " where (SDUOM = UMUM and UMRUM = '" & sVerifyPrimaryUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & Rsp & "' and SDSOQS <> 0 " & _
           " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
    DB.Execute(sSql,sCols,sRows)

    If (DB.Count(sRows) = 0) Then
      sSql = "select *  from  F4211" & _
             " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & Rsp & "' and SDSOQS <> 0 and SDUOM = '" & sVerifyPrimaryUOM & "'" & _
             " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
      '
      DB.Execute(sSql,sCols,sRows)
    End If

    If (Len(sRows) = 0) Then
      App.MsgBox(GetMsg(101))
      Exit Sub
    End If

    App.SetValue("tmFirstDOCO", Trim(DB.Extract(sCols, sRows, 1, "SDDOCO")))
    App.SetValue("tmFirstDCTO", Trim(DB.Extract(sCols, sRows, 1, "SDDCTO")))

    'WLG03 START
    App.SetValue("tmDCTO", DB.Extract(sCols, sRows, 1, "SDDCTO"))
    'WLG03 END

    ' Get Total Pick Quantity
    sSQL2 = "select * from  F4211 left join F41002 on SDITM = UMITM" & _
             " where (SDUOM = UMUM and UMRUM = '" & sVerifyPrimaryUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & Rsp & "' and SDSOQS <> 0 " & _
             " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
    DB.Execute(sSQL2,sCols2,sRows2)


    mnTotalPick = 0
    For x = 1 To DB.Count(sRows2)
      sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
      DB.Execute(sSqlItem,sColsItem,sRowsItem)
      sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

      If (sPrimaryUOM <> Trim(DB.Extract(sCols2,sRows2,x,"SDUOM"))) Then

        sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & Trim(sPrimaryUOM) & "'"
        DB.Execute(sSqlItem,sColsItem,sRowsItem)
        nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
      Else
        nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
      End If
      mnTotalPick = nAddToTotalPick + mnTotalPick
    Next

    sSQL2 = "select * from  F4211" & _
           " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & Rsp & "' and SDSOQS <> 0 and SDUOM = '" & sVerifyPrimaryUOM & "'" & _
           " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
    '
    DB.Execute(sSQL2,sCols2,sRows2)

    For x = 1 To DB.Count(sRows2)
      sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
      DB.Execute(sSqlItem,sColsItem,sRowsItem)
      sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

      If (sPrimaryUOM <> Trim(DB.Extract(sCols2,sRows2,x,"SDUOM"))) Then

        sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & Trim(sPrimaryUOM) & "'"
        DB.Execute(sSqlItem,sColsItem,sRowsItem)
        nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
      Else
        nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
      End If
      mnTotalPick = nAddToTotalPick + mnTotalPick
    Next

    '
    sDesc    = DB.Extract(sCols, sRows, 1, "SDDSC1")
    sLot     = DB.Extract(sCols, sRows, 1, "SDLOTN")
    sLocn    = DB.Extract(sCols, sRows, 1, "SDLOCN")
    sCOMM    = DB.Extract(sCols, sRows, 1, "SDCOMM")
    nSOBK    = ConvDecimalsFromSQL("SOBK", DB.Extract(sCols,sRows,1,"SDSOBK"))
    nSOCN    = ConvDecimalsFromSQL("SOCN", DB.Extract(sCols,sRows,1,"SDSOCN"))
    nLNID    = ConvDecimalsFromSQL("LNID", DB.Extract(sCols,sRows,1,"SDLNID"))

    For x = 1 To 1
      sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols, sRows, x, "SDLITM")) & "'"
      DB.Execute(sSqlItem,sColsItem,sRowsItem)
      sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

      If (sPrimaryUOM <> Trim(DB.Extract(sCols,sRows,1,"SDUOM"))) Then

        sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols, sRows, 1, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols, sRows, 1, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
        DB.Execute(sSqlItem,sColsItem,sRowsItem)
        nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols,sRows,1,"SDSOQS"))
      Else
        nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols,sRows,1,"SDSOQS"))
      End If
      mnMaxQty = nAddToTotalPick
    Next
    '
'    lblItemDesc.Caption = sDesc
    App.SetValue("tmLNID",    nLNID)
    App.SetValue("tmPrimaryUOM",     sPrimaryUOM)
    App.SetValue("tmUOM",     Trim(DB.Extract(sCols, sRows, 1, "SDUOM")))
    App.SetValue("tmITM",     DB.Extract(sCols, sRows, 1, "SDITM"))
    App.SetValue("tmLNTY",    DB.Extract(sCols, sRows, 1, "SDLNTY"))
    App.SetValue("tmShipTo",  DB.Extract(sCols, sRows, 1, "SDSHAN"))
    App.SetValue("tmCarrier", DB.Extract(sCols, sRows, 1, "SDCARS"))
    App.SetValue("tmCO",      DB.Extract(sCols, sRows, 1, "SDKCOO"))  ' INS RBR 01/08/2007
    App.SetValue("tmSOBK",    nSOBK)
    App.SetValue("tmSOCN",    nSOCN)
    App.SetValue("SelCOMM",   sCOMM)
    App.SetValue("tmCOMM",    sCOMM)
    App.SetValue("tmSOQS",    mnMaxQty)
    '
    ' Reduce from label what's already picked
    For iCnt = 1 To mnCnt
      vArray = Split(Ext(msValCache,1, iCnt),";")
      If vArray(2) = Trim(App.GetValue("tmFirstDOCO")) And vArray(3) = Trim(App.GetValue("tmFirstDCTO")) And vArray(4) = Trim(App.GetValue("tmLNID")) Then
        mnMaxQty = mnMaxQty - Val(Ext(msValCache, 16, iCnt))
        mnTotalPick = mnTotalPick - Val(Ext(msValCache, 16, iCnt))
      End If
    Next iCnt

    '
    If (Trim(txtLOTN.Text) <> "") Then
      txtLOTN.Visible = True
    Else
      txtLOTN.Visible = False
    End If
    txtLOCN.Visible = True
    txtLOCN.DisplayOnly = True
    txtLOTN.DisplayOnly = True

'    If user scans a Case LP (LMTYPE = “P”),
'    If F55102.UORG <= Open sales order quantity, Then automatically pick the full quantity To the sales order And don’t display QTY prompt.
'    If F55102.UORG > Open sales order quantity, the QTY prompt must display (no Default) And the user Is forced To enter the quantity that they are picking To the order.


'    sSQL = "select max(LDUORG) as CartonMax from F55102H where LDLPID = '" & App.GetValue("tmLPID") & "'"
'
'    DB.Execute(sSQL, sCols, sRows)
'
'    nCartonMax = Val(DB.Extract(sCols, sRows, 1, "CartonMax"))

    If (Val(App.GetValue("tmQtyAvail")) <= mnTotalPick) Then
      txtQTY.Defaults = Val(App.GetValue("tmQtyAvail"))
    End If

'    lblItemDesc.Caption = sDesc
    '
    lblSOQty.Caption = "Open Qty:" & mnTotalPick & " " & App.GetValue("tmPrimaryUOM")

  End If


  'Check if LITM is the same as msCurrentLITM
  'If yes, continue processing.  Else do an ExecuteTM.
  If Trim(msCurrentLITM) <> Trim(App.GetValue("tmLITM")) And Trim(msCurrentLITM) <> "" And msValCache <> "" Then
    ' Ask if the user wants to backorder remaining.
    ' If yes - process using backorder remaining version.
    vRsp = "No"

    'WLG04 START
    If cbBackorder.Checked = True Then
      vRsp = App.MsgBox("The current item is not completely picked.  Do you want to backorder the remaining quantity?",,,"[Yes] [No]")
    End If    '
    'WLG04 END

    If vRsp = "Yes" Then
      Call ExecuteTM(True)
    Else
      ' If no - process using normal version.  Line will split & remain open.
      Call ExecuteTM(False)
    End If


'    lblItemDesc.Caption = sDesc
    lblLPID.Caption = App.GetValue("tmLPID")

    lblSOQty.Caption = "Open Qty:" & mnTotalPick & " " & App.GetValue("tmPrimaryUOM")
    App.SetFocus("txtLITM", True)

  Else
    'Do nothing
  End If

  msCurrentLITM = Rsp
  '
  Cancel=False

End Sub

Private Sub txtLITM_OnSearch(ByRef Rsp As String, ByRef Cancel As Boolean)
  On Error Resume Next
  '
  Dim sMCU  As String
  Dim vDOCO As Variant
  Dim sDCTO As String
  Dim sLNID As String
  '
  sMCU  = App.GetValue("tmMCU")
  vDOCO = App.GetValue("tmDOCO")
  sDCTO = App.GetValue("tmDCTO")
  '
  Dim iDecLNID As Integer
  Dim iDecSOQS As Integer
  Dim sSql     As String
  Dim sLike    As String
  Dim sValue   As String
  Dim oList    As New SearchList

  '
  sSql = "Select SDLITM, sum(SDSOQS) as SDSOQS, SDUOM from  F4211 " & _
         " where SDMCU = '" & sMCU & "' and ( SDDOCO = " & vDOCO & " or SDURAB = " & vDOCO & ") " & _
         " and SDSOQS <> 0 and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' group by SDLITM, SDUOM order by SDLITM"

  '
  Call GetDecimals("LNID", iDecLNID)
  Call GetDecimals("SOQS", iDecSOQS)
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Item", giLenItem, CenterLeft, True)
  oList.SetColumn(2, "Qty",   giLenQTY, CenterRight, True, iDecSOQS)
  oList.SetColumn(3, "UOM",          3, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp     = Trim(LField(sValue, Chr(3), 1))

End Sub

Private Sub txtLOTN_OnBackup(ByRef Cancel As Boolean)
  On Error Resume Next
  '
   App.SetValue("tmLOTN", "")

End Sub

Private Sub txtLOTN_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next
  '
  Dim sSql    As String
  Dim sCols   As String
  Dim sRows   As String
  Dim iCnt    As Integer
  Dim vArray  As Variant
  '
  If (Len(Rsp)=0) Then Exit Sub

  Cancel=True
  '
  Rsp = Trim(UCase(Rsp))
  '
  ' Validate if hardcommited in SO
  If cForceLOTN And (Len(msHardLOTN)>0) Then
    If (Rsp <> msHardLOTN) Then
      App.MsgBox(GetMsg(212))
      Exit Sub
    End If
  End If
  '
  '***************************************************
  'WLG05 START - MOVING CODE TO QTY_ONENTER
  '***************************************************
  If mbIsLP Then
  ' Validate
  sSql = "select count(*) from  F4108" & _
         " where IOLOTN = '" & Rsp & "' and IOLITM = '%tmLITM' and IOMCU = '%tmMCU'"

  DB.Execute(sSql, sCols, sRows)

  If (Val(sRows) = 0) Then
    App.MsgBox(GetMsg(78))
    Exit Sub
  End If
  '
  ' Validate it
  sSql = "select LIPQOH from  F41021" & _
         " where LILOCN = '" & App.GetValue("tmLOCN") & "' and LIMCU = '" & App.GetValue("tmMCU") & "' and LIITM = " & App.GetValue("tmITM") & " and LILOTN = '" & Rsp & "'"
  '
  DB.Execute(sSql, sCols, sRows)

  If (Len(sRows) = 0) Then
    App.MsgBox(GetMsg(75))
    Exit Sub
  End If
  End If
  '***************************************************
  'WLG05 END
  '***************************************************

  '
  App.SetValue("tmLOTN", Rsp)
  App.SetValue("tmPQOH", DB.Extract(sCols,sRows,1,1))

  ' check if serialized lot number was already scanned.
  If mbSerialized Then
    For iCnt = 1 To mnCnt
      vArray = Split(Ext(msValCache,1, iCnt),";")
      If Trim(vArray(5)) = Rsp Then
        App.MsgBox(GetMsg(251))
        Exit Sub
      End If
    Next iCnt
  ' Default Qty to 1 if item is serialized
    txtQTY.Text = "1"
    txtQTY.DisplayOnly = True
  Else
    txtQTY.Text = ""
    txtQTY.DisplayOnly = False
  End If
  '
  Cancel=False

End Sub

Private Sub txtLOTN_OnSearch(ByRef Rsp As String, ByRef Cancel As Boolean)
  On Error Resume Next
  '
  Dim sMCU  As String
  Dim sITM  As String
  Dim sLocn As String
  Dim bAvail As Boolean
  '
  ' Allow search only when not hardcommited in SO
  If cForceLOTN And (Len(msHardLOTN)>0) Then
    App.MsgBox GetMsg(123)
    Exit Sub
  End If
  '
  sMCU  = App.GetValue("tmMCU")
  sITM  = App.GetValue("tmITM")
  sLocn = App.GetValue("tmLOCN")
  '
  bAvail = GetProcOpt(msPgm,msVersion,"4;1") = "1"
  Cancel = Not Search_F41021_LOTN(Rsp, "", sMCU, sITM, sLocn, bAvail)
End Sub

Private Sub txtLOCN_OnBackup(ByRef Cancel As Boolean)
  On Error Resume Next
  '
  App.SetValue("tmLOCN", "")

End Sub

Private Sub txtLOCN_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next
  '
  Dim sMCU  As String
  Dim sLocn As String
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  '
  If (Len(Rsp)=0) Then Exit Sub

  Cancel = True
  '
  sMCU = App.GetValue("tmMCU")

  If mbIsLP Then
    Rsp = Trim(App.GetValue("tmLOCN"))
  End If


    If Not Validate_Locn(Rsp, sMCU, sLocn) Then Exit Sub
    '
    ' Validate if hardcommited in SO
    If cForceLOCN And (Len(msHardLOCN)>0) Then
      If (Rsp <> msHardLOCN) Then
        App.MsgBox(GetMsg(114))
        Exit Sub
      End If
    End If
    '
    '****************************************
    'WLG05 START - MOVED THIS LOGIC TO Qty_OnEnter for non-LP picks
    '****************************************
    ' Validate F41021 MCU/LOCN/ITM
    If mbIsLP Then
    sSql = "select LIPQOH from  F41021" & _
           " where LILOCN = '" & sLocn & "' and LIMCU = '%tmMCU' and LIITM = " & App.GetValue("tmITM")
    '

    DB.Execute(sSql, sCols, sRows)

    If (Len(sRows) = 0) Then
      App.MsgBox(GetMsg(74))
      Exit Sub
    End If
    End If
    '****************************************
    'WLG05 End
    '****************************************

  '
  App.SetValue("tmLOCN", sLocn)
  App.SetValue("tmDspLOCN", Rsp)
  '
  Cancel = False

End Sub

Private Sub txtLOCN_OnSearch(ByRef Rsp As String, ByRef Cancel As Boolean)
  On Error Resume Next
  '
  Dim sMCU As String
  Dim sITM As String
  Dim sLotn As String
  Dim bAvail As Boolean
  '
  ' Allow search only when not hardcommited in SO
  If cForceLOCN And (Len(msHardLOCN)>0) Then
    App.MsgBox GetMsg(115)
    Exit Sub
  End If
  '
  sMCU = App.GetValue("tmMCU")
  sITM = App.GetValue("tmITM")
  sLotn = App.GetValue("tmLOTN")
  '
  bAvail = GetProcOpt(msPgm,msVersion,"4;1") = "1"
  Cancel = Not Search_F41021_LOCN(Rsp, "", sMCU, sITM, sLotn, bAvail)
End Sub

Private Sub txtQTY_Click()
  On Error Resume Next

End Sub

Private Sub txtQTY_OnBackup(ByRef Cancel As Boolean)
  On Error Resume Next
  '
  App.SetValue("tmQTY", "")

End Sub

Private Sub txtQTY_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next
  '
  Dim nQty    As Currency
  Dim nOnHand As Currency
  Dim nAvail  As Currency
  Dim nUsed   As Currency
  Dim sHold   As String
  Dim sSql    As String
  Dim sCols   As String
  Dim sRows   As String
  Dim sMCU    As String
  Dim vRsp    As Variant
  Dim iCnt    As Integer
  Dim nQtyRemain As Long
  Dim nCurrentSOQS As Long
  Dim nNewSOQS As Long
  Dim sSQL2 As String
  Dim sCols2 As String
  Dim sRows2 As String
  Dim x As Integer
  Dim sSqlItem As String
  Dim sColsItem As String
  Dim sRowsItem As String
  Dim sPrimaryUOM As String
  Dim nAddToTotalPick As Long
  Dim nLNID    As Currency
  Dim nSOBK    As Currency
  Dim nSOCN    As Currency
  Dim sLot     As String
  Dim sLocn    As String
  Dim sCOMM    As String
  Dim sITM     As String
  Dim sLITM    As String
  Dim sAITM    As String
  Dim sDesc    As String
  Dim sDSC1    As String
  Dim sUOM     As String
  Dim nType    As Long
  Dim vArray   As Variant
  Dim sSqlVerifyUOM As String
  Dim sColsVerifyUOM As String
  Dim sRowsVerifyUOM As String
  Dim sVerifyPrimaryUOM As String

  Dim nToPick As Long
  Dim z As Long

  '
  If (Len(Rsp)=0) Then Exit Sub
  Cancel=True
  '
  ' Numeric?
  If Not IsNumeric(Rsp) Then
    App.MsgBox GetMsg(181)
    Exit Sub
  End If
  '
  ' Serialized Item?
  nQty = Val(Rsp)

  If (mbSerialized And nQty <> 1) Then
    App.MsgBox(GetMsg(177))
    Exit Sub
  End If
  '
  ' Not Zero
  nQty = Val(Rsp)

'WLG02 START
 If (nQty <= 0) Then
 '   App.MsgBox GetMsg(180)
 '   Exit Sub
 End If
 'WLG02 END

'*****************************************************************
'WLG05 START - MOVED THIS LOGIC TO Qty_OnEnter for non-LP picks
'*****************************************************************
 If Not mbIsLP And (nQty > 0) Then

    ' Validate F41021 MCU/LOCN/ITM
    sSql = "select LIPQOH from  F41021" & _
           " where LILOCN = '" & App.GetValue("tmLOCN") & "' and LIMCU = '%tmMCU' and LIITM = " & App.GetValue("tmITM")
    '
    DB.Execute(sSql, sCols, sRows)

    If (Len(sRows) = 0) Then
      'error, clear all prompts after LOCN, set focus to LOCN'
      App.MsgBox(GetMsg(74))
      txtLOCN.List.Clear
      txtLOTN.List.Clear
      txtQTY.List.Clear
      App.SetValue("tmLOCN","")
      App.SetValue("tmLOTN","")
      App.SetFocus("txtLOCN")
      Exit Sub
    End If

  ' Validate F4801 LOT MASTER

    If mbHasLots Then

      sSql = "select count(*) from  F4108" & _
           " where IOLOTN = '" & App.GetValue("tmLOTN") & "' and IOLITM = '%tmLITM' and IOMCU = '%tmMCU'"

      DB.Execute(sSql, sCols, sRows)

      If (Val(sRows) = 0) Then
        App.MsgBox(GetMsg(78))
          txtLOTN.List.Clear
          txtQTY.List.Clear
          App.SetValue("tmLOTN","")
          App.SetFocus("txtLOTN")
        Exit Sub
      End If
    '
    ' Validate F41021 MCU/LOCN/ITM/LOTN
      sSql = "select LIPQOH, LIHCOM from  F41021" & _
           " where LILOCN = '" & App.GetValue("tmLOCN") & "' and LIMCU = '" & App.GetValue("tmMCU") & "' and LIITM = " & App.GetValue("tmITM") & " and LILOTN = '" & App.GetValue("tmLOTN") & "'"
    '
      DB.Execute(sSql, sCols, sRows)

      If (Len(sRows) = 0) Then
        App.MsgBox(GetMsg(75))
          txtLOTN.List.Clear
          txtQTY.List.Clear
          App.SetValue("tmLOTN","")
          App.SetFocus("txtLOTN")
        Exit Sub
      End If

  'availability check to resolve inventory going negative if the DC hasn't ship confirmed the previous order.
    If nQty > (ConvDecimalsFromSQL("PQOH",DB.Extract(sCols,sRows,1,1)) - ConvDecimalsFromSQL("HCOM",DB.Extract(sCols,sRows,1,2))) Then
      App.MsgBox(GetMsg(35))
      Exit Sub
    End If

    End If '(If mbHasLots)


 End If
'****************************************
'WLG05 End
'****************************************
  '
  ' Exceeds Order Qty?
'  If GetProcOpt(msPgm,msVersion,"4;3") = "1" Then
    If (nQty > mnTotalPick) Then
      App.MsgBox(GetMsg(36))
      Exit Sub
    End If
'  End If
  If gbPOError Then
    App.ExitForm
    Exit Sub
  End If

  sMCU = App.GetValue("tmMCU")

  '***************************************************************
  'WLG05 START - SKIP GetItemQty if nQty<1
  '***************************************************************
  If (nQty >= 0) Then
    GetItemQty(sMCU,App.GetValue("tmITM"),App.GetValue("tmLOTN"),App.GetValue("tmLOCN"),"1",nOnHand,nAvail,sHold)


  Else
    nOnHand = 0
    nAvail = 0
  End If

  '


  '***********************************************
  'WLG05 END
  '***********************************************

  ' reduce what's already scanned
  nUsed = 0

  For iCnt = 1 To mnCnt
    If Ext(msValCache,02, iCnt) = App.GetValue("tmLITM") And Ext(msValCache,04, iCnt) = App.GetValue("tmDspLOCN") And Ext(msValCache,07, iCnt) = App.GetValue("tmLOTN") Then
      nUsed = nUsed + CCur(Ext(msValCache,16, iCnt))
    End If
  Next iCnt

  nOnHand = nOnHand - nUsed
  nAvail  = nAvail  - nUsed
  '
  ' Exceeds QOH?
  If GetProcOpt(msPgm,msVersion,"4;2") = "1" Then
    If (nQty > nOnHand)  Then
      App.MsgBox(GetMsg(35))
      Exit Sub
    End If
  End If

  If gbPOError Then
    App.ExitForm
    Exit Sub
  End If
  '
  ' Exceeds Avail?
  If GetProcOpt(msPgm,msVersion,"4;1") = "1" Then
    If App.GetValue("SelCOMM") <> "C" And  App.GetValue("SelCOMM") <> "H" Then  'hardcommitted before, so ignore (SDCOMM)
      If (nQty > nAvail)  Then
        App.MsgBox(GetMsg(37))
        Exit Sub
      End If
    End If
  End If

  If gbPOError Then
    App.ExitForm
    Exit Sub
  End If
  '
'  ' Splitlines allowed when remaining rest?
'  If nQty < mnMaxQty  Then
'    If GetProcOpt(msPgm,msVersion,"5;3") = "1" Then
'        vRsp = App.MsgBox(GetMsg(191), vbYesNo, vbNo)
'        If vRsp = vbNo Then Exit Sub
'    End If
'    If gbPOError Then
'      App.ExitForm
'      Exit Sub
'    End If
'  End If

  If mbIsLP Then
    If nQty > App.GetValue("tmQtyAvail") Then
      App.MsgBox("Insufficient Quantity on LP")
      Cancel = True
      Exit Sub
    End If
  End If

  '************************************************
  'WLG05 START - need to process negative qty first (exchange situation)
  '************************************************
  'If (nQty >= mnMaxQty And nQty <= mnTotalPick) Then
  If ((nQty >= mnMaxQty And nQty <= mnTotalPick) Or (nQty < 0)) Then
  '************************************************
  'WLG05 END
  '************************************************
    ' Go get more lines to put quantity on and loop until the whole qty is added to the pick
    App.SetValue("tmQTY", mnMaxQty)

    nQtyRemain = nQty - mnMaxQty
    'Accumulate the Values and loop until F2
    Call CumValues()
    'Execute the Transaction
    Call ExecuteTM(False)

    While nQtyRemain > 0
      ' Get First SO Line
      sSqlVerifyUOM = "select IMUOM1 from F4101 where IMLITM = '" & App.GetValue("tmLITM") & "'"
      DB.Execute(sSqlVerifyUOM,sColsVerifyUOM,sRowsVerifyUOM)
      sVerifyPrimaryUOM = Trim(DB.Extract(sColsVerifyUOM, sRowsVerifyUOM, 1, "IMUOM1"))

      sSql = "select * from  F4211 left join F41002 on SDITM = UMITM" & _
             " where (SDUOM = UMUM and UMRUM = '" & sVerifyPrimaryUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & App.GetValue("tmLITM") & "' and SDSOQS <> 0 " & _
             " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
      DB.Execute(sSql,sCols,sRows)

      If (DB.Count(sRows) = 0) Then
        sSql = "select * from  F4211" & _
               " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & App.GetValue("tmLITM") & "' and SDSOQS <> 0 " & _
               " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
        '
        DB.Execute(sSql,sCols,sRows)
      End If
      '

      App.SetValue("tmFirstDOCO", Trim(DB.Extract(sCols, sRows, 1, "SDDOCO")))
      App.SetValue("tmFirstDCTO", Trim(DB.Extract(sCols, sRows, 1, "SDDCTO")))

      'WLG03 START
      App.SetValue("tmDCTO", DB.Extract(sCols, sRows, 1, "SDDCTO"))
      'WLG03 END

      If (Len(sRows) = 0) Then
        App.MsgBox(GetMsg(101))
        Exit Sub
      End If

      ' Get Total Pick Quantity
      sSQL2 = "select * from  F4211 left join F41002 on SDITM = UMITM" & _
             " where (SDUOM = UMUM and UMRUM = '" & sVerifyPrimaryUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & App.GetValue("tmLITM") & "' and SDSOQS <> 0 " & _
             " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
      DB.Execute(sSQL2,sCols2,sRows2)

      mnTotalPick = 0
      For x = 1 To DB.Count(sRows2)
        sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
        DB.Execute(sSqlItem,sColsItem,sRowsItem)
        sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

        If (sPrimaryUOM <> Trim(DB.Extract(sCols,sRows,x,"SDUOM"))) Then

          sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
          DB.Execute(sSqlItem,sColsItem,sRowsItem)
          nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
        Else
          nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
        End If
        mnTotalPick = nAddToTotalPick + mnTotalPick
      Next

      sSQL2 = "select * from  F4211" & _
             " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & App.GetValue("tmLITM") & "' and SDSOQS <> 0  and SDUOM = '" & sVerifyPrimaryUOM & "'" & _
             " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
      '
      DB.Execute(sSQL2,sCols2,sRows2)

      For x = 1 To DB.Count(sRows2)
        sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
        DB.Execute(sSqlItem,sColsItem,sRowsItem)
        sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

        If (sPrimaryUOM <> Trim(DB.Extract(sCols,sRows,x,"SDUOM"))) Then

'          If (sPrimaryUOM <> Trim(DB.Extract(sColsSO,sRowsSO,1,"SDUOM"))) Then
'
'            sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sColsSO, sRowsSO, 1, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sColsSO, sRowsSO, 1, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
'            DB.Execute(sSqlItem,sColsItem,sRowsItem)
'            nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sColsSO,sRowsSO,1,"SDSOQS"))
'          Else
'            nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sColsSO,sRowsSO,1,"SDSOQS"))
'          End If

          sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
          DB.Execute(sSqlItem,sColsItem,sRowsItem)
          nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
        Else
          nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
        End If
        mnTotalPick = nAddToTotalPick + mnTotalPick
      Next

      '
      sDesc    = DB.Extract(sCols, sRows, 1, "SDDSC1")
      sLot     = DB.Extract(sCols, sRows, 1, "SDLOTN")
      sLocn    = DB.Extract(sCols, sRows, 1, "SDLOCN")
      sCOMM    = DB.Extract(sCols, sRows, 1, "SDCOMM")
      nSOBK    = ConvDecimalsFromSQL("SOBK", DB.Extract(sCols,sRows,1,"SDSOBK"))
      nSOCN    = ConvDecimalsFromSQL("SOCN", DB.Extract(sCols,sRows,1,"SDSOCN"))
      nLNID    = ConvDecimalsFromSQL("LNID", DB.Extract(sCols,sRows,1,"SDLNID"))

      For x = 1 To 1
        sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols, sRows, x, "SDLITM")) & "'"
        DB.Execute(sSqlItem,sColsItem,sRowsItem)
        sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))

        If (sPrimaryUOM <> Trim(DB.Extract(sCols,sRows,1,"SDUOM"))) Then

          sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols, sRows, 1, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols, sRows, 1, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
          DB.Execute(sSqlItem,sColsItem,sRowsItem)
          nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols,sRows,1,"SDSOQS"))
        Else
          nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols,sRows,1,"SDSOQS"))
        End If
        mnMaxQty = nAddToTotalPick
      Next
'      mnMaxQty = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols,sRows,1,"SDSOQS"))
      '
'      lblItemDesc.Caption = sDesc
      App.SetValue("tmLNID",    nLNID)
      App.SetValue("tmPrimaryUOM",     sPrimaryUOM)
      App.SetValue("tmUOM",     Trim(DB.Extract(sCols, sRows, 1, "SDUOM")))
      App.SetValue("tmITM",     DB.Extract(sCols, sRows, 1, "SDITM"))
      App.SetValue("tmLNTY",    DB.Extract(sCols, sRows, 1, "SDLNTY"))
      App.SetValue("tmShipTo",  DB.Extract(sCols, sRows, 1, "SDSHAN"))
      App.SetValue("tmCarrier", DB.Extract(sCols, sRows, 1, "SDCARS"))
      App.SetValue("tmCO",      DB.Extract(sCols, sRows, 1, "SDKCOO"))  ' INS RBR 01/08/2007
      App.SetValue("tmSOBK",    nSOBK)
      App.SetValue("tmSOCN",    nSOCN)
      App.SetValue("SelCOMM",   sCOMM)
      App.SetValue("tmCOMM",    sCOMM)
      App.SetValue("tmSOQS",    mnMaxQty)
      '
      ' Reduce from label what's already picked
      For iCnt = 1 To mnCnt
        vArray = Split(Ext(msValCache,1, iCnt),";")

        ' WLG03 START '
        'If vArray(2) = Trim(App.GetValue("tmDOCO")) And vArray(3) = Trim(App.GetValue("tmDCTO")) And vArray(4) = Trim(App.GetValue("tmLNID")) Then
        If vArray(2) = Trim(App.GetValue("tmFirstDOCO")) And vArray(3) = Trim(App.GetValue("tmFirstDCTO")) And vArray(4) = Trim(App.GetValue("tmLNID")) Then
        ' WLG03 END '

          mnMaxQty = mnMaxQty - Val(Ext(msValCache, 16, iCnt))
          mnTotalPick = mnTotalPick - Val(Ext(msValCache, 16, iCnt))
        End If
      Next iCnt

      '
'      lblItemDesc.Caption = sDesc
      '
      lblSOQty.Caption = "Open Qty:" & mnTotalPick & " " & App.GetValue("tmPrimaryUOM")


      'mnMaxQty = the SOQS on the new SO line for the pick List.Data
      If (nQtyRemain > mnMaxQty) Then
        App.SetValue("tmQTY", mnMaxQty)
        nQtyRemain = nQtyRemain - mnMaxQty
        Call CumValues()
        Call ExecuteTM(False)
      Else
        App.SetValue("tmQTY", nQtyRemain)
        nQtyRemain = 0
        Call CumValues()
        If mnMaxQty = 0 Then
          Call ExecuteTM(False)
        End If
      End If
    Wend
  Else
    App.SetValue("tmQTY", Rsp)

    'Accumulate the Values and loop until F2
    Call CumValues()
    '
  End If

'  'Recalculate the remaining quantity if it is a consolidated pick due to errors discovered in the calculation.
'  If mbPickList Then
'    ' Get Total Pick Quantity
'      sSQL2 = "select * from  F4211 left join F41002 on SDITM = UMITM" & _
'             " where (SDUOM = UMUM and UMRUM = '" & sVerifyPrimaryUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & App.GetValue("tmLITM") & "' and SDSOQS <> 0 " & _
'             " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
'      DB.Execute(sSQL2,sCols2,sRows2)
'
'      nToPick = 0
'      For x = 1 To DB.Count(sRows2)
'        sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
'        DB.Execute(sSqlItem,sColsItem,sRowsItem)
'        sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))
'
'        If (sPrimaryUOM <> Trim(DB.Extract(sCols,sRows,x,"SDUOM"))) Then
'
'          sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
'          DB.Execute(sSqlItem,sColsItem,sRowsItem)
'          nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
'        Else
'          nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
'        End If
'        nToPick = nAddToTotalPick + nToPick
'
'      Next
'
'      sSQL2 = "select * from  F4211" & _
'             " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & App.GetValue("tmLITM") & "' and SDSOQS <> 0  and SDUOM = '" & sVerifyPrimaryUOM & "'" & _
'             " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
'      '
'      DB.Execute(sSQL2,sCols2,sRows2)
'
'      For x = 1 To DB.Count(sRows2)
'        sSqlItem = "select IMUOM1 from F4101 where IMLITM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDLITM")) & "'"
'        DB.Execute(sSqlItem,sColsItem,sRowsItem)
'        sPrimaryUOM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMUOM1"))
'
'        If (sPrimaryUOM <> Trim(DB.Extract(sCols,sRows,x,"SDUOM"))) Then
'
'          sSqlItem = "select UMCONV/10000000 as Qty from F41002 where UMITM = " & DB.Extract(sCols2, sRows2, x, "SDITM") & " and UMUM = '" & Trim(DB.Extract(sCols2, sRows2, x, "SDUOM")) & "' and UMRUM = '" & sPrimaryUOM & "'"
'          DB.Execute(sSqlItem,sColsItem,sRowsItem)
'          nAddToTotalPick = Val(DB.Extract(sColsItem,sRowsItem,1,"Qty")) * ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
'        Else
'          nAddToTotalPick = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols2,sRows2,x,"SDSOQS"))
'        End If
'        nToPick = nAddToTotalPick + nToPick
'      Next
'
'' Reduce from label what's already picked
'
'      sSQL2 = "select distinct SDDOCO, SDDCTO, SDLNID from  F4211 left join F41002 on SDITM = UMITM" & _
'             " where (SDUOM = UMUM and UMRUM = '" & sVerifyPrimaryUOM & "') and ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & App.GetValue("tmLITM") & "' and SDSOQS <> 0 " & _
'             " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU' order by UMCONV DESC"
'      DB.Execute(sSQL2,sCols2,sRows2)
'
'      For z = 1 To DB.Count(sRows2)
'        For iCnt = 1 To mnCnt
'          vArray = Split(Ext(msValCache,1, iCnt),";")
'
'          If vArray(2) = Trim(DB.Extract(sCols2,sRows2,z,"SDDOCO")) And vArray(3) = Trim(DB.Extract(sCols2,sRows2,z,"SDDCTO")) And vArray(4) = ConvDecimalsFromSQL("LNID", DB.Extract(sCols2,sRows2,z,"SDLNID")) Then
'            nToPick = nToPick - Val(Ext(msValCache, 16, iCnt))
'          End If
'        Next iCnt
'      Next z
'
'      sSQL2 = "select * from  F4211" & _
'             " where ( SDDOCO = %tmDOCO or SDURAB = %tmDOCO ) and SDLITM = '" & App.GetValue("tmLITM") & "' and SDSOQS <> 0  and SDUOM = '" & sVerifyPrimaryUOM & "'" & _
'             " and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' and SDMCU = '%tmMCU'"
'      '
'      DB.Execute(sSQL2,sCols2,sRows2)
'
'      For z = 1 To DB.Count(sRows2)
'        For iCnt = 1 To mnCnt
'          vArray = Split(Ext(msValCache,1, iCnt),";")
'
'          If vArray(2) = Trim(DB.Extract(sCols2,sRows2,z,"SDDOCO")) And vArray(3) = Trim(DB.Extract(sCols2,sRows2,z,"SDDCTO")) And vArray(4) = ConvDecimalsFromSQL("LNID", DB.Extract(sCols2,sRows2,z,"SDLNID")) Then
'            nToPick = nToPick - Val(Ext(msValCache, 16, iCnt))
'          End If
'        Next iCnt
'      Next z
'
'      lblSOQty.Caption = "Open Qty:" & nToPick & " " & App.GetValue("tmPrimaryUOM")
'
'  End If

    lblFKey.Visible = True

    txtLITM.List.Clear
    txtLOCN.List.Clear
    txtLOTN.List.Clear
    txtQTY.List.Clear
    txtLOCN.Visible = False
    txtLOCN.DisplayOnly = False
    txtLOTN.Visible = False
    txtLOTN.DisplayOnly = False
    txtQTY.Visible = False
    Screen.Clear
    Screen.Refresh

    App.SetFocus("txtLITM")
  '
  Cancel=False

  Screen.Bell(2)

End Sub

Private Sub txtAccept_GotFocus(ByRef Rsp As String, ByRef AllowChange As Boolean)
  On Error Resume Next
  '
  If mbAddFr Then lblFKey.Visible = False
  txtAccept.Visible = True

End Sub

Private Sub txtAccept_LostFocus()
  On Error Resume Next
  '
  If mbAddFr Then lblFKey.Visible = True
  txtAccept.Visible = False

End Sub

Public Sub CumValues()
  On Error Resume Next
  '
  Dim iFnd  As Integer
  Dim sKey  As String
  Dim nQty  As Currency
  Dim sLotn As String
  Dim sLocn As String
  Dim uLP101 As LP101Data       ' create LP101 Structure
  Dim uLP102 As LP102Data       ' create LP101 Structure

  Dim sSqlItem As String
  Dim sColsItem As String
  Dim sRowsItem As String

  Dim sRevertQty As String
  Dim sRevertMaxQty As String

  Dim sLongQty As String
  Dim sLongMaxQty As String

  Dim nConvQty As Currency
  Dim nConvMaxQty As Currency

  Call LP101_Reset(uLP101)      ' init LP101 Structure
  Call LP102_Reset(uLP102)      ' init LP102 Structure

  sLotn = Trim(App.GetValue("tmLOTN"))

  If Len(sLotn) = 0 Then sLotn = " "

  sLocn = App.GetValue("tmDspLOCN")

  If Len(sLocn) = 0 Then sLocn = " "

  'Convert tmQty to SO unit of measure.

  sRevertQty = Trim(App.GetValue("tmQty"))
  sRevertMaxQty = Trim(App.GetValue("tmSOQS"))
  nConvQty = CCur(App.GetValue("tmQty"))
  nConvMaxQty = CCur(App.GetValue("tmSOQS"))
  ConvUOMAMS(App.GetValue("tmITM"), nConvQty, Trim(App.GetValue("tmPrimaryUOM")), Trim(App.GetValue("tmUOM")))
  ConvUOMAMS(App.GetValue("tmITM"), nConvMaxQty, Trim(App.GetValue("tmPrimaryUOM")), Trim(App.GetValue("tmUOM")))
  If ( Trim(App.GetValue("tmPrimaryUOM")) <> Trim(App.GetValue("tmUOM")) ) Then
    sLongQty = CStr(nConvQty)

    sLongMaxQty = CStr(nConvMaxQty)

    App.SetValue("tmQty", nConvQty)
    App.SetValue("tmSOQS", nConvMaxQty)
  End If
  '
  '                  Company                    Plant                           Order Number                       Doctype                             Line Number        Lot Number     Location
  sKey = App.GetValue("tmCO") & ";" & App.GetValue("tmMCU") & ";" &Trim(App.GetValue("tmFirstDOCO")) & ";" & Trim(App.GetValue("tmFirstDCTO")) & ";" &  Trim(App.GetValue("tmLNID")) & ";" &  sLotn & ";" &  sLocn & ";"
  '
  iFnd = Locate(sKey, msValCache,1)
  '
  If (iFnd <> 0) Then     'add qty
    nQty = CCur(Ext(msValCache, 5, iFnd))
    nQty = nQty + CCur(App.GetValue("tmQty"))
    msValCache = Rep(msValCache, 5, iFnd, nQty)
    nQty = CCur(Ext(msValCache, 16, iFnd))
    nQty = nQty + CCur(sRevertQty)
    msValCache = Rep(msValCache, 16, iFnd, nQty) 'Qty in Eaches
  Else
    msValCache = Rep(msValCache, 01, -1, sKey)                      'unique key
    msValCache = Rep(msValCache, 02, -1, App.GetValue("tmLITM"))    'long Item Number
    msValCache = Rep(msValCache, 03, -1, App.GetValue("tmITM"))     'short Item Number
    msValCache = Rep(msValCache, 04, -1, sLocn)                     'Location
    msValCache = Rep(msValCache, 05, -1, App.GetValue("tmQty"))     'Picked Qty.
'    msValCache = Rep(msValCache, 06, -1, App.GetValue("tmPrimaryUOM"))     'Transaction UOM
    msValCache = Rep(msValCache, 06, -1, App.GetValue("tmUOM"))     'Transaction UOM
    msValCache = Rep(msValCache, 07, -1, sLotn)                     'Lot - / Serial number
    msValCache = Rep(msValCache, 08, -1, App.GetValue("tmCOMM"))    'Commitment Flag S/H
    msValCache = Rep(msValCache, 09, -1, App.GetValue("tmSOBK"))    'Backorder Qty.
    msValCache = Rep(msValCache, 10, -1, App.GetValue("tmSOCN"))    'Canceled Qty
    msValCache = Rep(msValCache, 11, -1, App.GetValue("tmSOQS"))    'Line Qty.
    msValCache = Rep(msValCache, 12, -1, App.GetValue("tmLNTY"))    'Line Type
    msValCache = Rep(msValCache, 13, -1, App.GetValue("tmLNID"))    'Line Number
    msValCache = Rep(msValCache, 14, -1, App.GetValue("tmShipTo"))  'Ship To
    msValCache = Rep(msValCache, 15, -1, App.GetValue("tmCarrier")) 'Carrier
    msValCache = Rep(msValCache, 16, -1, sRevertQty) 'Qty in Eaches
    mnCnt = mnCnt +1
    lblScanCnt.Caption = "Items scanned: " & mnCnt
  End If

  App.SetValue("tmQty", sRevertQty)
  App.SetValue("tmSOQS", sRevertMaxQty)

  If mbIsLP Then
    Call LP101_Reset(uLP101)
    uLP101.sLMLPID = Trim(App.GetValue("tmLPID"))
    X_LP101("I",uLP101)
    If uLP101.sLMTYPE = "L" Then
      GoTo SkipLPUpdate:
    End If
    uLP101.sLMRNXTR = "560"
    uLP101.sLMRDOCO = Trim(App.GetValue("tmDOCO"))
    uLP101.sLMRDCTO = Trim(App.GetValue("tmDCTO"))
    If Not X_LP101("C",uLP101) Then
      App.MsgBox("Error in LP Update - New LP Work Order and Status Could Not Be Committed - Contact IT Manager")
    End If
    Call LP101_Reset(uLP101)
    uLP101.sLMLPID = Trim(App.GetValue("tmLPID"))
    X_LP101("I",uLP101)
    uLP101.sLMRNXTR = ""
    uLP101.sLMRDOCO = ""
    uLP101.sLMRDCTO = ""
    If Not X_LP101("C",uLP101) Then
      App.MsgBox("Error in LP Update - New LP Work Order and Status Could Not Be Committed - Contact IT Manager")
    End If
    Call LP102_Reset(uLP102)
    uLP102.sLDLPID = Trim(App.GetValue("tmLPID"))
    X_LP102("I",uLP102)
    uLP102.sLDRNXTR = "560"
    uLP102.sLDRDOCO = Trim(App.GetValue("tmDOCO"))
    uLP102.sLDRDCTO = Trim(App.GetValue("tmDCTO"))
    uLP102.nLDSOQS = Val(App.GetValue("tmQty"))
    If Not X_LP102("C",uLP102) Then
      App.MsgBox("Error in LP Update - New LP Work Order and Status Could Not Be Committed - Contact IT Manager")
    End If
    Call LP102_Reset(uLP102)
    uLP102.sLDLPID = Trim(App.GetValue("tmLPID"))
    X_LP102("I",uLP102)
    uLP102.sLDRNXTR = ""
    uLP102.sLDRDOCO = ""
    uLP102.sLDRDCTO = ""
    uLP102.nLDUORG = uLP102.nLDUORG - uLP102.nLDSOQS
    uLP102.nLDSOQS = 0
    If Not X_LP102("C",uLP102) Then
      App.MsgBox("Error in LP Update - New LP Work Order and Status Could Not Be Committed - Contact IT Manager")
    End If
  End If
  SkipLPUpdate:
  mnMaxQty = mnMaxQty - App.GetValue("tmQty")
  mnTotalPick = mnTotalPick - App.GetValue("tmQty")

  lblSOQty.Caption = "Open SO Qty:" & CStr(mnTotalPick) & " " & App.GetValue("tmPrimaryUOM")
  txtQTY.Defaults = ""
  '
End Sub

Public Function ExecuteTM(ByVal bBackOrder As Boolean) As Boolean
  On Error Resume Next

  Dim nSOBK   As Currency
  Dim nSOCN   As Currency
  Dim iCnt    As Integer
  Dim iLblMax As Integer
  Dim iFnd    As Integer
  Dim vArray  As Variant
  Dim sKey    As String
  Dim nQty    As Currency
  Dim iRow    As Integer
  Dim emProc  As New EmbeddedProc

  Dim sSql As String
  Dim sCols As String
  Dim sRows As String

  Dim x As Integer

  ExecuteTM = False
  '
  iRow = txtAccept.Label.Top

  Screen.Print 0, iRow, "Processing...", False, True, True
  '
  ' Build listbox and sort
  BuildListBox
  '
  ' Build Datastructure from Listbox (List.Sorted by Line)
  msValCache = ""                 ' clear datastructure
  mnCnt      = 0                  ' reset counter

  iLblMax = lstScanned.List.Count                                           'max line

  If iLblMax = 0 Then
    App.MsgBox(GetMsg(138))
    Exit Function
  End If

  For iCnt = 1 To iLblMax
    lstScanned.List.Index = iCnt
    vArray = Split(lstScanned.Text,"|")
    '                  Company                    Plant                Order Number            Doctype            Line Number        Lot Number         Location
    sKey = App.GetValue("tmCO") & ";" & App.GetValue("tmMCU") & ";" & Trim(vArray(0)) & ";" & Trim(vArray(1)) & ";" &  vArray(2) & ";" &  vArray(8) & ";" &  vArray(5) & ";"
    iFnd = Locate(sKey, msValCache,1)
    If (iFnd <> 0) Then     'add qty RBR 03/07/2007
      nQty  = Val(Ext(msValCache, 06, iFnd))
      nQty = nQty + vArray(06)
      msValCache = Rep(msValCache, 06, iFnd, nQty)
    Else
      msValCache = Rep(msValCache, 01, -1, sKey)                    'unique key
      msValCache = Rep(msValCache, 02, -1, vArray(03))    'long Item Number
      msValCache = Rep(msValCache, 03, -1, vArray(04))    'short Item Number
      msValCache = Rep(msValCache, 04, -1, vArray(05))    'Location
      msValCache = Rep(msValCache, 05, -1, vArray(06))    'Picked Qty.
      msValCache = Rep(msValCache, 06, -1, vArray(07))    'Transaction UOM
      msValCache = Rep(msValCache, 07, -1, vArray(08))    'Lot - / Serial number
      msValCache = Rep(msValCache, 08, -1, vArray(09))    'Commitment Flag S/H
      msValCache = Rep(msValCache, 09, -1, vArray(10))    'Backorder Qty.
      msValCache = Rep(msValCache, 10, -1, vArray(11))    'Canceled Qty
      msValCache = Rep(msValCache, 11, -1, vArray(12))    'Line Qty.
      msValCache = Rep(msValCache, 12, -1, vArray(13))    'Line Type
      msValCache = Rep(msValCache, 13, -1, vArray(14))    'Line Number
      msValCache = Rep(msValCache, 14, -1, vArray(15))    'Ship To
      msValCache = Rep(msValCache, 15, -1, vArray(16))    'Carrier
      mnCnt = mnCnt +1
    End If
  Next iCnt

'  If mnCnt > 1 Then
    emProc.Clear
    emProc.Name                = "TSOSC0200"
    emProc.DataSource          = gsDataSource
    emProc.Param("tmCO")       = App.GetValue("tmCO")
    emProc.Param("tmMCU")      = App.GetValue("tmMCU")
    emProc.Param("tmDOCO")     = App.GetValue("tmFirstDOCO")
    emProc.Param("tmDCTO")     = App.GetValue("tmFirstDCTO")
    emProc.Param("tmValCache") = msValCache
    emProc.Param("tmCnt")      = mnCnt
    emProc.Param("tmUSER")     = App.User
    emProc.Param("tmPGM")      = msPgm
    If bBackOrder Then
       emProc.Param("tmVERSION")  = msBOVersion
    Else
       emProc.Param("tmVERSION")  = msVersion
    End If
'  Else
' End if

'  For x = 1 To mnCnt
'    Do While CCur(Ext(tmValCache,13, iCnt +1))  = nLNID
'      emProc.Name                = "TSOSC0100"
'      emProc.DataSource          = gsDataSource
'      emProc.Param("tmCO")       = App.GetValue("tmCO")
'      emProc.Param("tmMCU")      = App.GetValue("tmMCU")
'      emProc.Param("tmDOCO")     = App.GetValue("tmFirstDOCO")
'      emProc.Param("tmDCTO")     = App.GetValue("tmFirstDCTO")
'      emProc.Param("tmLITM")     = Trim(Ext(msValCache,02, x))
'      emProc.Param("tmLOTN")     = Trim(Ext(msValCache,07, x))
'      emProc.Param("tmLOCN")     = Trim(Ext(msValCache,04, x))
'      emProc.Param("tmQTY")      = CDbl(Ext(msValCache,05, x))
'      emProc.Param("tmQTYBO")    = CDbl(Ext(msValCache,09, x))
'      emProc.Param("tmQTYCA")    = CDbl(Ext(msValCache,10, x))
'      emProc.Param("tmUOM")      = Ext(msValCache,06, x)
'      emProc.Param("tmLNID")     = CDbl(Ext(msValCache,13, x))
'      emProc.Param("tmSHIPTO")   = CLng(Ext(msValCache,14, x))
'      emProc.Param("tmCARRIER")  = CLng(Ext(msValCache,15, x))
'      emProc.Param("tmLNTY")     = Trim(Ext(msValCache,12, x))
'      emProc.Param("tmUSER")     = App.User
'      emProc.Param("tmZVERSION") = msVersion
'      emProc.Param("tmPGM")      = msPgm
'      If bBackOrder Then
'         emProc.Param("tmZVERSION")  = msBOVersion
'      Else
'         emProc.Param("tmZVERSION")  = msVersion
'      End If
'    Next x

    If Ext(gsLog,1) = "1" Then Call TranLog(cTNId, "1", emProc.Name, "", emProc)

    If Not emProc.Execute Then
      App.MsgBox GetMsg(221) & vbCrLf & emProc.Param("tmERRTEXT")
      If Ext(gsLog,2) = "1" Then Call TranLog(cTNId, "2", emProc.Name, "", emProc)
      App.SetFocus(1)
      Exit Function
    End If

  sSql = "Select SDLITM, sum(SDSOQS) as SDSOQS, SDUOM from  F4211 " & _
       " where SDMCU = '" & App.GetValue("tmMCU") & "' and ( SDDOCO = " & App.GetValue("tmDOCO") & " or SDURAB = " & App.GetValue("tmDOCO") & ") " & _
       " and SDSOQS <> 0 and SDNXTR between '" & msStatusF & "' and '" & msStatusT & "' group by SDLITM, SDUOM order by SDLITM"
  DB.Execute(sSql, sCols, sRows)
  lblItemDesc.Caption = "Open SO Lines: " & DB.Count(sRows)

  '***************************************
  'WLG01 start
  '***************************************
  If DB.Count(sRows) = 0 Then
      Screen.Clear
      msValCache = ""
      mnCnt = 0
      lblScanCnt.Caption = ""
      lblSOQty.Caption   = ""
      lblItemDesc.Caption = ""
      lblLPID = ""
      lblFKey.Visible = True
      txtLITM.List.Clear
      txtLOCN.List.Clear
      txtLOTN.List.Clear
      txtQTY.List.Clear
      txtDOCO.List.Clear
      txtDCTO.List.Clear
      txtLITM.Visible = False
      txtLOCN.Visible = False
      txtLOCN.DisplayOnly = False
      txtLOTN.Visible = False
      txtLOTN.DisplayOnly = False
      txtQTY.Visible = False
      App.SetFocus("txtDOCO")             ' start over with Doco
  Else
'
    txtQTY.Defaults = ""
    lblSOQty.Caption = ""
    'lblItemDesc.Caption = ""
    lblLPID.Caption = ""
    txtLOCN.Visible = False
    txtLOCN.DisplayOnly = False

    txtLOTN.Required = False
    txtLOTN.Visible = False
    txtLOTN.DisplayOnly = False
    lblScanCnt.Caption = ""
    '

    mnMaxQty      = 0
    mnMaxQoH      = 0
    msHardLOTN    = ""
    msHardLOCN    = ""
    mbHasLots     = False
    mbSerialized  = False
    gsValP4205    = ""   'clear
    msValCache    = ""   'clear
    mnCnt = 0

    Screen.Clear
    Screen.Refresh

  End If
'****************************************
'WLG End
'****************************************

  Screen.Bell(1)

  ExecuteTM = True

End Function

Public Sub BuildListBox
  On Error Resume Next
  '
  Dim sDsp    As String
  Dim iCnt    As Integer
  Dim vArray  As Variant

  lstScanned.List.Clear

  For iCnt = 1 To mnCnt
    vArray = Split(Ext(msValCache,1, iCnt),";")
    If iCnt = 1 Then
      lstScanned.Caption = "Scanned Items for Company: " & CStr(vArray(0)) & " , Plant: " & vArray(1)
    End If
    sDsp =        FixRight(vArray(02),8," ")                      & "|"
    sDsp = sDsp & FixLeft(vArray(03),2," ")                       & "|"
    sDsp = sDsp & FixRight(Format(vArray(04), "##0.000"),7," ")   & "|"
    sDsp = sDsp & FixLeft(Ext(msValCache,02,  iCnt),giLenItem," ") & "|"
    sDsp = sDsp & FixRight(Ext(msValCache,03, iCnt),10," ")       & "|"
    sDsp = sDsp & FixLeft(Ext(msValCache,04,  iCnt),giLenLOCN," ") & "|"
    sDsp = sDsp & FixRight(Ext(msValCache,05, iCnt),20," ")       & "|"
    sDsp = sDsp & FixLeft(Ext(msValCache,06,  iCnt),03," ")       & "|"
    sDsp = sDsp & FixLeft(Ext(msValCache,07,  iCnt),giLenLOTN," ") & "|"
    sDsp = sDsp & FixLeft(Ext(msValCache,08,  iCnt),01," ")       & "|"
    sDsp = sDsp & FixRight(Ext(msValCache,09, iCnt),10," ")       & "|"
    sDsp = sDsp & FixRight(Ext(msValCache,10, iCnt),10," ")       & "|"
    sDsp = sDsp & FixRight(Ext(msValCache,11, iCnt),20," ")       & "|"
    sDsp = sDsp & FixLeft(Ext(msValCache,12,  iCnt),01," ")       & "|"
    sDsp = sDsp & FixRight(Ext(msValCache,13, iCnt),07," ")       & "|"
    sDsp = sDsp & FixRight(Ext(msValCache,14, iCnt),08," ")       & "|"
    sDsp = sDsp & FixRight(Ext(msValCache,15, iCnt),08," ")       & "|"
    lstScanned.List.AddItem sDsp, sDsp
  Next iCnt
    '
  ' sort listbox to make sure all SO lines are in sequence
  lstScanned.List.Sorted = True

End Sub
</Code>
