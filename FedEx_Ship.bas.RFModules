<Record FileDesc="FedEx Shipping API" FileVersion="5.0.8.0" Desc="FedEx Shipping API" Group="FedEx" />
<Code>
Option Explicit
'#Language "WWB-COM"

Public Function FedEx_CreateShipment( _
  ByVal nAN8 As Long, _
  ByVal nSHAN As Long, _
  ByVal nWeight As Currency, _
  ByVal sAccount As String _
) As ShipmentResponse
  Dim fromAddress As AddressInfo
  Dim toAddress As AddressInfo
  Dim sBody As String
  Dim sToken As String
  Dim bSuccess As Boolean
  Dim sErrMsg As String
  Dim sResponseStatus As String
  Dim sResponseText As String
  Dim oResponseJson As Scripting.Dictionary
  Dim jsonParser As New VbsJson
  Dim tShipmentResponse As ShipmentResponse

  ' Generate bearer token for request
  App.Balloon("Authorizing...", 1)

  If Not FedEx_GetToken(sToken, sErrMsg) Then
    tShipmentResponse.sErrMsg = sErrMsg
    Return tShipmentResponse
  End If

  App.Balloon("Sending shipping request...", -1)

  fromAddress = GetAddressInfo(nAN8)
  toAddress = GetAddressInfo(nSHAN)
  sBody = FedEx_CreateShipmentRequestJson(fromAddress, toAddress, nWeight, sAccount)
  bSuccess = FedEx_SendShippingRequest(sToken, sBody, sResponseStatus, sResponseText)

  App.Balloon("", 0)

  Set oResponseJson = jsonParser.Decode(sResponseText)

  If Not bSuccess Then
    If Not FedEx_ParseResponseError(oResponseJson, tShipmentResponse.sErrMsg) Then
      tShipmentResponse.sErrMsg = "HTTP error " & sResponseStatus
    End If
    Return tShipmentResponse
  End If

  tShipmentResponse = FedEx_ParseShipmentResponse(oResponseJson)
  If tShipmentResponse.sErrMsg <> "" Then
    tShipmentResponse.sErrMsg = "Unable to process shipment response: " & vbNewLine & vbNewLine & tShipmentResponse.sErrMsg
    Return tShipmentResponse
  End If

  Return tShipmentResponse
End Function

Private Function FedEx_SendShippingRequest( _
  ByVal sToken As String, _
  ByVal sRequestBody As String, _
  sResponseStatus As String, _
  sResponseText As String _
) As Boolean
  Dim oHttp As New XMLHTTP60

  oHttp.open("POST", FEDEX_BASE_URL & "/ship/v1/shipments")
  oHttp.setRequestHeader("Authorization", "Bearer " & sToken)
  oHttp.setRequestHeader("Content-Type", "application/json")
  oHttp.setRequestHeader("Accept", "application/json")
  oHttp.Send(sRequestBody)

  sResponseStatus = CStr(oHttp.status)
  sResponseText = oHttp.responseText

  Return oHttp.status = 200
End Function

Private Function FedEx_ParseShipmentResponse(ByVal oResponse As Scripting.Dictionary) As ShipmentResponse
  Dim oShipmentResults As New Scripting.Dictionary
  Dim tShipmentResponse As ShipmentResponse
  Dim sEncodedLabel As String

  If Not oResponse.Exists("output") Then
    tShipmentResponse.sErrMsg = "Missing response element: 'output'"
    Return tShipmentResponse
  End If

  Set oShipmentResults = oResponse("output")("transactionShipments")(0)

  tShipmentResponse.sTrackingNumber = oShipmentResults("masterTrackingNumber")
  tShipmentResponse.nCost = CCur(oShipmentResults("completedShipmentDetail")("shipmentRating")("shipmentRateDetails")(0)("totalNetCharge"))
  tShipmentResponse.sLabelImageBytes = DecodeBase64(oShipmentResults("pieceResponses")(0)("packageDocuments")(0)("encodedLabel"))

  Return tShipmentResponse
End Function

Private Function FedEx_CreateShipmentRequestJson( _
  ByVal fromAddress As AddressInfo, _
  ByVal toAddress As AddressInfo, _
  ByVal nWeight As Currency, _
  ByVal sAccount As String _
) As String
  Dim oDoc As New Scripting.Dictionary
  Dim vbsJson As New vbsJson

  oDoc.Add("labelResponseOptions", "LABEL")

  Dim oRequestedShipment As New Scripting.Dictionary
  Dim oShipper As New Scripting.Dictionary
  Dim oShipperContact As New Scripting.Dictionary
  oShipperContact.Add("companyName", fromAddress.sName)
  oShipperContact.Add("phoneNumber", fromAddress.sPhone)
  oShipper.Add("contact", oShipperContact)

  Dim oShipperAddress As New Scripting.Dictionary
  Dim aFromStreetLines(0 To 2) As String
  aFromStreetLines(0) = fromAddress.sLine1
  aFromStreetLines(1) = fromAddress.sLine2
  aFromStreetLines(2) = fromAddress.sLine3
  oShipperAddress.Add("streetLines", aFromStreetLines)
  oShipperAddress.Add("city", fromAddress.sCity)
  oShipperAddress.Add("stateOrProvinceCode", fromAddress.sState)
  oShipperAddress.Add("postalCode", fromAddress.sZip)
  oShipperAddress.Add("countryCode", "US")
  oShipper.Add("address", oShipperAddress)
  oRequestedShipment.Add("shipper", oShipper)

  Dim aRecipients (0 To 0) As Scripting.Dictionary
  Dim oRecipient As New Scripting.Dictionary
  Dim oRecipientContact As New Scripting.Dictionary
  oRecipientContact.Add("companyName", toAddress.sName)
  oRecipientContact.Add("phoneNumber", toAddress.sPhone)
  oRecipient.Add("contact", oRecipientContact)

  Dim oShipToAddress As New Scripting.Dictionary
  Dim aToStreetLines(0 To 2) As String
  aToStreetLines(0) = toAddress.sLine1
  aToStreetLines(1) = toAddress.sLine2
  aToStreetLines(2) = toAddress.sLine3
  oShipToAddress.Add("streetLines", aToStreetLines)
  oShipToAddress.Add("city", toAddress.sCity)
  oShipToAddress.Add("stateOrProvinceCode", toAddress.sState)
  oShipToAddress.Add("postalCode", toAddress.sZip)
  oShipToAddress.Add("countryCode", "US")
  oRecipient.Add("address", oShipToAddress)
  Set aRecipients(0) = oRecipient
  oRequestedShipment.Add("recipients", aRecipients)

  oRequestedShipment.Add("shipDatestamp", Format(Date, "yyyy-MM-dd"))
  oRequestedShipment.Add("serviceType", "FEDEX_GROUND")
  oRequestedShipment.Add("packagingType", "YOUR_PACKAGING")
  oRequestedShipment.Add("pickupType", "USE_SCHEDULED_PICKUP")
  oRequestedShipment.Add("blockInsightVisibility", "false")

  Dim oShippingChargesPayment As New Scripting.Dictionary
  oShippingChargesPayment.Add("paymentType", "SENDER")
  oRequestedShipment.Add("shippingChargesPayment", oShippingChargesPayment)

  Dim oLabelSpecification As New Scripting.Dictionary
  oLabelSpecification.Add("imageType", "ZPLII")
  oLabelSpecification.Add("labelStockType", "STOCK_4X6")
  oRequestedShipment.Add("labelSpecification", oLabelSpecification)

  Dim aRequestedPackageLineItems(0 To 0) As Scripting.Dictionary
  Dim oRequestedPackageLineItem As New Scripting.Dictionary
  Dim oWeight As New Scripting.Dictionary
  oWeight.Add("units", "LB")
  oWeight.Add("value", CStr(nWeight))
  oRequestedPackageLineItem.Add("weight", oWeight)
  Set aRequestedPackageLineItems(0) = oRequestedPackageLineItem
  oRequestedShipment.Add("requestedPackageLineItems", aRequestedPackageLineItems)
  oDoc.Add("requestedShipment", oRequestedShipment)

  Dim oAccountNumber As New Scripting.Dictionary
  oAccountNumber.Add("value", sAccount)
  oDoc.Add("accountNumber", oAccountNumber)

  Return vbsJson.Encode(oDoc)
End Function
</Code>
