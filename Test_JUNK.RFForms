<Record FileDesc="Junk" FileVersion="5.0.8.0" Desc="Junk" Group="AMS_OLD" LinkTo="No Links" LinkType="0" PromptList="txtLITM" ImageList="0" AuthTableList="0">
<Schema>
<SchemaParam Linked="0" Attr="1" Name="txtLITM" />
</Schema>
<Displays>
<Display Name="(Default)" Type="1" Width="1920" Height="7040" Locale="1033" />
</Displays>
<Form Type="0" FieldId="Form" Attr="0" LinkMode="0">
<Controls>
<Control Type="1" FieldId="txtLITM" Attr="1" KeyField="0" MaskInput="0" Required="0" SipMode="0">
<Layouts>
<Layout PageNo="1" Visible="1" ZOrder="0">
<Label Align="0" Anchor="3" AutoSize="1" BorderStyle="5" DropShadow="0" BackFill="0" Theme="0" FontSize="0" FontStyle="0" MultiLine="0" Left="168" Top="154" Width="65" Height="22" AnchorRight="88" AnchorBottom="144" BackColor1="1" BackColor2="1" ForeColor="1" Caption="TextBox" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="0" DropShadow="0" BackFill="0" Theme="0" FontSize="0" FontStyle="0" MultiLine="0" Left="232" Top="154" Width="87" Height="22" AnchorRight="0" AnchorBottom="144" BackColor1="1" BackColor2="1" ForeColor="1" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
</Controls>
<Layouts>
<Layout PageNo="1" Visible="1" ZOrder="0" ImageAlign="0" FormWidth="319" FormHeight="320" Scrollbars="0">
<Label Align="1" Anchor="0" AutoSize="2" BorderStyle="0" DropShadow="0" BackFill="0" Theme="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="0" Width="319" Height="22" AnchorRight="0" AnchorBottom="0" BackColor1="1" BackColor2="1" ForeColor="1" />
<Field Align="0" Anchor="0" AutoSize="0" BorderStyle="3" DropShadow="1" BackFill="0" Theme="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="0" Width="319" Height="320" AnchorRight="0" AnchorBottom="0" BackColor1="1" BackColor2="1" ForeColor="1" DisplayOnly="0" />
</Layout>
</Layouts>
</Form>
</Record>
<Code>
Option Explicit
Private sOlderLots()        As String
Private msDeleteLogs        As String
Private mbCheckOldestLots   As Boolean
Private msValCache          As Variant
Private msLPList            As Variant
Private mnCnt               As Long
Private mnCounter           As Long
Private Sub txtLITM_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next

   'Check to make sure picking oldest lots

   Dim nLNID    As Currency
  Dim nSOBK    As Currency
  Dim nSOCN    As Currency
  Dim sMCU     As String
  Dim sLot     As String
  Dim sLocn    As String
  Dim sCOMM    As String
  Dim sITM     As String
  Dim sLITM    As String
  Dim sAITM    As String
  Dim sDesc    As String
  Dim sDSC1    As String
  Dim sUOM     As String
  Dim nType    As Long
  Dim iCnt     As Long
  Dim vArray   As Variant
  Dim sSql     As String
  Dim sCols    As String
  Dim sRows    As String
  Dim sSqlItems As String
  Dim sColsItems As String
  Dim sRowsItems As String

  Dim sSqlITM As String
  Dim sColsITM As String
  Dim sRowsITM As String

  Dim x As Long
  Dim nOnCache As Long
  Dim nOnLP As Long
  Dim nAvailable As Long
  Dim sOldestLotLP As String
  Dim sOldestLotINV As String
  Dim vRsp          As Variant
  Dim sLastItem     As String

  Dim sLPID         As String
  Dim sLotFilterLP  As String
  Dim sLotFilterINV As String

    Dim sSqlLP  As String
    Dim sColsLP As String
    Dim sRowsLP As String

    Dim sSqlConv   As String
    Dim sColsConv  As String
    Dim sRowsConv  As String

    Dim sSqlInv   As String
    Dim sColsInv  As String
    Dim sRowsInv  As String

    Dim sQty          As Long
    Dim i             As Integer
    Dim iCaseCount    As Long
    Dim sOldLotsArr() As String
    Dim sLOTN         As String
    Dim sCatCode      As String
    Dim sSqlCatCode   As String
    Dim sColsCatCode  As String
    Dim sRowsCatCode  As String
    Dim lCacheIndex   As Long
    Dim lDeleteCount  As Long
    Dim sOrigLOTN    As String

    Dim sSqlLOCN    As String
    Dim sRowsLOCN   As String
    Dim sColsLOCN   As String
    Dim lCounter    As Long
    Dim lLocnCount  As Long
    Dim lTotalCount As Long

    Dim sSqlCaseQty  As String
    Dim sColsCaseQty As String
    Dim sRowsCaseQty As String
    Dim lPalletQty   As Long
    Dim bOldestOnLpIsPalletQty As Boolean

    Dim lOldestLotQty As Long
    Dim bPalletQty    As Boolean
    Dim lAdjustedQty  As Long
    Dim c             As Long
    Dim arrAdjustedQty() As Long
    Dim lSolutionPallet  As Long
    'Dim sLITM As String
    'Dim sLocn As String

    bPalletQty = False

    If Trim(App.User) = "wlg1" Then Stop

    'check for pallet qty of oldest lot.
    sSqlCaseQty = "with CTE as (" & _
                    " select LDLITM, LDUORG from F55101 inner join F55102 on LMLPID = LDLPID" & _
                    " where LMPALP = '" & Trim(Rsp) & "' and LDLOTN <> ' '" & _
                    " union All" & _
                    " Select LDLITM, LDUORG from F55101 inner Join F55102 On LMLPID = LDLPID" & _
                    " where LDLPID = '" & Trim(Rsp) & "' and LDLOTN <> ' ')" & _
                  " select LDLITM, SUM(LDUORG) as LDUORG from CTE" & _
                  " group by LDLITM"
    DB.Execute(sSqlCaseQty, sColsCaseQty, sRowsCaseQty)
  Debug.Print(sSqlCaseQty)
    For i = 1 To DB.Count(sRowsCaseQty)
      sLITM = Trim(DB.Extract(sColsCaseQty,sRowsCaseQty, i, "LDLITM"))
      sQty  = DB.Extract(sColsCaseQty,sRowsCaseQty, i, "LDUORG")

      sSqlConv = "Select UMCONV/10000000  *" & _
                 " (Select UMCONV/10000000 from F41002" & _
                 " where UMITM = (Select IMITM from F4101 where IMLITM = '" & sLITM & "')" & _
                 " and UMUM = 'CA' and UMRUM = 'EA') as Qty" & _
                 " from F41002 where UMITM = (select IMITM from F4101 where IMLITM = '" & sLITM & "')" & _
                 " And UMUM = 'PL'" & _
                 " And UMRUM = 'CA'"
      DB.Execute(sSqlConv, sColsConv, sRowsConv)
      Debug.Print(sSqlConv)

      If DB.Count(sRowsConv) = 0 Then
        sSqlConv = "Select UMCONV/10000000 as Qty" & _
                 " from F41002 where UMITM = (select IMITM from F4101 where IMLITM = '" & sLITM & "')" & _
                 " And UMUM = 'PL'" & _
                 " And UMRUM = 'EA'"
        DB.Execute(sSqlConv, sColsConv, sRowsConv)
      End If

      lPalletQty = DB.Extract(sColsConv, sRowsConv, 1, "Qty")

      ' if item has a full pallet qty
      If sQty >= lPalletQty Then
        bPalletQty = True

        sSqlLP = "with z as (Select LDLITM, LMLOCN, LDLOTN, LDUORG from F55101 inner join F55102 on LMLPID = LDLPID" & _
             " where LMPALP = '" & Trim(Rsp) & "'" & _
             " union All" & _
             " Select LDLITM, LMLOCN, LDLOTN, LDUORG from F55101 inner Join F55102 On LMLPID = LDLPID" & _
             " where LDLPID = '" & Trim(Rsp) & "')," & _
             " CTE As ( Select LDLOTN As OrigProductNumber,CAST(LDLOTN As VARCHAR(100)) As LDLOTN," & _
             " LDLITM, LDUORG, LMLOCN from z" & _
             " UNION All" & _
             " Select OrigProductNumber,CAST(STUFF(LDLOTN, PATINDEX('%[^0-9]%',LDLOTN), 1, '')" & _
             " AS VARCHAR(100)) AS LDLOTN, LDLITM, LDUORG, LMLOCN FROM CTE WHERE PATINDEX('%[^0-9]%', LDLOTN) > 0)" & _
             " SELECT OrigProductNumber, LDLOTN, LDLITM, LMLOCN, SUM(LDUORG) as LDUORG" & _
             " FROM CTE WHERE PATINDEX('%[^0-9]%', LDLOTN) = 0 And cast(LDLOTN As BIGINT) > 0 and LDLITM = '" & sLITM & "'" & _
             " group by LMLOCN, LDLITM, OrigProductNumber, LDLOTN" & _
             " order by LDLITM, LDLOTN
        DB.Execute(sSqlLP, sColsLP, sRowsLP)
Debug.Print(sSqlLP)
        'first is oldest lot on pallet
        sOrigLOTN = Trim(DB.Extract(sColsLP, sRowsLP, 1, "OrigProductNumber"))
        sLOTN     = Trim(DB.Extract(sColsLP, sRowsLP, 1, "LDLOTN"))
        bOldestOnLpIsPalletQty = CLng(DB.Extract(sColsLP, sRowsLP, 1, "LDUORG")) >= lPalletQty
        lOldestLotQty = DB.Extract(sColsLP, sRowsLP, 1, "LDUORG")
        sLocn = Trim(DB.Extract(sColsLP, sRowsLP, 1, "LMLOCN"))

        If getOldestLotINV(App.GetValue("tmMCU"), sLITM, sLOTN, lPalletQty-1, "") Then
          For i = 1 To UBound(sOlderLots)
            sSqlInv = "With CTE As(" & _
                         " Select LMLOCN, LDLOTN, LMMCU, LDLITM, SUM(LDUORG) As LDUORG from" & Chr(10) & _
                         " (Select LMLOCN, LDLOTN, LMMCU, LDLITM, LDUORG from F55102 inner Join F55101 On LDLPID = LMLPID" & _
                         " where LMPALP =  '" & Trim(Rsp) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN = '" & sOlderLots(i,1) & "'" & _
                         " UNION ALL" & _
                         " Select LMLOCN, LDLOTN, LMMCU , LDLITM, LDUORG from F55102" & _
                         " inner Join F55101 On LDLPID = LMLPID" & _
                         " where LDLPID =  '" & Trim(Rsp) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN =  '" & sOlderLots(i,1) & "'" & _
                         " ) As t1  group by LMLOCN, LDLOTN, LMMCU, LDLITM" & _
                         " )" & _
                     " Select IMLITM,  LILOCN, IMUOM1, LILOTN,  LILOTS" & _
                     " , (LIPQOH - LIPCOM - LIHCOM -  IsNull(LDUORG,0)*10000) As Count from F41021" & _
                     " inner Join F4101 On IMITM = LIITM" & _
                     " Left Join CTE On LILOCN = LMLOCN And LILOTN = LDLOTN" & _
                     " And LIMCU = LMMCU And IMLITM = LDLITM" & _
                     " where LILOTN = '" & sOlderLots(i,1) & "'" & _
                     " and IMLITM = '" & sLITM & "'" & _
                     " and  (LIPQOH - LIPCOM - LIHCOM -  isnull(LDUORG,0)*10000) >= " & lPalletQty * 10000 & _
                     " and LIMCU = '%tmMCU'" & _
                     " order by LILOTN, Count desc"
            DB.Execute(sSqlInv, sColsInv, sRowsInv)

            'get count, subtract whats cached...is still pallet qty? If no try next one

            ' if there is a result, then there is location with older lot and pallet qty robb

            ReDim arrAdjustedQty(DB.Count(sRowsInv),1)
            lSolutionPallet = 0

            For c = 1 To DB.Count(sRowsInv)

              lAdjustedQty = DB.Extract(sColsInv, sRowsInv, c, "Count")
              lDeleteCount = 0

              For lCacheIndex = 1 To mnCnt
                If Trim(Ext(msValCache,02, lCacheIndex)) = sLITM _
                And Trim(Ext(msValCache,07, lCacheIndex)) = sOlderLots(i,1) _
                  And Trim(Ext(msValCache,04, lCacheIndex)) = Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) Then
                  lDeleteCount = lDeleteCount + CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
                End If
              Next

              lAdjustedQty = lAdjustedQty - lDeleteCount
              arrAdjustedQty(c, 1) = lAdjustedQty/10000

              If lAdjustedQty/10000 >= lPalletQty And lSolutionPallet = 0 Then
                lSolutionPallet = c
              End If

            Next


            If arrAdjustedQty(lSolutionPallet, 1) >= lPalletQty Then
              c = lSolutionPallet

              sSqlCatCode = " Select I0AC29 from F554101C inner Join F4101 On I0ITM = IMITM where IMLITM = '" & sLITM & "'"
              DB.Execute(sSqlCatCode,sColsCatCode, sRowsCatCode)
              sCatCode = Trim(DB.Extract(sColsCatCode, sRowsCatCode, 1, "I0AC29"))

              If sCatCode = "Y" Then
                App.MsgBox("Error: Older lot " & sOlderLots(i,1) & " has a full pallet qty of " & _
                            arrAdjustedQty(c, 1) & " for item " & sLITM & _
                            " in location " & Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) & _
                            " This lot must be picked first.")
                Exit Sub
              End If

              vRsp = App.MsgBox("Warning: Older lot " & sOlderLots(i,1) & " has a full pallet qty of " & _
                            arrAdjustedQty(c, 1) & " for item " & sLITM & _
                            " in location " & Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) & ".",vbCustom, 2, "[Ignore][Cancel]")
              If vRsp = "Cancel" Then
                Cancel = True
                appendOrDeleteLogs("D")
                Exit Sub

              Else

                For lCounter = 1 To DB.Count(sRowsInv)

                  If arrAdjustedQty(lCounter, 1) < lPalletQty Then GoTo CONTINUE1

                  sSqlCatCode = "insert into RFOverride VALUES" & _
                            " ((select IMITM from F4101 where IMLITM = '" & sLITM & "')" & _
                            ", '" & sOrigLOTN & "'" & _
                            ", '" & sLocn & "'" & _
                            ", " & lOldestLotQty & _
                            ", %tmDOCO" & _
                            ", '" & sOlderLots(i,1) & "'" & _
                            ", '" & Trim(DB.Extract(sColsInv, sRowsInv, lCounter, "LILOCN")) & "'" & _
                            ", " & arrAdjustedQty(lCounter,1) & _
                            ", ' '" & _
                            ", " & ConvDatetoJDE(Format(Now(),"MM/DD/YYYY")) & _
                            ", " & Format(Now(),"hhmmss")  & _
                            ", '" & App.User & "'" & _
                            ", 'ST-PICK-P')"
                  'DB.Execute(sSqlCatCode)
                  appendOrDeleteLogs("A")

                  CONTINUE1:
                Next

              End If
            End If

          Next
        End If

        If Not bOldestOnLpIsPalletQty Then

            sSqlInv = "With CTE As(" & _
                         " Select LMLOCN, LDLOTN, LMMCU, LDLITM, SUM(LDUORG) As LDUORG from" & Chr(10) & _
                         " (Select LMLOCN, LDLOTN, LMMCU, LDLITM, LDUORG from F55102 inner Join F55101 On LDLPID = LMLPID" & _
                         " where LMPALP =  '" & Trim(Rsp) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN = '" & sOrigLOTN & "'" & _
                         " UNION ALL" & _
                         " Select LMLOCN, LDLOTN, LMMCU , LDLITM, LDUORG from F55102" & _
                         " inner Join F55101 On LDLPID = LMLPID" & _
                         " where LDLPID =  '" & Trim(Rsp) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN =  '" & sOrigLOTN & "'" & _
                         " ) As t1  group by LMLOCN, LDLOTN, LMMCU, LDLITM" & _
                         " )" & _
                     " Select IMLITM,  LILOCN, IMUOM1, LILOTN,  LILOTS" & _
                     " , (LIPQOH - LIPCOM - LIHCOM -  IsNull(LDUORG,0)*10000) As Count from F41021" & _
                     " inner Join F4101 On IMITM = LIITM" & _
                     " Left Join CTE On LILOCN = LMLOCN And LILOTN = LDLOTN" & _
                     " And LIMCU = LMMCU And IMLITM = LDLITM" & _
                     " where LILOTN = '" & sOrigLOTN & "'" & _
                     " and IMLITM = '" & sLITM & "'" & _
                     " and  (LIPQOH - LIPCOM - LIHCOM -  isnull(LDUORG,0)*10000) >= " & lPalletQty * 10000 & _
                     " and LIMCU = '%tmMCU'" & _
                     " order by LILOTN, Count desc"
            DB.Execute(sSqlInv, sColsInv, sRowsInv)

            ReDim arrAdjustedQty(DB.Count(sRowsInv),1)
            lSolutionPallet = 0

            For c = 1 To DB.Count(sRowsInv)

              lAdjustedQty = DB.Extract(sColsInv, sRowsInv, c, "Count")
              lDeleteCount = 0

              For lCacheIndex = 1 To mnCnt
                If Trim(Ext(msValCache,02, lCacheIndex)) = sLITM _
                And Trim(Ext(msValCache,07, lCacheIndex)) = sOrigLOTN _
                  And Trim(Ext(msValCache,04, lCacheIndex)) = Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) Then
                  lDeleteCount = lDeleteCount + CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
                End If
              Next

              lAdjustedQty = lAdjustedQty - lDeleteCount
              arrAdjustedQty(c, 1) = lAdjustedQty/10000

              If lAdjustedQty/10000 >= lPalletQty And lSolutionPallet = 0 Then
                lSolutionPallet = c
              End If

            Next

            ' if there is a result, then there is location with older lot and pallet qty
            If arrAdjustedQty(lSolutionPallet, 1) >= lPalletQty Then
              c = lSolutionPallet

              sSqlCatCode = " Select I0AC29 from F554101C inner Join F4101 On I0ITM = IMITM where IMLITM = '" & sLITM & "'"
              DB.Execute(sSqlCatCode,sColsCatCode, sRowsCatCode)
              sCatCode = Trim(DB.Extract(sColsCatCode, sRowsCatCode, 1, "I0AC29"))

              If sCatCode = "Y" Then
                App.MsgBox("Error: Older lot " & sOlderLots(i,1) & " has a full pallet qty of " & _
                            arrAdjustedQty(c, 1) & " for item " & sLITM & _
                            " in location " & Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) & _
                            " This lot must be picked first.")
                Exit Sub
              End If

              vRsp = App.MsgBox("Warning: Oldest lot on pallet " & sOrigLOTN & " has a full pallet qty of " & _
                            arrAdjustedQty(c, 1) & " for item " & sLITM & _
                            " in location " & Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) & ".",vbCustom, 2, "[Ignore][Cancel]")
              If vRsp = "Cancel" Then
                Cancel = True
                appendOrDeleteLogs("D")
                Exit Sub
              Else

                For lCounter = 1 To DB.Count(sRowsInv)
                  If arrAdjustedQty(lCounter, 1) < lPalletQty Then GoTo CONTINUE2

                  sSqlCatCode = "insert into RFOverride VALUES" & _
                            " ((select IMITM from F4101 where IMLITM = '" & sLITM & "')" & _
                            ", '" & sOrigLOTN & "'" & _
                            ", '" & sLocn & "'" & _
                            ", " & lOldestLotQty & _
                            ", %tmDOCO" & _
                            ", '" & sOrigLOTN & "'" & _
                            ", '" & Trim(DB.Extract(sColsInv, sRowsInv, lCounter, "LILOCN")) & "'" & _
                            ", " & arrAdjustedQty(lCounter, 1) & _
                            ", ' '" & _
                            ", " & ConvDatetoJDE(Format(Now(),"MM/DD/YYYY")) & _
                            ", " & Format(Now(),"hhmmss")  & _
                            ", '" & App.User & "'" & _
                            ", 'ST-PICK-P')"
                  'DB.Execute(sSqlCatCode)
                  appendOrDeleteLogs("A")

                  CONTINUE2:
                Next
              End If
            End If

          End If
      End If

    Next

'If Trim(App.User) = "wlg1" Then Exit Sub


    'If bPalletQty Then GoTo SKIPCASEVALIDATION


    'Get all lot controlled items on LP and order by item, oldestLot
    sSqlLP = "with z as (Select LDLITM, LMLOCN, LDLOTN, LDUORG from F55101 inner join F55102 on LMLPID = LDLPID" & _
             " where LMPALP = '" & Trim(Rsp) & "'" & _
             " union All" & _
             " Select LDLITM, LMLOCN, LDLOTN, LDUORG from F55101 inner Join F55102 On LMLPID = LDLPID" & _
             " where LDLPID = '" & Trim(Rsp) & "')," & _
             " CTE As ( Select LDLOTN As OrigProductNumber,CAST(LDLOTN As VARCHAR(100)) As LDLOTN," & _
             " LDLITM, LDUORG, LMLOCN from z" & _
             " UNION All" & _
             " Select OrigProductNumber,CAST(STUFF(LDLOTN, PATINDEX('%[^0-9]%',LDLOTN), 1, '')" & _
             " AS VARCHAR(100)) AS LDLOTN, LDLITM, LDUORG, LMLOCN FROM CTE WHERE PATINDEX('%[^0-9]%', LDLOTN) > 0)" & _
             " SELECT distinct * FROM CTE WHERE PATINDEX('%[^0-9]%', LDLOTN) = 0 And cast(LDLOTN As BIGINT) > 0" & _
             " order by LDLITM, LDLOTN, LDUORG

    DB.Execute(sSqlLP, sColsLP, sRowsLP)
Debug.Print(sSqlLP)
    sLocn = Trim(DB.Extract(sColsLP, sRowsLP, 1, "LMLOCN"))

    For x = 1 To DB.Count(sRowsLP)
      sQty      = DB.Extract(sColsLP, sRowsLP, x, "LDUORG")
      sLOTN     = Trim(DB.Extract(sColsLP, sRowsLP, x, "LDLOTN"))
      sLITM     = Trim(DB.Extract(sColsLP, sRowsLP, x, "LDLITM"))
      sOrigLOTN = Trim(DB.Extract(sColsLP, sRowsLP, x, "OrigProductNumber"))

      If sLITM <> sLastItem Then
        sLastItem = sLITM
        sLotFilterLP = ""

        sSqlConv = "select UMCONV from F41002 where UMUM = 'CA' and UMRUM = 'EA'" & _
                " and UMITM = (select IMITM from F4101 where IMLITM = '" & sLITM & "')"
        DB.Execute(sSqlConv, sColsConv, sRowsConv)

        iCaseCount = DB.Extract(sColsConv, sRowsConv, 1, "UMCONV") / 10000000
      End If

      If sQty < iCaseCount Then
        If getOldestLotINV(App.GetValue("tmMCU"), sLITM, sLOTN,,sLotFilterLP) Then
          For i = 1 To UBound(sOlderLots)

            sSqlInv = "With CTE As(" & _
                         " Select LMLOCN, LDLOTN, LMMCU, LDLITM, SUM(LDUORG) As LDUORG from" & Chr(10) & _
                         " (Select LMLOCN, LDLOTN, LMMCU, LDLITM, LDUORG from F55102 inner Join F55101 On LDLPID = LMLPID" & _
                         " where LMPALP =  '" & Trim(Rsp) & "'" & _
                         " and LDLITM = '" & slitm & "'" & _
                         " and LDLOTN = '" & sOlderLots(i,1) & "'" & _
                         " UNION ALL" & _
                         " Select LMLOCN, LDLOTN, LMMCU , LDLITM, LDUORG from F55102" & _
                         " inner Join F55101 On LDLPID = LMLPID" & _
                         " where LDLPID =  '" & Trim(Rsp) & "'" & _
                         " and LDLITM = '" & slitm & "'" & _
                         " and LDLOTN =  '" & sOlderLots(i,1) & "'" & _
                         " ) As t1  group by LMLOCN, LDLOTN, LMMCU, LDLITM" & _
                         " )" & _
                     " Select IMLITM,  LILOCN, IMUOM1, LILOTN,  LILOTS" & _
                     " , (LIPQOH - LIPCOM - LIHCOM -  IsNull(LDUORG,0)*10000) As Count from F41021" & _
                     " inner Join F4101 On IMITM = LIITM" & _
                     " Left Join CTE On LILOCN = LMLOCN And LILOTN = LDLOTN" & _
                     " And LIMCU = LMMCU And IMLITM = LDLITM" & _
                     " where LILOTN = '" & sOlderLots(i,1) & "'" & _
                     " and IMLITM = '" & slitm & "'" & _
                     " and  (LIPQOH - LIPCOM - LIHCOM -  isnull(LDUORG,0)*10000) > 0"  & _
                     " and LIMCU = '%tmMCU'" & _
                     " order by LILOTN, Count desc"
            DB.Execute(sSqlInv, sColsInv, sRowsInv)

            lTotalCount = 0
            lLocnCount = DB.Count(sRowsInv)

            For lCacheIndex = 1 To lLocnCount
              lTotalCount = lTotalCount + DB.Extract(sColsInv, sRowsInv, lCacheIndex, "Count")
            Next

            ' Delete count of cached picks
            lDeleteCount = 0
            For lCacheIndex = 1 To mnCnt
              If Trim(Ext(msValCache,02, lCacheIndex)) = slitm _
              And Trim(Ext(msValCache,07, lCacheIndex)) = sOlderLots(i,1) Then
                lDeleteCount = lDeleteCount + CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
              End If
            Next

            sOlderLots(i,2) = CStr(lTotalCount - lDeleteCount)

            sSqlCatCode = " Select I0AC29 from F554101C inner Join F4101 On I0ITM = IMITM where IMLITM = '" & slitm & "'"
            DB.Execute(sSqlCatCode,sColsCatCode, sRowsCatCode)
            sCatCode = Trim(DB.Extract(sColsCatCode, sRowsCatCode, 1, "I0AC29"))

            If CLng(sOlderLots(i,2))/10000 > 0 Then
              If sCatCode = "Y" Then
                App.MsgBox("Error: Older lot " & sOlderLots(i,1) & " has a qty of " & _
                            CLng(sOlderLots(i,2))/10000 & " for item " & slitm & " This lot must be picked first.")
                Exit Sub
              End If

              vRsp = App.MsgBox("Warning: Older lot " & sOlderLots(i,1) & " has a qty of " & _
                            CLng(sOlderLots(i,2))/10000 & " for item " & sLITM & " in " & lLocnCount & " locations.",vbCustom, 2, "[Ignore][Cancel][Find Lot]")
              If vRsp = "Cancel" Then
                appendOrDeleteLogs("D")
                Cancel = True
                Exit Sub
              ElseIf vRsp = "FindLot" Then
                appendOrDeleteLogs("D")
                App.CallForm("FIMQI0101_AMS -valITEM=" & sLITM  & _
                           " -valLOTN=" & sOlderLots(i,1) & " -valMCU=" & App.GetValue("tmMCU") & _
                           " -valLPID=" & Trim(Rsp) & " -valCASE=FALSE",True, True,True)
                Exit Sub
              Else
                sLotFilterLP = sLotFilterLP & sOlderLots(i,1) & " "

                For lCounter = 1 To DB.Count(sRowsInv)

                  lAdjustedQty = DB.Extract(sColsInv, sRowsInv, lCounter, "Count")

                  For lCacheIndex = 1 To mnCnt
                    If Trim(Ext(msValCache,02, lCacheIndex)) = sLITM _
                        And Trim(Ext(msValCache,07, lCacheIndex)) = sOlderLots(i,1) _
                        And Trim(Ext(msValCache,04, lCacheIndex)) = Trim(DB.Extract(sColsInv, sRowsInv, lCounter, "LILOCN")) Then
                      lDeleteCount = lDeleteCount + CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
                    End If
                  Next

                  lAdjustedQty = lAdjustedQty - lDeleteCount

                  If lAdjustedQty < 0 Then GoTo CONTINUE3

                  sSqlCatCode = "insert into RFOverride VALUES" & _
                            " ((select IMITM from F4101 where IMLITM = '" & sLITM & "')" & _
                            ", '" & sOrigLOTN & "'" & _
                            ", '" & sLocn & "'" & _
                            ", " & sQty & _
                            ", %tmDOCO" & _
                            ", '" & sOlderLots(i,1) & "'" & _
                            ", '" & Trim(DB.Extract(sColsInv, sRowsInv, lCounter, "LILOCN")) & "'" & _
                            ", " & lAdjustedQty/10000 & _
                            ", ' '" & _
                            ", " & ConvDatetoJDE(Format(Now(),"MM/DD/YYYY")) & _
                            ", " & Format(Now(),"hhmmss")  & _
                            ", '" & App.User & "'" & _
                            ", 'ST-PICK')"
                  'DB.Execute(sSqlCatCode)
                  appendOrDeleteLogs("A")

                  CONTINUE3:
                Next

              End If
            End If
          Next
        End If
      Else
        'check for oldest lot with case qty
        If getOldestLotINV(App.GetValue("tmMCU"), sLITM, sLOTN,sQty -1, sLotFilterLP) Then 'minus one because in query > sqty
          For i = 1 To UBound(sOlderLots)

           sSqlInv = "With CTE As(" & _
                         " Select LMLOCN, LDLOTN, LMMCU, LDLITM, SUM(LDUORG) As LDUORG from" & Chr(10) & _
                         " (Select LMLOCN, LDLOTN, LMMCU, LDLITM, LDUORG from F55102 inner Join F55101 On LDLPID = LMLPID" & _
                         " where LMPALP =  '" & Trim(Rsp) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN = '" & sOlderLots(i,1) & "'" & _
                         " UNION ALL" & _
                         " Select LMLOCN, LDLOTN, LMMCU , LDLITM, LDUORG from F55102" & _
                         " inner Join F55101 On LDLPID = LMLPID" & _
                         " where LDLPID =  '" & Trim(Rsp) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN =  '" & sOlderLots(i,1) & "'" & _
                         " ) As t1  group by LMLOCN, LDLOTN, LMMCU, LDLITM" & _
                         " )" & _
                     " Select IMLITM,  LILOCN, IMUOM1, LILOTN,  LILOTS" & _
                     " , (LIPQOH - LIPCOM - LIHCOM -  IsNull(LDUORG,0)*10000) As Count from F41021" & _
                     " inner Join F4101 On IMITM = LIITM" & _
                     " Left Join CTE On LILOCN = LMLOCN And LILOTN = LDLOTN" & _
                     " And LIMCU = LMMCU And IMLITM = LDLITM" & _
                     " where LILOTN = '" & sOlderLots(i,1) & "'" & _
                     " and IMLITM = '" & sLITM & "'" & _
                     " and  (LIPQOH - LIPCOM - LIHCOM -  isnull(LDUORG,0)*10000) >= " & iCaseCount * 10000 & _
                     " and LIMCU = '%tmMCU'" & _
                     " order by LILOTN, Count desc"
            DB.Execute(sSqlInv, sColsInv, sRowsInv)

            lTotalCount = 0
            lLocnCount = DB.Count(sRowsInv)

            For lCacheIndex = 1 To lLocnCount
              lTotalCount = lTotalCount + DB.Extract(sColsInv, sRowsInv, lCacheIndex, "Count")
            Next

            ' delete cached picks count
'            For lCacheIndex = 1 To mnCnt
'              If Trim(Ext(msValCache,02, lCacheIndex)) = sLITM _
'              And Trim(Ext(msValCache,07, lCacheIndex)) = sOlderLots(i,1) Then
'                lDeleteCount = lDeleteCount + CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
'              End If
'            Next



            ReDim arrAdjustedQty(DB.Count(sRowsInv),1)
            lSolutionPallet = 0

            For c = 1 To DB.Count(sRowsInv)

              lAdjustedQty = DB.Extract(sColsInv, sRowsInv, c, "Count")
              lDeleteCount = 0

              For lCacheIndex = 1 To mnCnt
                If Trim(Ext(msValCache,02, lCacheIndex)) = sLITM _
                And Trim(Ext(msValCache,07, lCacheIndex)) = sOlderLots(i,1) _
                  And Trim(Ext(msValCache,04, lCacheIndex)) = Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) Then
                  lDeleteCount = lDeleteCount + CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
                  lTotalCount = lTotalCount - CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
                End If
              Next

              lAdjustedQty = lAdjustedQty - lDeleteCount
              arrAdjustedQty(c, 1) = lAdjustedQty/10000

              If lAdjustedQty/10000 >= iCaseCount And lSolutionPallet = 0 Then
                lSolutionPallet = c
              End If

            Next

            sOlderLots(i,2) = CStr(arrAdjustedQty(lSolutionPallet, 1))

            sSqlCatCode = " Select I0AC29 from F554101C inner Join F4101 On I0ITM = IMITM where IMLITM = '" & sLITM & "'"
            DB.Execute(sSqlCatCode,sColsCatCode, sRowsCatCode)
            sCatCode = Trim(DB.Extract(sColsCatCode, sRowsCatCode, 1, "I0AC29"))

            If CLng(sOlderLots(i,2)) >= iCaseCount Then
              If sCatCode = "Y" Then
                App.MsgBox("Error: Older lot " & sOlderLots(i,1) & " has a qty of " & _
                            lTotalCount/10000 & " for item " & sLITM & " This lot must be picked first.")
                Exit Sub
              End If

              vRsp = App.MsgBox("Warning: Older lot " & sOlderLots(i,1) & " has a qty of " & _
                            lTotalCount/10000 & " for item " & sLITM & " in " & lLocnCount & " locations.",vbCustom, 2, "[Ignore][Cancel][Find Lot]")
              If vRsp = "Cancel" Then
                appendOrDeleteLogs("D")
                Cancel = True
                Exit Sub
              ElseIf vRsp = "FindLot" Then
                appendOrDeleteLogs("D")
                App.CallForm("FIMQI0101_AMS -valITEM=" & sLITM  & _
                           " -valLOTN=" & sOlderLots(i,1) & " -valMCU=" & App.GetValue("tmMCU") & _
                           " -valLPID=" & Trim(Rsp) & " -valCASE=TRUE",True, True,True)
                Exit Sub
              Else
                sLotFilterLP = sLotFilterLP & sOlderLots(i,1) & " "

                For lCounter = 1 To DB.Count(sRowsInv)

                  If arrAdjustedQty(lCounter, 1) < iCaseCount Then GoTo CONTINUE4

                  sSqlCatCode = "insert into RFOverride VALUES" & _
                            " ((select IMITM from F4101 where IMLITM = '" & sLITM & "')" & _
                            ", '" & sOrigLOTN & "'" & _
                            ", '" & sLocn & "'" & _
                            ", " & sQty & _
                            ", %tmDOCO" & _
                            ", '" & sOlderLots(i,1) & "'" & _
                            ", '" & Trim(DB.Extract(sColsInv, sRowsInv, lCounter, "LILOCN")) & "'" & _
                            ", " & arrAdjustedQty(lCounter, 1) & _
                            ", ' '" & _
                            ", " & ConvDatetoJDE(Format(Now(),"MM/DD/YYYY")) & _
                            ", " & Format(Now(),"hhmmss")  & _
                            ", '" & App.User & "'" & _
                            ", 'ST-PICK')"
                  'DB.Execute(sSqlCatCode)
                  appendOrDeleteLogs("A")

                  CONTINUE4:
                Next

              End If
            End If
          Next
        End If

      End If
    Next

    SKIPCASEVALIDATION:
    SKIPLOTCHECK:
End Sub


Private Function getOldestLotINV(ByVal sMCU As String, ByVal sITEM As String, ByVal sLOTN As String, Optional ByVal iCnt As Long, Optional ByVal sLotFilter) As Boolean
  Dim nLotValue  As Long
  Dim sLotParts() As String
  Dim sSqlItem   As String
  Dim sColsItem  As String
  Dim sRowsItem  As String
  Dim sITM       As String
  Dim cOldestLot As Currency
  Dim vRsp       As Variant
  Dim sNotIn     As String
  Dim sArr       As Variant
  Dim i          As Long
  Dim sReturnArr() As String

  sMCU = FixRight(Trim(sMCU), 12)

  If iCnt > 0 Then
    iCnt = iCnt * 10000
  End If

  ReDim sOlderLots(0,0)
  sLotFilter = Trim(sLotFilter)

  If Trim(sLotFilter) <> "" Then
    sNotIn = " and LILOTN not in ("
    sArr = Split(sLotFilter," ")
    For i = 0 To UBound(sArr)
      sNotIn = sNotIn & "'" & sArr(i) & "'"
      If i <> UBound(sArr) Then
        sNotIn = sNotIn & ","
      End If
    Next
    sNotIn = sNotIn & ") "
  End If

    sSqlItem = "select IMITM from F4101 where IMLITM = '" & sITEM & "'"
    DB.Execute(sSqlItem, sColsItem, sRowsItem)
    If DB.Count(sRowsItem) > 0 Then
      sITM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMITM"))
    End If

      sSqlItem = "With CTE As (Select LILOTN As OrigProductNumber,CAST(LILOTN As VARCHAR(100))" & _
                 " As LILOTN FROM F41021 WHERE LIMCU = '" & sMCU & "' and LIITM = " & _
                   sITM & " and (LIPQOH -LIPCOM -LIHCOM) > " & iCnt   & sNotIn & _
                 " UNION All Select OrigProductNumber,CAST(STUFF(LILOTN, PATINDEX('%[^0-9]%',LILOTN), 1, '')" & _
                 " AS VARCHAR(100) ) AS LILOTN FROM CTE WHERE PATINDEX('%[^0-9]%', LILOTN) > 0)" & _
                 " SELECT distinct * FROM CTE" & _
                 " WHERE PATINDEX('%[^0-9]%', LILOTN) = 0" & _
                 " And cast(LILOTN As BIGINT) > 0 and cast(LILOTN As BIGINT) < " & sLOTN & " order by LILOTN"

      DB.Execute(sSqlItem, sColsItem, sRowsItem)
'Debug.Print(sSqlItem)
      If(DB.Count(sRowsItem)) = 0 Then
        getOldestLotINV = False
        Exit Function
      End If


      ReDim sOlderLots(DB.Count(sRowsItem),2)

      For i = 1 To DB.Count(sRowsItem)
        sOlderLots(i, 1) = Trim(DB.Extract(sColsItem,sRowsItem, i,"OrigProductNumber"))
      Next

      getOldestLotINV = True

End Function

Public Function Search_F41021_LOTN_LOCAL(ByRef Rsp As String, ByVal sFindLOTN As String, ByVal sMCU As String, ByVal vITM As Variant, Optional ByRef sLocn As String, Optional ByRef bAvail As Boolean) As Boolean
  On Error Resume Next
  '
  Dim sSql     As String
  Dim sWhere   As String
  Dim sSQLStr  As String
  Dim sValue   As String
  Dim iDecPQOH As Integer
  Dim oList    As New SearchList
  '
  ' In case DB is Oracle
  If gbOracleJDE Then
    If Len(sLocn) = 0 Then sLocn = " "
  End If

  Call GetDecimals("PQOH", iDecPQOH)
  '
  If (Len(sMCU)>0) Then
    If (Len(sWhere)>0) Then sWhere = sWhere & " and"
    sWhere = sWhere & " LIMCU = '" & sMCU & "'"
  End If
  '
  If (Len(vITM)>0) Then
    If (Len(sWhere)>0) Then sWhere = sWhere & " and"
    sWhere = sWhere & " LIITM = " & vITM
  End If
  '
  If (Len(sLocn)>0) Then
    If (Len(sWhere)>0) Then sWhere = sWhere & " and"
    sWhere = sWhere & " LILOCN = '" & sLocn & "' "
  End If
  '
  If (Len(sFindLOTN)>0) Then
    If (Len(sFindLOTN) < giMinSearchLen) Then
      App.MsgBox (giMinSearchLen & GetMsg(15))
      Search_F41021_LOTN_LOCAL = True
      Exit Function
    End If
    '
    If (Len(sWhere)>0) Then sWhere = sWhere & " and"
    sWhere = sWhere & " LILOTN Like ('" & Trim(UCase(sFindLOTN)) & "%%')"
  End If
  '
  If (Len(sWhere)>0) Then sWhere = " where" & sWhere

  If bAvail Then
    Call GetItemAvailSQL(sMCU, sSQLStr)
    sSql = "select LILOTN, LILOCN, " & sSQLStr & ", IMUOM1, LILOTS from F41021 inner join F4101 on LIITM = IMITM " & sWhere & " and " & sSQLStr & " <> 0 order by LILOTN, LILOCN"
  Else
    sSql = "select LILOTN, LILOCN, LIPQOH, IMUOM1, LILOTS from F41021 inner join F4101 on LIITM = IMITM " & sWhere & " and LIPQOH <> 0 group by LILOTN, LILOCN, LIPQOH, IMUOM1, LILOTS order by LILOTN, LILOCN"
  End If

  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Lot", giLenLOTN,  CenterLeft, True)
  oList.SetColumn(2, "Locn", giLenLOCN, CenterLeft, True)
  oList.SetColumn(3, "Qty", giLenQTY,   CenterRight, True, iDecPQOH)
  oList.SetColumn(4, "UM",        2,    CenterLeft, True)
  oList.SetColumn(5, "S",         1,    CenterLeft, True)
  oList.SQL = sSql
  sValue = oList.ShowList

  Rsp   = LField(sValue, Chr(3), 1)
  slocn = LField(sValue, Chr(3), 2)

  Search_F41021_LOTN_LOCAL = (Len(Rsp) > 0)


  If Not gbDemoMode Then
    slocn = ""
    Rsp = ""
  End If
 '
End Function

Private Function appendOrDeleteLogs(ByVal sKey As String)
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String

  If sKey = "D" And Trim(msDeleteLogs) = "" Then Exit Function

  If Trim(UCase(sKey)) = "A" Then

    sSql = "select MAX(IEID) as IEID from RFOverride where IEUSER = '" & App.User & "'"
    DB.Execute(sSql, sCols, sRows)

    If Trim(msDeleteLogs) = "" Then
      msDeleteLogs = DB.Extract(sCols, sRows, 1, "IEID")
    Else
      msDeleteLogs = msDeleteLogs & ", " &  DB.Extract(sCols, sRows, 1, "IEID")
    End If
    Exit Function

  ElseIf Trim(UCase(sKey)) = "D" Then
    sSql = "delete from RFOverride where IEID in (" & msDeleteLogs & ")"
    DB.Execute(sSql)
    msDeleteLogs = ""
  End If
End Function
</Code>
