<Record FileDesc="LP - Transfer LP" FileVersion="5.0.8.0" Desc="LP - Transfer LP" Group="AMS" LinkTo="No Links" LinkType="0" LinkMode="0" PromptList="txtMCU&vm;txtLPID&vm;lblLPDesc&vm;lblLPQty&vm;lblLPLocn&vm;txtNMCU&vm;txtTOLOCN&vm;Frame1" Depends="JDE.bas">
<Schema>
<SchemaParam Linked="0" Attr="1" Name="txtMCU" />
<SchemaParam Linked="0" Attr="2" Name="txtLPID" />
<SchemaParam Linked="0" Attr="3" Name="lblLPDesc" />
<SchemaParam Linked="0" Attr="4" Name="lblLPQty" />
<SchemaParam Linked="0" Attr="5" Name="lblLPLocn" />
<SchemaParam Linked="0" Attr="6" Name="txtNMCU" />
<SchemaParam Linked="0" Attr="7" Name="txtTOLOCN" />
<SchemaParam Linked="0" Attr="8" Name="Frame1" />
</Schema>
<Displays>
<Display Name="EnglishGUI" Type="1" Width="1920" Height="7040" Locale="1033" />
</Displays>
<Form FieldId="Form" Attr="0" LinkMode="0" Pages="1">
<Controls>
<Control Type="1" FieldId="txtMCU" Attr="1" KeyField="0" MaskInput="0" Required="1">
<Layouts>
<Layout PageNo="1" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="22" Width="55" Height="22" AnchorRight="185" AnchorBottom="276" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="Plant:" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="3" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="48" Top="22" Width="151" Height="22" AnchorRight="41" AnchorBottom="276" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
<Control Type="1" FieldId="txtLPID" Attr="2" KeyField="0" MaskInput="0" Required="1">
<Layouts>
<Layout PageNo="1" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="16" Top="44" Width="39" Height="22" AnchorRight="185" AnchorBottom="254" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="LP#:" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="3" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="48" Top="44" Width="127" Height="22" AnchorRight="65" AnchorBottom="254" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
<Control Type="10" FieldId="lblLPDesc" Attr="3">
<Layouts>
<Layout PageNo="1" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="48" Top="88" Width="79" Height="22" AnchorRight="113" AnchorBottom="210" BackColor1="000001" BackColor2="000001" ForeColor="00FFFF" Caption="lblLPDesc" />
</Layout>
</Layouts>
</Control>
<Control Type="10" FieldId="lblLPQty" Attr="4">
<Layouts>
<Layout PageNo="1" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="48" Top="110" Width="71" Height="22" AnchorRight="121" AnchorBottom="188" BackColor1="000001" BackColor2="000001" ForeColor="00FFFF" Caption="lblLPQty" />
</Layout>
</Layouts>
</Control>
<Control Type="10" FieldId="lblLPLocn" Attr="5">
<Layouts>
<Layout PageNo="1" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="48" Top="66" Width="79" Height="22" AnchorRight="113" AnchorBottom="232" BackColor1="000001" BackColor2="000001" ForeColor="00FFFF" Caption="lblLPLocn" />
</Layout>
</Layouts>
</Control>
<Control Type="1" FieldId="txtNMCU" Attr="6" KeyField="0" MaskInput="0" Required="0">
<Layouts>
<Layout PageNo="1" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="0" Top="154" Width="79" Height="22" AnchorRight="161" AnchorBottom="144" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="To Plant:" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="3" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="72" Top="154" Width="143" Height="22" AnchorRight="25" AnchorBottom="144" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
<Control Type="1" FieldId="txtTOLOCN" Attr="7" KeyField="0" MaskInput="0" Required="1">
<Layouts>
<Layout PageNo="1" Visible="1">
<Label Anchor="3" AutoSize="1" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="8" Top="176" Width="71" Height="22" AnchorRight="161" AnchorBottom="122" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="To Locn:" />
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="3" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="72" Top="176" Width="143" Height="22" AnchorRight="25" AnchorBottom="122" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="0" />
</Layout>
</Layouts>
</Control>
<Control Type="12" FieldId="Frame1" Attr="8">
<Layouts>
<Layout PageNo="1" Visible="1" Style="2">
<Field Align="0" Anchor="3" AutoSize="0" BorderStyle="5" BackFill="0" FontSize="0" FontStyle="0" MultiLine="0" Left="8" Top="132" Width="215" Height="22" AnchorRight="17" AnchorBottom="166" BackColor1="000001" BackColor2="000001" ForeColor="000001" DisplayOnly="1" />
</Layout>
</Layouts>
</Control>
</Controls>
<Layouts>
<Layout Visible="1" FormWidth="240" FormHeight="320" Scrollbars="0">
<Label Align="1" AutoSize="2" FontSize="0" FontStyle="0" Width="0" Height="22" BackColor1="000001" BackColor2="000001" ForeColor="000001" Caption="[LP - Transfer Location]" />
<Field AutoSize="0" BorderStyle="3" DropShadow="1" FontSize="0" FontStyle="0" BackColor1="000001" BackColor2="000001" ForeColor="000001" />
</Layout>
</Layouts>
</Form>
</Record>
<Code>
' -------------------------------------------------------------------------------
' | (C)opyright 2003-2012 The DataMAX Software Group, Inc., All Rights Reserved.|
' | RFgen JD Edwards Integration Suite Vers.# 420                               |
' -------------------------------------------------------------------------------
'
' LICENSE PLATES: TRANSFER LOCATION
'
' NOTES:
'
' MODIFICATION HISTORY:
'
Option Explicit

Private Const cTRANDESC = "LP Transfer"
Private Const cTNId     = "FLPTL0100"
'
Private msPgm        As String
Private msVersion    As String
Private msDOCTYPE    As String
Private msAllowHold  As String
Private gsLPSource   As String
Private miMoveCtr    As Integer
Private msMoveItems  As String
Private msMoveQtys   As String
Private msMoveUoms   As String
Private msMoveLotn   As String
Private msLocn       As String
Private msToLocn     As String
Private sOlderLots() As String
Private msDeleteLogs As String
Private mbCheckOldestLots As Boolean
Private msSchema     As String
Private mbSkipFIFO   As Boolean

Private Sub Form_GotFocus(ByRef Rsp As String, ByRef AllowChange As Boolean)
  On Error Resume Next
  '
  Dim iCN As Integer
  '
  iCN = App.PromptNo
  RFPrompt(iCN).BorderStyle = DisplayStandard
  RFPrompt(iCN).BackColor1 = cFieldFocusBC
  RFPrompt(iCN).ForeColor = cFieldFocusFC
End Sub

Private Sub Form_Load()
  On Error Resume Next
  '
  Dim sHeader As String
  Dim sLocn   As String
  '
  Call SetDisplay()
  '
  gsLPSource = SYS.GetProperty("LP", "SOURCE")
  '
  If (Len(gsLPSource)=0) Then
    App.MsgBox GetMsg(107)
    App.ExitForm
  End If
  '

  txtMCU.Visible = True
  txtLPID.Visible = False
  lblLPDesc.Caption = ""
  lblLPLocn.Caption = ""
  lblLPQty.Caption = ""
  Frame1.Visible = False
  txtNMCU.Visible = False
  txtTOLOCN.Visible = False

  mbSkipFIFO = False
  mbCheckOldestLots = False

  lblLPDesc.Caption = ""
  lblLPDesc.Label.BackColor1 = cFieldDefaultBC
  lblLPDesc.Label.ForeColor = cFieldDefaultFC
  '
  lblLPLocn.Caption = ""
  lblLPLocn.Label.BackColor1 = cFieldDefaultBC
  lblLPLocn.Label.ForeColor = cFieldDefaultFC
  '
  lblLPQty.Caption = ""
  lblLPQty.Label.BackColor1 = cFieldDefaultBC
  lblLPQty.Label.ForeColor = cFieldDefaultFC
  '
'  txtAccept.Visible = False

  ' Get Proc.Opt. Version from Menu
  msPgm     = App.GetValue("Pgm")
  msVersion = App.GetValue("Vers")
  '
  ' get DocType from Proc.Opt.
  msDOCTYPE = GetProcOpt(msPgm,msVersion,"1;1",sHeader)

  If gbPOError Then
    App.ExitForm
    Exit Sub
  End If
  '
  ' Default location if required from Menu
  '
  sLocn = Trim(UCase(App.GetValue("From")))
  If sLocn <> "NONE" And sLocn <> "" Then
    msLocn = sLocn
  End If
  sLocn = Trim(UCase(App.GetValue("To")))
  If sLocn <> "NONE" And sLocn <> "" Then
    msToLocn = sLocn
  End If

  'load schema to be used for queries that fail to auto load due to rfgen bug
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String

  ' If FIFO Flag set to false, skip FIFO
  If UCase(Trim(App.GetValue("FIFO"))) = "FALSE" Then mbSkipFIFO = True

  sSql = "select DRDL01 from F0005 where DRSY = '55' and DRRT = 'FI' and LTRIM(RTRIM(DRKY)) ='SCHEMA'"
  DB.Execute(sSql, sCols, sRows)

  If DB.Count(sRows) = 0 Then
    App.MsgBox("Failed to load DB Schema from UDC table")
  Else
    msSchema = Trim(DB.Extract(sCols, sRows, 1, "DRDL01"))
  End If
  
End Sub

Private Sub Form_LostFocus()
  On Error Resume Next
  '
  Dim iCN As Integer
  '
  iCN = App.PromptNo
  RFPrompt(iCN).BorderStyle = DisplayTransparent
  RFPrompt(iCN).BackColor1 = cFieldDefaultBC
  RFPrompt(iCN).ForeColor = cFieldDefaultFC
End Sub

Private Sub Form_OnUpdate(ByRef Cancel As Boolean)
  On Error Resume Next
  '
  Dim sITEM    As String
  Dim sLPArray As String
  Dim iArray   As Integer
  Dim iRow As Integer
  '
  iRow = 9
  '
  Screen.Print 0, iRow, "Processing...", False, True, True
  '
  '--------------------------------------------------------------------------
  ' Transfer LP
  '
  If gbCommitCtl Then DB.BeginTrans(gsLPSource)
  '
  Dim uLPOper As LPOper         ' LP Operation
  Dim uLP101 As LP101Data       ' create LP101 Structure
  Dim uLP102 As LP102Data       ' create LP101 Structure
  Call LP101_Reset(uLP101)      ' init LP101 Structure
  Call LP102_Reset(uLP102)      ' init LP102 Structure
  '
  uLP101.sLMLPID = App.GetValue("tmLPID")
  If Not X_LP101("I",uLP101) Then   ' Inquiry on LP101
    App.MsgBox(GetMsg(104))
    If gbCommitCtl Then DB.RollbackTrans(gsLPSource)
    GoTo LPDone
  End If
  '
  'Set the value for variables
  App.SetValue("LMCO"   ,App.GetValue("tmCO"))
  App.SetValue("LMMCU"  ,App.GetValue("tmMCU"))
  App.SetValue("tmNMCU" ,App.GetValue("tmNMCU"))
  App.SetValue("LMLOCN" ,App.GetValue("tmLOCN"))
  App.SetValue("tmNLOCN",App.GetValue("tmNLOCN"))
  '
  'Public Type LPOper
  uLPOper.sLPID      = App.GetValue("tmLPID")    ' LP ID Child
  uLPOper.sPALP      = App.GetValue("tmPALP")    ' LP ID Parent
  uLPOper.sFMCU      = App.GetValue("tmMCU")     ' from Plant
  uLPOper.sTMCU      = App.GetValue("tmNMCU")    ' to Plant
  uLPOper.sFLOCN     = App.GetValue("tmLOCN")    ' from Location
  uLPOper.sTLOCN     = App.GetValue("tmNLOCN")   ' to Location
  uLPOper.nQty       = App.GetValue("tmQty")     ' Operation Qty.
  uLPOper.bIsPlate   = True                      ' Plate or Item
  uLPOper.bDetach    = False                     ' remove item
  '
  'set the version for IT in LP_MoveExecute
  '
  App.SetValue("LPITVersion",msVersion)
  '
  sITEM = App.GetValue("tmLPID")
  '
  If Ext(gsLog,1) = "1" Then Call TranLog(cTNId, "1", "LP_MoveItems", "")
  If Not LP_ReadStructure(uLP101.sLMLPID, sLPArray) Then
    App.MsgBox GetMsg(44) & vbCrLf & SysErr.Description
    If Ext(gsLog,2) = "1" Then Call TranLog(cTNId, "2", "LP_MoveItems", "")
    If gbCommitCtl Then DB.RollbackTrans gsLPSource
    Exit Sub
  End If

  updateEmptyLPRecords(App.GetValue("tmLPID"))

  If Ext(gsLog,1) = "1" Then Call TranLog(cTNId, "1", "LP_MoveExecute", "")
  If Not LP_MoveExecute(uLPOper,uLP101,False , cTRANDESC, sLPArray) Then
    App.MsgBox GetMsg(44) & vbCrLf & SysErr.Description
    If Ext(gsLog,2) = "1" Then Call TranLog(cTNId, "2", "LP_MoveExecute", "")
    Call LP_MoveExecute(uLPOper,uLP101,True , cTRANDESC, sLPArray)
    If gbCommitCtl Then DB.RollbackTrans gsLPSource
    Exit Sub
  End If
  '
  If gbCommitCtl Then DB.CommitTrans(gsLPSource)
  LPDone:
  '--------------------------------------------------------------------------
  '
  Screen.Bell(1)

  txtMCU.Visible = True
  txtLPID.Visible = False
  lblLPDesc.Caption = ""
  lblLPLocn.Caption = ""
  lblLPQty.Caption = ""
  Frame1.Visible = False
  txtNMCU.Visible = False
  txtTOLOCN.Visible = False

End Sub

'Private Sub txtAccept_OnBackup(ByRef Cancel As Boolean)
'  On Error Resume Next
'  txtAccept.Visible = False
'End Sub

Private Sub txtMCU_OnBackup(ByRef Cancel As Boolean)
  On Error Resume Next
  '
  App.SetValue("tmCO",   "")
  App.SetValue("tmMCU",  "")
  App.SetValue("tmNMCU", "")
End Sub

Private Sub txtMCU_GotFocus(ByRef Rsp As String, ByRef AllowChange As Boolean)
  On Error Resume Next
  '
  If (Len(Rsp)=0) Then Rsp = GetDefaultMCU()
  If Len(Rsp) > 0 Then AllowChange = False
End Sub

Private Sub txtMCU_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next
  '
  Dim sMCU     As String
  Dim sCompany As String
  Dim sSql     As String
  Dim sCols    As String
  Dim sRows    As String

  Rsp = UCase(Trim(Rsp))
  '
  If (Len(Rsp)=0) Then Exit Sub
  '
  Cancel = True
  If Not Validate_BranchPlant(Rsp, sMCU, sCompany) Then Exit Sub
  '
  App.SetValue("tmCO",   sCompany)
  App.SetValue("tmMCU",  sMCU)
  App.SetValue("tmNMCU", sMCU)
  '
  txtNMCU.Defaults = Rsp
  txtLPID.Visible = True

  ' If you are not skipping FIFO, check UDC to see if BP requires FIFO logic
  If Not mbSkipFIFO Then
    sSql = "select DRKY from F0005 where DRSY = '55' and DRRT = 'FI' and LTRIM(RTRIM(DRKY)) ='" & Trim(sMCU) & "'"
    DB.Execute(sSql, sCols, sRows)

    If DB.Count(sRows) = 0 Then
      mbCheckOldestLots = False
    Else
      mbCheckOldestLots = True
    End If
  End If

  Cancel = False


  If msToLocn <> "" Then
    txtTOLOCN.Defaults = msToLocn
  End If

End Sub

Private Sub txtMCU_OnSearch(ByRef Rsp As String, ByRef Cancel As Boolean)
  On Error Resume Next
  '
  Cancel = Not Search_BranchPlant(Rsp)
End Sub

Private Sub txtLPID_OnBackup(ByRef Cancel As Boolean)
  On Error Resume Next
  '
  App.SetValue("tmLPID",  "")
  App.SetValue("tmTYPE",  "")
  App.SetValue("tmMCU",   "")         ' Parent MCU
  App.SetValue("tmLOCN",  "")         ' Parent Location
  '
  lblLPDesc.Caption = ""
  lblLPLocn.Caption = ""
  lblLPQty.Caption  = ""

  txtLPID.Visible = False

End Sub

Private Sub txtLPID_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next
  '
  Dim sSql    As String
  Dim sSql2   As String
  Dim sCols   As String
  Dim sCols2  As String
  Dim sRows   As String
  Dim sRows2  As String
  Dim sMCU    As String
  Dim sOwner  As String
  Dim sLocn   As String
  Dim x As Integer
  Dim y As Integer
  Dim z As Integer
  Dim sItemList As String
  Dim nNumItems As Integer
  Dim nTotalUnits As Integer
  Dim sDirectItems As String
  Dim nPos As Long
  Dim sFirstItem As String

  Dim uLP101    As LP101Data       ' create LP101 Structure
  '
  Rsp = UCase(Trim(Rsp))
  Cancel = True
  If (Len(Rsp)=0) Then Exit Sub
  '
  Call LP101_Reset(uLP101)      ' init LP101 Structure
  '
  uLP101.sLMLPID = Rsp
  If Not X_LP101("I",uLP101) Then   ' Inquiry on LP101
    App.MsgBox(GetMsg(104))
    Cancel = True
    Exit Sub
  End If
  If (Trim(uLP101.sLMMCU) <> Trim(App.GetValue("tmMCU"))) Then
    App.MsgBox("The Entered License Plate Is Not In The Selected Branch Plant")
    Cancel = True
    Exit Sub
  End If
  If (Val(Trim(uLP101.sLMRNXTR)) = 999) Then
      App.MsgBox("Cannot Transfer: Inventory on this License Plate does not exist in JDE.")
      Cancel = True
      Exit Sub
  End If
  If (Val(Trim(uLP101.sLMRNXTR)) >= 545) Then
      App.MsgBox("Can not transfer a picked license plate")
      Cancel = True
      Exit Sub
  End If
  sOwner = uLP101.sLMPALP
  '
  If (Len(uLP101.sLMPALP)>0) Then
    App.MsgBox(GetMsg(13) & sOwner)
    Exit Sub
  End If
  '
  lblLPDesc.Caption = uLP101.sLMDSC1
  lblLPLocn.Caption = uLP101.sLMLOCN
  '
  App.SetValue("tmLPID",  Rsp)
  App.SetValue("tmTYPE",  uLP101.sLMTYPE)
  App.SetValue("tmMCU",  uLP101.slmMCU)          ' Parent MCU
  App.SetValue("tmLOCN", uLP101.sLMLOCN)         ' Parent Location
  '

  '
  sMCU = App.GetValue("tmMCU")
  sLocn = uLP101.sLMLOCN
  '
'  lblLPDesc.Caption = uLP101.sLMDSC1
  lblLPLocn.Caption = FormatLocnDisplay(sLocn, sMCU)




  '

'  Calculate and Display inventory info about the Pallet

  sSql2 = "select LDLITM, sum(LDUORG) as EachSum from F55102 where LDLPID = '" & Rsp & "' group by LDLITM"
  DB.Execute(sSql2, sCols2, sRows2)
  If (DB.Count(sRows2) > 0 ) Then
    sDirectItems = "+ Items On Pallet.
  End If

  For x = 1 To DB.Count(sRows2)
    If Not (InStr(sItemList, DB.Extract(sCols2,sRows2,x,"LDLITM")&"***") > 0) Then
      sItemList = sItemList & DB.Extract(sCols2, sRows2, x, "LDLITM") & "***"
      nNumItems = nNumItems + 1
    End If

  Next x

'    sSQL = "select CIMCU, ABALPH from  F41001" & _
'         " inner join  F0101 on CIAN8 = ABAN8 order by CIMCU"

  '


  sSql = "select LMLPID from F55101 where LMPALP = '" & Rsp & "'"

  DB.Execute(sSql, sCols, sRows)
  nTotalUnits = DB.Count(sRows)
  For y = 1 To DB.Count(sRows)
    sSql2 = "select LDLITM, sum(LDUORG) as EachSum from F55102 where LDLPID = '" & DB.Extract(sCols, sRows, y, "LMLPID") & "' group by LDLITM"
    DB.Execute(sSql2, sCols2, sRows2)

    For x = 1 To DB.Count(sRows2)
      If Not (InStr(sItemList, DB.Extract(sCols2,sRows2,x,"LDLITM")&"***") > 0) Then
        sItemList = sItemList & DB.Extract(sCols2, sRows2, x, "LDLITM") & "***"
        nNumItems = nNumItems + 1
      End If
    Next x
  Next y

'  App.MsgBox(sItemList & " " & nNumItems)

  '
  If nNumItems > 1 Then
    lblLPDesc.Caption = nNumItems & " Items"
    lblLPQty.Caption = nTotalUnits & " Total Units " & sDirectItems
  Else
    nPos = InStr(sItemList, "***") - 1
    sFirstItem = Trim(Mid(sItemList, 1, nPos))
    sSql = "select  LDLITM, LDUORG, LDUOM from F55102 where LDLPID = '" & Rsp & "' "
    DB.Execute(sSql, sCols, sRows)
    lblLPDesc.Caption = sFirstItem '& " " & DB.Extract(sCols,sRows,1,"LDUORG") & " " & DB.Extract(sCols,sRows,1,"LDUOM")
    lblLPQty.Caption = nTotalUnits & " Total Units " & sDirectItems
  End If

  txtNMCU.Visible = True
  txtTOLOCN.Visible = True
  Frame1.Visible = True
  Cancel = False
End Sub

Private Sub txtLPID_OnSearch(ByRef Rsp As String, ByRef Cancel As Boolean)
  On Error Resume Next
  '
  Dim sSql As String
  Dim oList As New SearchList

  sSql = "Select LMLPID, LMTYPE, LMPSTB, LMDSC1 from F55101" & _
         " where LMMCU = '"& App.GetValue("tmMCU") &"' and LMPALP = '' order by LMLPID"
  '

  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "LPID", 11, CenterRight, True)
  oList.SetColumn(2, "Type",  4, CenterLeft, True)
  oList.SetColumn(3, "Sts",  03, CenterLeft, True)
  oList.SetColumn(4, "Desc", 20, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
End Sub

Private Sub txtNMCU_OnBackup(ByRef Cancel As Boolean)
  On Error Resume Next
  '
  App.SetValue("tmLPID",  "")
  App.SetValue("tmTYPE",  "")
  App.SetValue("tmMCU",   "")         ' Parent MCU
  App.SetValue("tmLOCN",  "")         ' Parent Location
  '
  lblLPDesc.Caption = ""
  lblLPLocn.Caption = ""
  lblLPQty.Caption  = ""
  txtNMCU.Visible = False
  App.SetValue("tmNMCU", "")
End Sub

Private Sub txtNMCU_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next
  '
  Dim sMCU     As String
  Dim sCompany As String
  '
  Rsp = UCase(Trim(Rsp))
  '
  If (Len(Rsp)=0) Then Exit Sub
  '
  Cancel = True
  If Not Validate_BranchPlant(Rsp, sMCU, sCompany) Then Exit Sub

  If Not mbCheckOldestLots Then GoTo SKIPLOTCHECK

  If Trim(Rsp) <> Trim(txtMCU.Text) Then
      'Check to make sure picking oldest lots

    'Check to make sure picking oldest lots

    Dim sSqlLP  As String
    Dim sColsLP As String
    Dim sRowsLP As String

    Dim sSqlConv   As String
    Dim sColsConv  As String
    Dim sRowsConv  As String

    Dim sSqlInv   As String
    Dim sColsInv  As String
    Dim sRowsInv  As String

    Dim sQty          As Long
    Dim i             As Integer
    Dim iCaseCount    As Long
    Dim sOldLotsArr() As String
    Dim sLOTN         As String
    Dim sCatCode      As String
    Dim sSqlCatCode   As String
    Dim sColsCatCode  As String
    Dim sRowsCatCode  As String
    Dim lCacheIndex   As Long
    Dim lDeleteCount  As Long
    Dim sOrigLOTN    As String

    Dim sSqlLOCN    As String
    Dim sRowsLOCN   As String
    Dim sColsLOCN   As String
    Dim lCounter    As Long
    Dim lLocnCount  As Long
    Dim lTotalCount As Long

    Dim sSqlCaseQty  As String
    Dim sColsCaseQty As String
    Dim sRowsCaseQty As String
    Dim lPalletQty   As Long
    Dim bOldestOnLpIsPalletQty As Boolean

    Dim lOldestLotQty As Long
    Dim bPalletQty    As Boolean
    Dim lAdjustedQty  As Long
    Dim c             As Long
    Dim arrAdjustedQty() As Long
    Dim lSolutionPallet  As Long
    Dim sLITM         As String
    Dim sLocn         As String
    Dim vRsp          As Variant
    Dim x             As Long
    Dim sLastItem     As String
    Dim sLotFilterLP  As String
    Dim bNotCaseControlled As Boolean

    bPalletQty = False

'    If Trim(App.User) = "wlg1" Then Stop

    'check for pallet qty of oldest lot.
    sSqlCaseQty = "with CTE as (" & _
                    " select LDLITM, LDUORG from F55101 inner join F55102 on LMLPID = LDLPID" & _
                    " where LMPALP = '" & Trim(txtLPID.Text) & "' and LDLOTN <> ' '" & _
                    " union All" & _
                    " Select LDLITM, LDUORG from F55101 inner Join F55102 On LMLPID = LDLPID" & _
                    " where LDLPID = '" & Trim(txtLPID.Text) & "' and LDLOTN <> ' ')" & _
                  " select LDLITM, SUM(LDUORG) as LDUORG from CTE" & _
                  " group by LDLITM"
    DB.Execute(sSqlCaseQty, sColsCaseQty, sRowsCaseQty)

    For i = 1 To DB.Count(sRowsCaseQty)
      sLITM = Trim(DB.Extract(sColsCaseQty,sRowsCaseQty, i, "LDLITM"))
      sQty  = DB.Extract(sColsCaseQty,sRowsCaseQty, i, "LDUORG")

      sSqlConv = "Select UMCONV/10000000  *" & _
                 " (Select UMCONV/10000000 from F41002" & _
                 " where UMITM = (Select IMITM from " & msSchema & "F4101 where IMLITM = '" & sLITM & "')" & _
                 " and UMUM = 'CA' and UMRUM = 'EA') as Qty" & _
                 " from F41002 where UMITM = (select IMITM from " & msSchema & "F4101 where IMLITM = '" & sLITM & "')" & _
                 " And UMUM = 'PL'" & _
                 " And UMRUM = 'CA'"
      DB.Execute(sSqlConv, sColsConv, sRowsConv)

      If DB.Count(sRowsConv) = 0 Then
        sSqlConv = "Select UMCONV/10000000 as Qty" & _
                 " from F41002 where UMITM = (select IMITM from F4101 where IMLITM = '" & sLITM & "')" & _
                 " And UMUM = 'PL'" & _
                 " And UMRUM = 'EA'"
        DB.Execute(sSqlConv, sColsConv, sRowsConv)
      End If

      lPalletQty = DB.Extract(sColsConv, sRowsConv, 1, "Qty")

      ' if item has a full pallet qty
      If sQty >= lPalletQty And lPalletQty > 0 Then
        bPalletQty = True

'        sSqlLP = "with z as (Select LDLITM, LMLOCN, LDLOTN, LDUORG from F55101 inner join F55102 on LMLPID = LDLPID" & _
'             " where LMPALP = '" & Trim(txtLPID.Text) & "'" & _
'             " union All" & _
'             " Select LDLITM, LMLOCN, LDLOTN, LDUORG from F55101 inner Join F55102 On LMLPID = LDLPID" & _
'             " where LDLPID = '" & Trim(txtLPID.Text) & "')," & _
'             " CTE As ( Select LDLOTN As OrigProductNumber,CAST(LDLOTN As VARCHAR(100)) As LDLOTN," & _
'             " LDLITM, LDUORG, LMLOCN from z" & _
'             " UNION All" & _
'             " Select OrigProductNumber,CAST(STUFF(LDLOTN, PATINDEX('%[^0-9]%',LDLOTN), 1, '')" & _
'             " AS VARCHAR(100)) AS LDLOTN, LDLITM, LDUORG, LMLOCN FROM CTE WHERE PATINDEX('%[^0-9]%', LDLOTN) > 0)" & _
'             " SELECT OrigProductNumber, LDLOTN, LDLITM, LMLOCN, SUM(LDUORG) as LDUORG" & _
'             " FROM CTE WHERE PATINDEX('%[^0-9]%', LDLOTN) = 0 And cast(LDLOTN As BIGINT) > 0 and LDLITM = '" & sLITM & "'" & _
'             " group by LMLOCN, LDLITM, OrigProductNumber, LDLOTN" & _
'             " order by LDLITM, LDLOTN
        sSqlLP = "with CTE as (Select LDLITM, LMLOCN, LDLOTN, LDUORG from F55101 inner join F55102 on LMLPID = LDLPID" & _
                 " where LMPALP = '" & Trim(txtLPID.Text) & "'" & _
                 " union All" & _
                 " Select LDLITM, LMLOCN, LDLOTN, LDUORG from F55101 inner Join F55102 On LMLPID = LDLPID" & _
                 " where LDLPID = '" & Trim(txtLPID.Text) & "')" & _
                 " SELECT LDLITM, LMLOCN, SUM(LDUORG) as LDUORG, LDLOTN, " & _
                 " (Case when IsNumeric(LDLOTN) = 1 Then CAST(substring(LDLOTN, 1, charindex('.', LDLOTN)-1) as INT) else 0 end) as BeginLOT," & _
                 " (Case when IsNumeric(LDLOTN) = 1 Then CAST(substring(LDLOTN, charindex('.', LDLOTN)+1, LEN(LDLOTN)) as INT) else 0 end) as EndLOT" & _
                 " FROM CTE WHERE (case when isNumeric(LDLOTN) = 1 then 1 else 0 end) = 1  and LDLITM = '" & sLITM & "'" & _
                 " and LDLOTN like '%.%'" & _
                 " group by LMLOCN, LDLITM, LDLOTN," & _
                 " (Case when IsNumeric(LDLOTN) = 1 Then CAST(substring(LDLOTN, 1, charindex('.', LDLOTN)-1) as INT) else 0 end)," & _
                 " (Case when IsNumeric(LDLOTN) = 1 Then CAST(substring(LDLOTN, charindex('.', LDLOTN)+1, LEN(LDLOTN)) as INT) else 0 end)" & _
                 " order by LDLITM, BeginLot, EndLot"
        DB.Execute(sSqlLP, sColsLP, sRowsLP)

        'first is oldest lot on pallet
        sOrigLOTN = Trim(DB.Extract(sColsLP, sRowsLP, 1, "LDLOTN"))
        sLOTN     = Trim(DB.Extract(sColsLP, sRowsLP, 1, "LDLOTN"))
        bOldestOnLpIsPalletQty = CLng(DB.Extract(sColsLP, sRowsLP, 1, "LDUORG")) >= lPalletQty
        lOldestLotQty = DB.Extract(sColsLP, sRowsLP, 1, "LDUORG")
        sLocn = Trim(DB.Extract(sColsLP, sRowsLP, 1, "LMLOCN"))

        If getOldestLotINV(App.GetValue("tmMCU"), sLITM, sLOTN, lPalletQty-1, "") Then
          For i = 1 To UBound(sOlderLots)
            sSqlInv = "With CTE As(" & _
                         " Select LMLOCN, LDLOTN, LMMCU, LDLITM, SUM(LDUORG) As LDUORG from" & Chr(10) & _
                         " (Select LMLOCN, LDLOTN, LMMCU, LDLITM, LDUORG from F55102 inner Join F55101 On LDLPID = LMLPID" & _
                         " where LMPALP =  '" & Trim(txtLPID.Text) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN = '" & sOlderLots(i,1) & "'" & _
                         " UNION ALL" & _
                         " Select LMLOCN, LDLOTN, LMMCU , LDLITM, LDUORG from F55102" & _
                         " inner Join F55101 On LDLPID = LMLPID" & _
                         " where LDLPID =  '" & Trim(txtLPID.Text) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN =  '" & sOlderLots(i,1) & "'" & _
                         " ) As t1  group by LMLOCN, LDLOTN, LMMCU, LDLITM" & _
                         " )" & _
                     " Select IMLITM,  LILOCN, IMUOM1, LILOTN,  LILOTS" & _
                     " , (LIPQOH - LIPCOM - LIHCOM -  IsNull(LDUORG,0)*10000) As Count from F41021" & _
                     " inner Join F4101 On IMITM = LIITM" & _
                     " Left Join CTE On LILOCN = LMLOCN And LILOTN = LDLOTN" & _
                     " And LIMCU = LMMCU And IMLITM = LDLITM" & _
                     " where LILOTN = '" & sOlderLots(i,1) & "'" & _
                     " and IMLITM = '" & sLITM & "'" & _
                     " and  (LIPQOH - LIPCOM - LIHCOM -  isnull(LDUORG,0)*10000) >= " & lPalletQty * 10000 & _
                     " and  (LIPQOH - LIPCOM - LIHCOM -  isnull(LDUORG,0)*10000) > 0"  & _
                     " and LIMCU = '%tmMCU'" & _
                     " order by LILOTN, Count desc"
            DB.Execute(sSqlInv, sColsInv, sRowsInv)

            If DB.Count(sRowsInv) = 0 Then
              GoTo OLDEST_ON_PALLET1
            End If

            'get count, subtract whats cached...is still pallet qty? If no try next one

            ' if there is a result, then there is location with older lot and pallet qty robb

            ReDim arrAdjustedQty(DB.Count(sRowsInv),1)
            lSolutionPallet = 0

            For c = 1 To DB.Count(sRowsInv)

              lAdjustedQty = DB.Extract(sColsInv, sRowsInv, c, "Count")
              lDeleteCount = 0

'              For lCacheIndex = 1 To mnCnt
'                If Trim(Ext(msValCache,02, lCacheIndex)) = sLITM _
'                And Trim(Ext(msValCache,07, lCacheIndex)) = sOlderLots(i,1) _
'                  And Trim(Ext(msValCache,04, lCacheIndex)) = Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) Then
'                  lDeleteCount = lDeleteCount + CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
'                End If
'              Next

              lAdjustedQty = lAdjustedQty - lDeleteCount
              arrAdjustedQty(c, 1) = lAdjustedQty/10000

              If lAdjustedQty/10000 >= lPalletQty And lSolutionPallet = 0 Then
                lSolutionPallet = c
              End If

            Next


            If arrAdjustedQty(lSolutionPallet, 1) >= lPalletQty Then
              c = lSolutionPallet

              sSqlCatCode = " Select I0AC29 from F554101C inner Join F4101 On I0ITM = IMITM where IMLITM = '" & sLITM & "'"
              DB.Execute(sSqlCatCode,sColsCatCode, sRowsCatCode)
              sCatCode = Trim(DB.Extract(sColsCatCode, sRowsCatCode, 1, "I0AC29"))

              If sCatCode = "Y" Then
                App.MsgBox("Error: Older lot " & sOlderLots(i,1) & " has a full pallet qty of " & _
                            arrAdjustedQty(c, 1) & " for item " & sLITM & _
                            " in location " & Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) & _
                            " This lot must be picked first.")
                Exit Sub
              End If

              vRsp = App.MsgBox("Warning: Older lot " & sOlderLots(i,1) & " has a full pallet qty of " & _
                            arrAdjustedQty(c, 1) & " for item " & sLITM & _
                            " in location " & Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) & ".",vbCustom, 2, "[Ignore][Cancel]")
              If vRsp = "Cancel" Then
                Cancel = True
                appendOrDeleteLogs("D")
                Exit Sub

              Else

                For lCounter = 1 To DB.Count(sRowsInv)

                  If arrAdjustedQty(lCounter, 1) < lPalletQty Then GoTo CONTINUE1

                  sSqlCatCode = "insert into RFOverride VALUES" & _
                            " ((select IMITM from F4101 where IMLITM = '" & sLITM & "')" & _
                            ", '" & sOrigLOTN & "'" & _
                            ", '" & sLocn & "'" & _
                            ", " & lOldestLotQty & _
                            ", 0" & _
                            ", '" & sOlderLots(i,1) & "'" & _
                            ", '" & Trim(DB.Extract(sColsInv, sRowsInv, lCounter, "LILOCN")) & "'" & _
                            ", " & arrAdjustedQty(lCounter,1) & _
                            ", ' '" & _
                            ", " & ConvDatetoJDE(Format(Now(),"MM/DD/YYYY")) & _
                            ", " & Format(Now(),"hhmmss")  & _
                            ", '" & App.User & "'" & _
                            ", 'LP-Tran')"
                  DB.Execute(sSqlCatCode)
                  appendOrDeleteLogs("A")

                  CONTINUE1:
                Next

              End If
            End If
            OLDEST_ON_PALLET1:
          Next
        End If

        If Not bOldestOnLpIsPalletQty Then

            sSqlInv = "With CTE As(" & _
                         " Select LMLOCN, LDLOTN, LMMCU, LDLITM, SUM(LDUORG) As LDUORG from" & Chr(10) & _
                         " (Select LMLOCN, LDLOTN, LMMCU, LDLITM, LDUORG from F55102 inner Join F55101 On LDLPID = LMLPID" & _
                         " where LMPALP =  '" & Trim(txtLPID.Text) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN = '" & sOrigLOTN & "'" & _
                         " UNION ALL" & _
                         " Select LMLOCN, LDLOTN, LMMCU , LDLITM, LDUORG from F55102" & _
                         " inner Join F55101 On LDLPID = LMLPID" & _
                         " where LDLPID =  '" & Trim(txtLPID.Text) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN =  '" & sOrigLOTN & "'" & _
                         " ) As t1  group by LMLOCN, LDLOTN, LMMCU, LDLITM" & _
                         " )" & _
                     " Select IMLITM,  LILOCN, IMUOM1, LILOTN,  LILOTS" & _
                     " , (LIPQOH - LIPCOM - LIHCOM -  IsNull(LDUORG,0)*10000) As Count from F41021" & _
                     " inner Join F4101 On IMITM = LIITM" & _
                     " Left Join CTE On LILOCN = LMLOCN And LILOTN = LDLOTN" & _
                     " And LIMCU = LMMCU And IMLITM = LDLITM" & _
                     " where LILOTN = '" & sOrigLOTN & "'" & _
                     " and IMLITM = '" & sLITM & "'" & _
                     " and  (LIPQOH - LIPCOM - LIHCOM -  isnull(LDUORG,0)*10000) >= " & lPalletQty * 10000 & _
                     " and  (LIPQOH - LIPCOM - LIHCOM -  isnull(LDUORG,0)*10000) > 0"  & _
                     " and LIMCU = '%tmMCU'" & _
                     " order by LILOTN, Count desc"
            DB.Execute(sSqlInv, sColsInv, sRowsInv)

            If DB.Count(sRowsInv) = 0 Then
              GoTo OLDEST_ON_PALLET2
            End If

            ReDim arrAdjustedQty(DB.Count(sRowsInv),1)
            lSolutionPallet = 0

            For c = 1 To DB.Count(sRowsInv)

              lAdjustedQty = DB.Extract(sColsInv, sRowsInv, c, "Count")
              lDeleteCount = 0

'              For lCacheIndex = 1 To mnCnt
'                If Trim(Ext(msValCache,02, lCacheIndex)) = sLITM _
'                And Trim(Ext(msValCache,07, lCacheIndex)) = sOrigLOTN _
'                  And Trim(Ext(msValCache,04, lCacheIndex)) = Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) Then
'                  lDeleteCount = lDeleteCount + CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
'                End If
'              Next

              lAdjustedQty = lAdjustedQty - lDeleteCount
              arrAdjustedQty(c, 1) = lAdjustedQty/10000

              If lAdjustedQty/10000 >= lPalletQty And lSolutionPallet = 0 Then
                lSolutionPallet = c
              End If

            Next

            ' if there is a result, then there is location with older lot and pallet qty
            If arrAdjustedQty(lSolutionPallet, 1) >= lPalletQty Then
              c = lSolutionPallet

              sSqlCatCode = " Select I0AC29 from F554101C inner Join F4101 On I0ITM = IMITM where IMLITM = '" & sLITM & "'"
              DB.Execute(sSqlCatCode,sColsCatCode, sRowsCatCode)
              sCatCode = Trim(DB.Extract(sColsCatCode, sRowsCatCode, 1, "I0AC29"))

              If sCatCode = "Y" Then
                App.MsgBox("Error: Older lot " & sOrigLOTN & " has a full pallet qty of " & _
                            arrAdjustedQty(c, 1) & " for item " & sLITM & _
                            " in location " & Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) & _
                            " This lot must be picked first.")
                Exit Sub
              End If

              vRsp = App.MsgBox("Warning: Oldest lot on pallet " & sOrigLOTN & " has a full pallet qty of " & _
                            arrAdjustedQty(c, 1) & " for item " & sLITM & _
                            " in location " & Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) & ".",vbCustom, 2, "[Ignore][Cancel]")
              If vRsp = "Cancel" Then
                Cancel = True
                appendOrDeleteLogs("D")
                Exit Sub
              Else

                For lCounter = 1 To DB.Count(sRowsInv)
                  If arrAdjustedQty(lCounter, 1) < lPalletQty Then GoTo CONTINUE2

                  sSqlCatCode = "insert into RFOverride VALUES" & _
                            " ((select IMITM from F4101 where IMLITM = '" & sLITM & "')" & _
                            ", '" & sOrigLOTN & "'" & _
                            ", '" & sLocn & "'" & _
                            ", " & lOldestLotQty & _
                            ", 0" & _
                            ", '" & sOrigLOTN & "'" & _
                            ", '" & Trim(DB.Extract(sColsInv, sRowsInv, lCounter, "LILOCN")) & "'" & _
                            ", " & arrAdjustedQty(lCounter, 1) & _
                            ", ' '" & _
                            ", " & ConvDatetoJDE(Format(Now(),"MM/DD/YYYY")) & _
                            ", " & Format(Now(),"hhmmss")  & _
                            ", '" & App.User & "'" & _
                            ", 'LP-Tran')"
                  DB.Execute(sSqlCatCode)
                  appendOrDeleteLogs("A")

                  CONTINUE2:
                Next
              End If
            End If
            OLDEST_ON_PALLET2:
          End If
      End If

    Next

'If Trim(App.User) = "wlg1" Then Exit Sub


    If bPalletQty Then GoTo SKIPCASEVALIDATION


    'Get all lot controlled items on LP and order by item, oldestLot
'    sSqlLP = "with z as (Select LDLITM, LMLOCN, LDLOTN, LDUORG from F55101 inner join F55102 on LMLPID = LDLPID" & _
'             " where LMPALP = '" & Trim(txtLPID.Text) & "'" & _
'             " union All" & _
'             " Select LDLITM, LMLOCN, LDLOTN, LDUORG from F55101 inner Join F55102 On LMLPID = LDLPID" & _
'             " where LDLPID = '" & Trim(txtLPID.Text) & "')," & _
'             " CTE As ( Select LDLOTN As OrigProductNumber,CAST(LDLOTN As VARCHAR(100)) As LDLOTN," & _
'             " LDLITM, LDUORG, LMLOCN from z" & _
'             " UNION All" & _
'             " Select OrigProductNumber,CAST(STUFF(LDLOTN, PATINDEX('%[^0-9]%',LDLOTN), 1, '')" & _
'             " AS VARCHAR(100)) AS LDLOTN, LDLITM, LDUORG, LMLOCN FROM CTE WHERE PATINDEX('%[^0-9]%', LDLOTN) > 0)" & _
'             " SELECT distinct * FROM CTE WHERE PATINDEX('%[^0-9]%', LDLOTN) = 0 And cast(LDLOTN As BIGINT) > 0" & _
'             " order by LDLITM, LDLOTN, LDUORG

    sSqlLP = "with CTE as (Select LDLITM, LMLOCN, LDLOTN, LDUORG from F55101 inner join F55102 on LMLPID = LDLPID" & _
                     " where LMPALP = '" & Trim(txtLPID.Text) & "'" & _
                     " union All" & _
                     " Select LDLITM, LMLOCN, LDLOTN, LDUORG from F55101 inner Join F55102 On LMLPID = LDLPID" & _
                     " where LDLPID = '" & Trim(txtLPID.Text) & "')" & _
                     " SELECT LDLITM, LMLOCN, SUM(LDUORG) as LDUORG, LDLOTN, " & _
                     " (Case when IsNumeric(LDLOTN) = 1 Then CAST(substring(LDLOTN, 1, charindex('.', LDLOTN)-1) as INT) else 0 end) as BeginLOT," & _
                     " (Case when IsNumeric(LDLOTN) = 1 Then CAST(substring(LDLOTN, charindex('.', LDLOTN)+1, LEN(LDLOTN)) as INT) else 0 end) as EndLOT" & _
                     " FROM CTE WHERE (case when isNumeric(LDLOTN) = 1 then 1 else 0 end) = 1  and LDLITM = '" & sLITM & "'" & _
                     " and LDLOTN like '%.%'" & _
                     " group by LMLOCN, LDLITM, LDLOTN," & _
                     " (Case when IsNumeric(LDLOTN) = 1 Then CAST(substring(LDLOTN, 1, charindex('.', LDLOTN)-1) as INT) else 0 end)," & _
                     " (Case when IsNumeric(LDLOTN) = 1 Then CAST(substring(LDLOTN, charindex('.', LDLOTN)+1, LEN(LDLOTN)) as INT) else 0 end)" & _
                     " order by LDLITM, BeginLot, EndLot"

    DB.Execute(sSqlLP, sColsLP, sRowsLP)

    sLocn = Trim(DB.Extract(sColsLP, sRowsLP, 1, "LMLOCN"))


    For x = 1 To DB.Count(sRowsLP)
      sQty      = DB.Extract(sColsLP, sRowsLP, x, "LDUORG")
      sLOTN     = Trim(DB.Extract(sColsLP, sRowsLP, x, "LDLOTN"))
      sLITM     = Trim(DB.Extract(sColsLP, sRowsLP, x, "LDLITM"))
      sOrigLOTN = Trim(DB.Extract(sColsLP, sRowsLP, x, "LDLOTN"))
      bNotCaseControlled = False

      If sLITM <> sLastItem Then
        sLastItem = sLITM
        sLotFilterLP = ""

        sSqlConv = "select UMCONV from F41002 where UMUM = 'CA' and UMRUM = 'EA'" & _
                " and UMITM = (select IMITM from F4101 where IMLITM = '" & sLITM & "')"
        DB.Execute(sSqlConv, sColsConv, sRowsConv)

        iCaseCount = DB.Extract(sColsConv, sRowsConv, 1, "UMCONV") / 10000000
        If DB.Count(sRowsConv) = 0 Then bNotCaseControlled = True
      End If

      If sQty < iCaseCount Or bNotCaseControlled Then
        If getOldestLotINV(App.GetValue("tmMCU"), sLITM, sLOTN,,sLotFilterLP) Then
          For i = 1 To UBound(sOlderLots)

            sSqlInv = "With CTE As(" & _
                         " Select LMLOCN, LDLOTN, LMMCU, LDLITM, SUM(LDUORG) As LDUORG from" & Chr(10) & _
                         " (Select LMLOCN, LDLOTN, LMMCU, LDLITM, LDUORG from F55102 inner Join F55101 On LDLPID = LMLPID" & _
                         " where LMPALP =  '" & Trim(txtLPID.Text) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN = '" & sOlderLots(i,1) & "'" & _
                         " UNION ALL" & _
                         " Select LMLOCN, LDLOTN, LMMCU , LDLITM, LDUORG from F55102" & _
                         " inner Join F55101 On LDLPID = LMLPID" & _
                         " where LDLPID =  '" & Trim(txtLPID.Text) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN =  '" & sOlderLots(i,1) & "'" & _
                         " ) As t1  group by LMLOCN, LDLOTN, LMMCU, LDLITM" & _
                         " )" & _
                     " Select IMLITM,  LILOCN, IMUOM1, LILOTN,  LILOTS" & _
                     " , (LIPQOH - LIPCOM - LIHCOM -  IsNull(LDUORG,0)*10000) As Count from F41021" & _
                     " inner Join F4101 On IMITM = LIITM" & _
                     " Left Join CTE On LILOCN = LMLOCN And LILOTN = LDLOTN" & _
                     " And LIMCU = LMMCU And IMLITM = LDLITM" & _
                     " where LILOTN = '" & sOlderLots(i,1) & "'" & _
                     " and IMLITM = '" & sLITM & "'" & _
                     " and  (LIPQOH - LIPCOM - LIHCOM -  isnull(LDUORG,0)*10000) > 0"  & _
                     " and LIMCU = '%tmMCU'" & _
                     " order by LILOTN, Count desc"
            DB.Execute(sSqlInv, sColsInv, sRowsInv)

            If DB.Count(sRowsInv) = 0 Then
              GoTo OLDEST_ON_PALLET3
            End If

            lTotalCount = 0
            lLocnCount = DB.Count(sRowsInv)

            For lCacheIndex = 1 To lLocnCount
              lTotalCount = lTotalCount + DB.Extract(sColsInv, sRowsInv, lCacheIndex, "Count")
            Next

            ' Delete count of cached picks
            lDeleteCount = 0
'            For lCacheIndex = 1 To mnCnt
'              If Trim(Ext(msValCache,02, lCacheIndex)) = sLITM _
'              And Trim(Ext(msValCache,07, lCacheIndex)) = sOlderLots(i,1) Then
'                lDeleteCount = lDeleteCount + CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
'              End If
'            Next

            sOlderLots(i,2) = CStr(lTotalCount - lDeleteCount)

            sSqlCatCode = " Select I0AC29 from F554101C inner Join F4101 On I0ITM = IMITM where IMLITM = '" & sLITM & "'"
            DB.Execute(sSqlCatCode,sColsCatCode, sRowsCatCode)
            sCatCode = Trim(DB.Extract(sColsCatCode, sRowsCatCode, 1, "I0AC29"))

            If CLng(sOlderLots(i,2))/10000 > 0 Then
              If sCatCode = "Y" Then
                App.MsgBox("Error: Older lot " & sOlderLots(i,1) & " has a qty of " & _
                            CLng(sOlderLots(i,2))/10000 & " for item " & sLITM & " This lot must be picked first.")
                Exit Sub
              End If

              vRsp = App.MsgBox("Warning: Older lot " & sOlderLots(i,1) & " has a qty of " & _
                            CLng(sOlderLots(i,2))/10000 & " for item " & sLITM & " in " & lLocnCount & " locations.",vbCustom, 2, "[Ignore][Cancel][Find Lot]")
              If vRsp = "Cancel" Then
                appendOrDeleteLogs("D")
                Cancel = True
                Exit Sub
              ElseIf vRsp = "FindLot" Then
                appendOrDeleteLogs("D")
                App.CallForm("FIMQI0101_AMS -valITEM=" & sLITM  & _
                           " -valLOTN=" & sOlderLots(i,1) & " -valMCU=" & App.GetValue("tmMCU") & _
                           " -valLPID=" & Trim(txtLPID.Text) & " -valCASE=FALSE",True, True,True)
                Exit Sub
              Else
                sLotFilterLP = sLotFilterLP & sOlderLots(i,1) & " "

                For lCounter = 1 To DB.Count(sRowsInv)

                  lAdjustedQty = DB.Extract(sColsInv, sRowsInv, lCounter, "Count")

'                  For lCacheIndex = 1 To mnCnt
'                    If Trim(Ext(msValCache,02, lCacheIndex)) = sLITM _
'                        And Trim(Ext(msValCache,07, lCacheIndex)) = sOlderLots(i,1) _
'                        And Trim(Ext(msValCache,04, lCacheIndex)) = Trim(DB.Extract(sColsInv, sRowsInv, lCounter, "LILOCN")) Then
'                      lDeleteCount = lDeleteCount + CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
'                    End If
'                  Next

                  lAdjustedQty = lAdjustedQty - lDeleteCount

                  If lAdjustedQty < 0 Then GoTo CONTINUE3

                  sSqlCatCode = "insert into RFOverride VALUES" & _
                            " ((select IMITM from F4101 where IMLITM = '" & sLITM & "')" & _
                            ", '" & sOrigLOTN & "'" & _
                            ", '" & sLocn & "'" & _
                            ", " & sQty & _
                            ", 0" & _
                            ", '" & sOlderLots(i,1) & "'" & _
                            ", '" & Trim(DB.Extract(sColsInv, sRowsInv, lCounter, "LILOCN")) & "'" & _
                            ", " & lAdjustedQty/10000 & _
                            ", ' '" & _
                            ", " & ConvDatetoJDE(Format(Now(),"MM/DD/YYYY")) & _
                            ", " & Format(Now(),"hhmmss")  & _
                            ", '" & App.User & "'" & _
                            ", 'LP-Tran')"
                  DB.Execute(sSqlCatCode)
                  appendOrDeleteLogs("A")

                  CONTINUE3:
                Next

              End If
            End If
            OLDEST_ON_PALLET3:
          Next
        End If
      Else
        'check for oldest lot with case qty
        If getOldestLotINV(App.GetValue("tmMCU"), sLITM, sLOTN,sQty -1, sLotFilterLP) Then 'minus one because in query > sqty
          For i = 1 To UBound(sOlderLots)

           sSqlInv = "With CTE As(" & _
                         " Select LMLOCN, LDLOTN, LMMCU, LDLITM, SUM(LDUORG) As LDUORG from" & Chr(10) & _
                         " (Select LMLOCN, LDLOTN, LMMCU, LDLITM, LDUORG from F55102 inner Join F55101 On LDLPID = LMLPID" & _
                         " where LMPALP =  '" & Trim(txtLPID.Text) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN = '" & sOlderLots(i,1) & "'" & _
                         " UNION ALL" & _
                         " Select LMLOCN, LDLOTN, LMMCU , LDLITM, LDUORG from F55102" & _
                         " inner Join F55101 On LDLPID = LMLPID" & _
                         " where LDLPID =  '" & Trim(txtLPID.Text) & "'" & _
                         " and LDLITM = '" & sLITM & "'" & _
                         " and LDLOTN =  '" & sOlderLots(i,1) & "'" & _
                         " ) As t1  group by LMLOCN, LDLOTN, LMMCU, LDLITM" & _
                         " )" & _
                     " Select IMLITM,  LILOCN, IMUOM1, LILOTN,  LILOTS" & _
                     " , (LIPQOH - LIPCOM - LIHCOM -  IsNull(LDUORG,0)*10000) As Count from F41021" & _
                     " inner Join F4101 On IMITM = LIITM" & _
                     " Left Join CTE On LILOCN = LMLOCN And LILOTN = LDLOTN" & _
                     " And LIMCU = LMMCU And IMLITM = LDLITM" & _
                     " where LILOTN = '" & sOlderLots(i,1) & "'" & _
                     " and IMLITM = '" & sLITM & "'" & _
                     " and  (LIPQOH - LIPCOM - LIHCOM -  isnull(LDUORG,0)*10000) >= " & iCaseCount * 10000 & _
                     " and  (LIPQOH - LIPCOM - LIHCOM -  isnull(LDUORG,0)*10000) > 0"  & _
                     " and LIMCU = '%tmMCU'" & _
                     " order by LILOTN, Count desc"
            DB.Execute(sSqlInv, sColsInv, sRowsInv)

            If DB.Count(sRowsInv) = 0 Then
              GoTo OLDEST_ON_PALLET4
            End If

            lTotalCount = 0
            lLocnCount = DB.Count(sRowsInv)

            For lCacheIndex = 1 To lLocnCount
              lTotalCount = lTotalCount + DB.Extract(sColsInv, sRowsInv, lCacheIndex, "Count")
            Next

            ' delete cached picks count
'            For lCacheIndex = 1 To mnCnt
'              If Trim(Ext(msValCache,02, lCacheIndex)) = sLITM _
'              And Trim(Ext(msValCache,07, lCacheIndex)) = sOlderLots(i,1) Then
'                lDeleteCount = lDeleteCount + CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
'              End If
'            Next



            ReDim arrAdjustedQty(DB.Count(sRowsInv),1)
            lSolutionPallet = 0

            For c = 1 To DB.Count(sRowsInv)

              lAdjustedQty = DB.Extract(sColsInv, sRowsInv, c, "Count")
              lDeleteCount = 0

'              For lCacheIndex = 1 To mnCnt
'                If Trim(Ext(msValCache,02, lCacheIndex)) = sLITM _
'                And Trim(Ext(msValCache,07, lCacheIndex)) = sOlderLots(i,1) _
'                  And Trim(Ext(msValCache,04, lCacheIndex)) = Trim(DB.Extract(sColsInv, sRowsInv, c, "LILOCN")) Then
'                  lDeleteCount = lDeleteCount + CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
'                  lTotalCount = lTotalCount - CLng(Ext(msValCache, 05, lCacheIndex)) * 10000
'                End If
'              Next

              lAdjustedQty = lAdjustedQty - lDeleteCount
              arrAdjustedQty(c, 1) = lAdjustedQty/10000

              If lAdjustedQty/10000 >= iCaseCount And lSolutionPallet = 0 Then
                lSolutionPallet = c
              End If

            Next

            sOlderLots(i,2) = CStr(arrAdjustedQty(lSolutionPallet, 1))

            sSqlCatCode = " Select I0AC29 from F554101C inner Join F4101 On I0ITM = IMITM where IMLITM = '" & sLITM & "'"
            DB.Execute(sSqlCatCode,sColsCatCode, sRowsCatCode)
            sCatCode = Trim(DB.Extract(sColsCatCode, sRowsCatCode, 1, "I0AC29"))

            If CLng(sOlderLots(i,2)) >= iCaseCount Then
              If sCatCode = "Y" Then
                App.MsgBox("Error: Older lot " & sOlderLots(i,1) & " has a qty of " & _
                            lTotalCount/10000 & " for item " & sLITM & " This lot must be picked first.")
                Exit Sub
              End If

              vRsp = App.MsgBox("Warning: Older lot " & sOlderLots(i,1) & " has a qty of " & _
                            lTotalCount/10000 & " for item " & sLITM & " in " & lLocnCount & " locations.",vbCustom, 2, "[Ignore][Cancel][Find Lot]")
              If vRsp = "Cancel" Then
                appendOrDeleteLogs("D")
                Cancel = True
                Exit Sub
              ElseIf vRsp = "FindLot" Then
                appendOrDeleteLogs("D")
                App.CallForm("FIMQI0101_AMS -valITEM=" & sLITM  & _
                           " -valLOTN=" & sOlderLots(i,1) & " -valMCU=" & App.GetValue("tmMCU") & _
                           " -valLPID=" & Trim(txtLPID.Text) & " -valCASE=TRUE",True, True,True)
                Exit Sub
              Else
                sLotFilterLP = sLotFilterLP & sOlderLots(i,1) & " "

                For lCounter = 1 To DB.Count(sRowsInv)

                  If arrAdjustedQty(lCounter, 1) < iCaseCount Then GoTo CONTINUE4

                  sSqlCatCode = "insert into RFOverride VALUES" & _
                            " ((select IMITM from F4101 where IMLITM = '" & sLITM & "')" & _
                            ", '" & sOrigLOTN & "'" & _
                            ", '" & sLocn & "'" & _
                            ", " & sQty & _
                            ", 0" & _
                            ", '" & sOlderLots(i,1) & "'" & _
                            ", '" & Trim(DB.Extract(sColsInv, sRowsInv, lCounter, "LILOCN")) & "'" & _
                            ", " & arrAdjustedQty(lCounter, 1) & _
                            ", ' '" & _
                            ", " & ConvDatetoJDE(Format(Now(),"MM/DD/YYYY")) & _
                            ", " & Format(Now(),"hhmmss")  & _
                            ", '" & App.User & "'" & _
                            ", 'LP-Tran')"
                  DB.Execute(sSqlCatCode)
                  appendOrDeleteLogs("A")

                  CONTINUE4:
                Next

              End If
            End If
            OLDEST_ON_PALLET4:
          Next
        End If

      End If
    Next
  End If

  SKIPCASEVALIDATION:
  SKIPLOTCHECK:
  Cancel = False
  '
  App.SetValue("tmNMCU", sMCU)
End Sub

Private Sub txtNMCU_OnSearch(ByRef Rsp As String, ByRef Cancel As Boolean)
  On Error Resume Next
  '
  Cancel = Not Search_BranchPlant(Rsp)
End Sub

Private Sub txtTOLOCN_OnBackup(ByRef Cancel As Boolean)
  On Error Resume Next
  '
  App.SetValue("tmNLOCN", "")


  txtTOLOCN.Visible = False
End Sub

Private Sub txtTOLOCN_OnEnter(ByRef Rsp As String, ByRef Cancel As Boolean, ByRef ErrMsg As String)
  On Error Resume Next
  '
  Dim sMCU   As String
  Dim sLocnT As String
  Dim sLocnF As String
  '
  If (Len(Rsp)=0) Then Exit Sub
  Cancel = True
  '
  sMCU = App.GetValue("tmNMCU")
  If Not Validate_Locn(Rsp, sMCU, sLocnT) Then Exit Sub
  '
  sLocnF = App.GetValue("tmLOCN")
  '
  If (sLocnT = sLocnF) Then
    App.MsgBox GetMsg(216)
    Exit Sub
  End If
  '
  App.SetValue("tmNLOCN", sLocnT)
'  txtAccept.Visible = True
  Cancel = False
End Sub

Private Sub txtTOLOCN_OnSearch(ByRef Rsp As String, ByRef Cancel As Boolean)
  On Error Resume Next
  '
  Dim sMCU As String
  '
  sMCU = App.GetValue("tmNMCU")
  Cancel = Not Search_F4100(Rsp, "", sMCU)
End Sub

Private Function getOldestLotINV(ByVal sMCU As String, ByVal sITEM As String, ByVal sLOTN As String, Optional ByVal iCnt As Long, Optional ByVal sLotFilter) As Boolean
  Dim nLotValue  As Long
  Dim sLotParts() As String
  Dim sSqlItem   As String
  Dim sColsItem  As String
  Dim sRowsItem  As String
  Dim sITM       As String
  Dim cOldestLot As Currency
  Dim vRsp       As Variant
  Dim sNotIn     As String
  Dim sArr       As Variant
  Dim i          As Long
  Dim sReturnArr() As String
  Dim sBeginLOT  As String
  Dim sEndLOT    As String
  Dim nPeriodPos As Integer

  sMCU = FixRight(Trim(sMCU), 12)

  If iCnt > 0 Then
    iCnt = iCnt * 10000
  End If

  ReDim sOlderLots(0,0)
  sLotFilter = Trim(sLotFilter)

  If Trim(sLotFilter) <> "" Then
    sNotIn = " and LILOTN not in ("
    sArr = Split(sLotFilter," ")
    For i = 0 To UBound(sArr)
      sNotIn = sNotIn & "'" & sArr(i) & "'"
      If i <> UBound(sArr) Then
        sNotIn = sNotIn & ","
      End If
    Next
    sNotIn = sNotIn & ") "
  End If

  'find period pos
  nPeriodPos = InStr( 1,sLOTN, ".")
  sBeginLOT = Mid(sLOTN, 1, nPeriodPos - 1)
  sEndLOT = Mid(sLOTN, nPeriodPos + 1, Len(sLOTN))

    sSqlItem = "select IMITM from F4101 where IMLITM = '" & sITEM & "'"
    DB.Execute(sSqlItem, sColsItem, sRowsItem)
    If DB.Count(sRowsItem) > 0 Then
      sITM = Trim(DB.Extract(sColsItem, sRowsItem, 1, "IMITM"))
    End If

'      sSqlItem = "With CTE As (Select LILOTN As OrigProductNumber,CAST(LILOTN As VARCHAR(100))" & _
'                 " As LILOTN FROM F41021 WHERE LIMCU = '" & sMCU & "' and LIITM = " & _
'                   sITM & " and (LIPQOH -LIPCOM -LIHCOM) > " & iCnt   & sNotIn & _
'                 " UNION All Select OrigProductNumber,CAST(STUFF(LILOTN, PATINDEX('%[^0-9]%',LILOTN), 1, '')" & _
'                 " AS VARCHAR(100) ) AS LILOTN FROM CTE WHERE PATINDEX('%[^0-9]%', LILOTN) > 0)" & _
'                 " SELECT distinct * FROM CTE" & _
'                 " WHERE PATINDEX('%[^0-9]%', LILOTN) = 0" & _
'                 " And cast(LILOTN As BIGINT) > 0 and cast(LILOTN As BIGINT) < " & sLOTN & " order by LILOTN"
      sSqlItem = "Select DISTINCT LILOTN," & _
                 " (Case when IsNumeric(LILOTN) = 1 Then CAST(substring(LILOTN, 1, charindex('.', LILOTN)-1) as INT) else 0 end) as BeginLOT," & _
                 " (Case when IsNumeric(LILOTN) = 1 Then CAST(substring(LILOTN, charindex('.', LILOTN)+1, LEN(LILOTN)) as INT) else 0 end) as EndLOT" & _
                 " FROM F41021 WHERE LIMCU = '" & sMCU & "'" & _
                 " and LIITM = " & sITM & _
                 " and (LIPQOH -LIPCOM -LIHCOM) > " & iCnt & _
                 " and LILOTN like '%.%'" & _
                 " And (Case when IsNumeric(LILOTN) = 1 Then 1 Else 0 End) = 1" & _
                 " And  (Case when IsNumeric(LILOTN) = 1 Then CAST(substring(LILOTN, 1, charindex('.', LILOTN)-1) as INT) else 0 end) <= " & sBeginLOT & _
                 " And (Case when IsNumeric(LILOTN) = 1 Then CAST(substring(LILOTN, charindex('.', LILOTN)+1, LEN(LILOTN)) as INT) else 0 end) < " & sEndLOT & _
                  sNotIn & _
                 " order by BeginLOT, EndLOT"

      DB.Execute(sSqlItem, sColsItem, sRowsItem)

      If(DB.Count(sRowsItem)) = 0 Then
        getOldestLotINV = False
        Exit Function
      End If


      ReDim sOlderLots(DB.Count(sRowsItem),2)

      For i = 1 To DB.Count(sRowsItem)
        sOlderLots(i, 1) = Trim(DB.Extract(sColsItem,sRowsItem, i,"LILOTN"))
      Next

      getOldestLotINV = True

End Function

Private Function appendOrDeleteLogs(ByVal sKey As String)
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String

  If sKey = "D" And Trim(msDeleteLogs) = "" Then Exit Function

  If Trim(UCase(sKey)) = "A" Then

    sSql = "select MAX(IEID) as IEID from RFOverride where IEUSER = '" & App.User & "'"
    DB.Execute(sSql, sCols, sRows)

    If Trim(msDeleteLogs) = "" Then
      msDeleteLogs = DB.Extract(sCols, sRows, 1, "IEID")
    Else
      msDeleteLogs = msDeleteLogs & ", " &  DB.Extract(sCols, sRows, 1, "IEID")
    End If
    Exit Function

  ElseIf Trim(UCase(sKey)) = "D" Then
    sSql = "delete from RFOverride where IEID in (" & msDeleteLogs & ")"
    DB.Execute(sSql)
    msDeleteLogs = ""
  End If
End Function

' Remove parent(LMPALP) reference from child records on LP Master(F55101) if no Detail(F55102) record exists
Private Function updateEmptyLPRecords(ByVal sLPID As String)
  Dim sSql  As String

  ' Get all children of parent
  sSql = "update t1 set t1.LMPALP = ' ' from " & msSchema & "F55101 t1 left join " & msSchema & "F55102 t2 on t1.LMLPID = t2.LDLPID" & _
         " where t1.LMPALP = '" & Trim(sLPID) & "'" & _
         " and t2.LDLPID is null"
  DB.Execute(sSql)

End Function
</Code>
