<Record FileDesc="RFgen Base Module" FileVersion="5.0.8.0" Desc="RFgen Base Module" RunAt="1" />
<Code>
' -------------------------------------------------------------------------------
' | (C)opyright 2003-2012 The DataMAX Software Group, Inc., All Rights Reserved.|
' | RFgen JD Edwards Integration Suite Vers.# 420                               |
' -------------------------------------------------------------------------------
'
' MODULES: RFgen.bas
'
' NOTES:
'
' MODIFICATION HISTORY:
'
' -------------------------------------------------------------------------------
Option Explicit

Global gbPOError           As Boolean           ' Indicates Proc.Option has changed and Exit form
Global gbQueueProcessing   As Boolean           ' true means process transactions in the queuing SYS. See SetDisplay() in JDE.bas
Global gbQLoadBal          As Boolean           ' true means that the queues are load balanced. See SetDisplay().
Global gsUserProp          As String            ' Users Properties if custom sign on.
Global gsPassword          As String            ' Users Password
Global gbCustUser          As Boolean           ' Custom User Management
Global gsDataSource        As String            ' Datasourcename to call Transaction macros
Global gsLPSource          As String            ' DB Source where LP tables are stored
Global gsLPID              As String            ' Parm LPID to pass back from sub calls
Global gsLog               As String            ' log level definition   'INS RBR 12/06/2006
Global gbLPSilent          As Boolean           ' ommit error messages in LP.bas
Global gsMsgText()         As String            ' RFgen Error Messages
Global gsLanguage(1000)    As String            ' RFgen Error Messages
Global gsValCache          As String
Global gsValP4112          As String
Global gsValP4113          As String
Global gsValP4114          As String
Global gsValP4205          As String
Global gsPrinter           As String
'
Private msDictCache        As String            ' Store decimal sizes in local cache to speed up processing
Private msERPType          As String            ' Stores the type of ERP connection
Private mvJPO              As Variant           ' Store values for JDE Processing Options
Private msPOCache          As String            ' Dynamic Array for Processing Options
Private msPOSave           As String            ' Dynamic Array for saved Processing Options
Private msTNId             As String            ' INS PH 12/06/06
Private msWhseUsers        As String
'
' Declare Environment Settings                   ' see SetEnvironment in JDE.bas
'
Global gsJDEVers         As String              ' Version J D Edwards
Global gsEnv             As String              ' control flag if Enviroment is set
Global gbIsE1            As Boolean             ' true means OneWorld, false means World(ScreenMapping)
Global gbNamedUser       As Boolean             ' true checks the password against JDE and signs on with
                                                ' the user / make RFgen password = ""
                                                ' set the ERP Connector, Connection Pooling to: Disabled,
                                                ' E1:    Login Mode: Delayed, StartUp Mode: Manual
                                                ' World: Login Mode: Normal,  StartUp Mode: Automatic
Global gbItemFrmLot                             ' return item from scanned lot number  (see Validate_Item)
Global gbCustomerMaster                         ' Customer Master (F0301/F03012)

Global giPwdExp          As Integer             ' # days for password expiration. 0 = off
Global giPwdLen          As Integer             ' # number of required characters for password
Global gbOracleJDE       As Boolean             ' True = JDE database is Oracle
Global gbOracleLP        As Boolean             ' True = LP database is Oracle
Global gbCommitCtl       As Boolean             ' True = Use commitment control on LP database.
'
' JDE World only
'
Global gsSMMain          As String              ' World: Define Screenmapping Main Menu
Global gsSMErr           As String              ' World: Define JDE Warnings here (Seperate by ";"
'
' Offline Inventory
'
Global gbOfflineEnabled  As Boolean             ' true means using offline inventory
Global gbTranServer      As Boolean             ' true means: this maschine runs as Central JDE Server, not in a remote location with replicated data
Global gsPoRel           As String              ' the version from JDE Connector
'
' Label Printing
'
Global gsLPSFolder       As String              ' Folder name for Print Server (LPS) files
Global gsLWLFolder       As String              ' Folder name for Label format files.
'
' RFgen License Plate Labels
'
Global gbLPPrePrnt       As Boolean             ' True = LP Lables are pre printed
Global gsLPLead          As String              ' Indicate the leading characters on pre printed LP Labels. Make "" if none
Global giLenLP           As Integer             ' max Width for License Plate number if NOT pre printed
'
' RFgen Search lists
'
Global giMinSearchLen    As Integer             ' min Width for generic search
Global giMaxSearchRows   As Integer             ' max number of rows to return in search lists
Global giLenItem         As Integer             ' max Width to show in search lists  'could be ITM, LITM or AITM depending on BranchPlant Constants
Global giLenLOCN         As Integer             ' max Width to show in search lists
Global giLenLOTN         As Integer             ' max Width to show in search lists
Global giLenQTY          As Integer             ' max Width to show in search lists
Global gbDemoMode        As Boolean             ' Demo mode allows to return values from search functions

'
' WhiteLight added Global variables for passing parameters between forms
'

Global gsMCU             As String
Global gsInquiryLPID            As String

'
' RFgen GUI
'
Public Const cFieldFocusBC    = vbWhite         ' Active prompt's background color
Public Const cFieldFocusFC    = vbBlack         ' Active prompt's foreground color
Public Const cFieldDefaultBC  = 1               ' InActive prompt's background color (1 = same as form bc)
Public Const cFieldDefaultFC  = vbYellow        ' InActive prompt's foreground color
Public Const cLabelDefaultFC  = vbYellow        ' Label foreground color
'
' Misc.
'
'Public Const cOI098          = "OI098"         ' Set path for offline inventory Files OI098
Public Const cOI098           = "OI099"         ' Test only because OI099 has a trigger to delete the OI001 records
Public Const cJDELogErrors    = True            ' Log BSFN Parameters upon an error condition
Public Const cJDELogPath      = "C:\RFGenJDE.Log"         ' Log path for BSFN error reporting
Public Const cPath As String  = "C:\Program Files\RFgen\" ' Path to RFgen Language Files
Public Const cRFPrt           = "FreePDF XP"    ' name Windows printer to print JDE Processing Options
Public Const cDemoGLDate      = ""              ' hardcode a date here to override using system date. XE Standalone only
Public Const cSMNamedUser     = True            ' named user constant for screen mapping host script
Public Const cChgPwdUserID    = "JDE"           ' AS400 user account to change passwords
Public Const cChgPwdUserPW    = "JDE"           ' AS400 user password to change passwords
Public Const cFormatJDE       = True            ' format values in LP tables JDE like
'
' Routines needed for inq. local registry for ADO Recordsset
'
 Public Const REG_SZ As Long            = 1
 Public Const REG_DWORD As Long         = 4

 Public Const HKEY_CLASSES_ROOT         = &H80000000
 Public Const HKEY_CURRENT_USER         = &H80000001
 Public Const HKEY_LOCAL_MACHINE        = &H80000002
 Public Const HKEY_USERS                = &H80000003

 Public Const ERROR_NONE                = 0
 Public Const ERROR_BADDB               = 1
 Public Const ERROR_BADKEY              = 2
 Public Const ERROR_CANTOPEN            = 3
 Public Const ERROR_CANTREAD            = 4
 Public Const ERROR_CANTWRITE           = 5
 Public Const ERROR_OUTOFMEMORY         = 6
 Public Const ERROR_ARENA_TRASHED       = 7
 Public Const ERROR_ACCESS_DENIED       = 8
 Public Const ERROR_INVALID_PARAMETERS  = 87
 Public Const ERROR_NO_MORE_ITEMS       = 259

 Public Const KEY_QUERY_VALUE           = &H1
 Public Const KEY_SET_VALUE             = &H2
 Public Const KEY_ALL_ACCESS            = &H3F

 Public Const REG_OPTION_NON_VOLATILE   = 0

 Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
 Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String,  ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions  As Long, ByVal samDesired As Long, ByVal lpSecurityAttributes As Long, ByRef phkResult As Long, ByRef lpdwDisposition As Long) As Long
 Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, ByRef phkResult As Long) As Long
 Declare Function RegQueryValueExString Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, ByRef lpType As Long, ByVal lpData As String, ByRef lpcbData As Long) As Long
 Declare Function RegQueryValueExLong Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As  String, ByVal lpReserved As Long, ByRef lpType As Long, ByRef lpData As Long, ByRef lpcbData As Long) As Long
 Declare Function RegQueryValueExNULL Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, ByRef lpType As Long, ByVal lpData As Long, ByRef lpcbData As Long) As Long
 Declare Function RegSetValueExString Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, ByVal lpValue As String, ByVal cbData As Long) As Long
 Declare Function RegSetValueExLong Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, ByRef lpValue As Long, ByVal cbData As Long) As Long
'
' -- RFgen global Functions and Modules for JDE Integration Suite  ----
'
' Set the Display of the form
'
Public Function SetDisplay()
  On Error Resume Next
  '
  If  GetUserInfo("Language") = "" Then
      App.SetDisplay("English" & App.ClientType)
  Else
      App.SetDisplay(Trim(GetUserInfo("Language")) & App.ClientType)
  End If
  '
End Function

' Convert Date to to JDE format: 05/05/2005 --> 105125
'
Public Function ConvDatetoJDE(ByVal sStdDate As String) As String
  On Error Resume Next
  '
  Dim iDays  As Integer
  Dim nYears As Long
  '
  iDays = CInt(DatePart("y", sStdDate))
  nYears = CLng(DatePart("yyyy", sStdDate)) - 1900
  '
  ConvDatetoJDE = Str((nYears * 1000) + iDays)
End Function
'
' Convert Date from JDE format: 105125 --> 05/05/2005
'
Public Function ConvJDEtoDate(ByVal sJdeDate As String) As String
  On Error Resume Next
  '
  Dim iDays  As Integer
  Dim nYears As Long
  Dim dDate  As Date
  '
  iDays = Val(Right(sJdeDate, 3))
  nYears = Fix(Val(sJdeDate)/1000)
  '
  dDate = CDate("1/1/1900")
  dDate = DateAdd("yyyy", nYears, dDate)
  dDate = DateAdd("y", iDays-1, dDate)
  '
  ConvJDEtoDate = Format(dDate, "mm/dd/yyyy")
End Function
'
' Unit Of Measure Conversion
'
Public Function ConvUOM(ByVal sITM As String, ByRef nQty As Currency, ByVal sFromUOM As String, ByVal sToUOM As String) As Boolean
  On Error Resume Next
  '
  Dim nFact As Currency
  Dim sStdUOM As String
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  '
  ' Convert directly?
  '
  sSql = "Select 1,UMCONV as CFact from F41002 " & _
         " where UMITM = " & sITM & " And UMRUM = '" & sFromUOM & "' and UMUM = '" & sToUOM & "' " & _
         " union all " & _
         " select 2,UCCONV as CFact from F41003 " & _
         " where UCRUM = '" & sFromUOM & "' and UCUM = '" & sToUOM & "' " & _
         " Order by 1"
  '
  DB.Execute(sSql,sCols,sRows)
  '
  If (Len(sRows) <> 0) Then
    nFact = CCur(DB.Extract(sCols, sRows, 1, "CFact")) / 10000000
    nQty = (nQty * nFact)
    GoTo UOMDone
  Else
    sSql = "Select 1,UMCONV as CFact from F41002 " & _
           " where UMITM = " & sITM & " And UMRUM = '" & sToUOM & "' and UMUM = '" & sFromUOM & "' " & _
           " union all " & _
           " select 2,UCCONV as CFact from F41003 " & _
           " where UCRUM = '" & sToUOM & "' and UCUM = '" & sFromUOM & "' " & _
           " Order by 1"
    DB.Execute(sSql,sCols,sRows)

    If (Len(sRows) <> 0) Then
      nFact = CCur(DB.Extract(sCols, sRows, 1, "CFact")) / 10000000
      nQty = (nQty / nFact)
      GoTo UOMDone
    End If
  End If
  '
  ' Retrive base UOM
  '
  sSql = "select IMUOM1 from  F4101 where IMITM = " & sITM
  DB.Execute(sSql,sCols,sRows)
  '
  If (Len(sRows) = 0) Then
    App.MsgBox(GetMsg(67))
    Exit Function
  End If
  '
  sStdUOM = DB.Extract(sCols, sRows, 1, "IMUOM1")
  '
  ' Convert to primary?
  '
  If (sFromUOM <> sStdUOM) Then
    sSql = "Select 1,UMCONV as CFact from  F41002" & _
           " where UMITM = " & sITM & " And UMUM = '" & sFromUOM & "' and UMRUM = '" & sStdUOM & "' " & _
           " union all " & _
           " select 2,UCCONV as CFact from  F41003" & _
           " where UCUM = '" & sFromUOM & "' and UCRUM = '" & sStdUOM & "' " & _
           " Order by 1"
    DB.Execute(sSql,sCols,sRows)
    '
    If (Len(sRows) <> 0) Then
      nFact = CCur(DB.Extract(sCols, sRows, 1, "CFact")) / 10000000
      nQty = (nQty * nFact)
    Else
      sSql = "Select 1,UMCONV as CFact from  F41002" & _
             " where UMITM = " & sITM & " And UMRUM = '" & sFromUOM & "' and UMUM = '" & sStdUOM & "' " & _
             " union all " & _
             " select 2,UCCONV as CFact from  F41003" & _
             " where UCRUM = '" & sFromUOM & "' and UCUM = '" & sStdUOM & "' " & _
             " Order by 1"
      DB.Execute(sSql,sCols,sRows)

      If (Len(sRows) = 0) Then
        App.MsgBox GetMsg(220) & sFromUOM & " -> " & sStdUOM
        Exit Function
      End If
      '
      nFact = CCur(DB.Extract(sCols, sRows, 1, "CFact")) / 10000000
      nQty = (nQty / nFact)
    End If
  End If
  '
  ' Convert to requested?
  '
  If (sToUOM <> sStdUOM) Then
    sSql = "Select 1,UMCONV as CFact from  F41002" & _
           " where UMITM = " & sITM & " And UMUM = '" & sStdUOM & "' and UMRUM = '" & sToUOM & "' " & _
           " union all " & _
           " select 2,UCCONV as CFact from  F41003" & _
           " where UCUM = '" & sStdUOM & "' and UCRUM = '" & sToUOM & "' " & _
           " Order by 1"
    DB.Execute(sSql,sCols,sRows)
    '
    If (Len(sRows) <> 0) Then
      nFact = CCur(DB.Extract(sCols, sRows, 1, "CFact")) / 10000000
      nQty = (nQty * nFact)
    Else
      sSql = "Select 1,UMCONV as CFact from  F41002" & _
             " where UMITM = " & sITM & " And UMRUM = '" & sStdUOM & "' and UMUM = '" & sToUOM & "' " & _
             " union all " & _
             " select 2,UCCONV as CFact from  F41003" & _
             " where UCRUM = '" & sStdUOM & "' and UCUM = '" & sToUOM & "' " & _
             " Order by 1"
      DB.Execute(sSql,sCols,sRows)

      If (Len(sRows) = 0) Then
        App.MsgBox GetMsg(220) & sStdUOM & " -> " & sToUOM
        Exit Function
      End If
      '
      nFact = CCur(DB.Extract(sCols, sRows, 1, "CFact")) / 10000000
      nQty = (nQty / nFact)
    End If
  End If
  '
UOMDone:
  ConvUOM = True
End Function
'
' Standard Unit Of Measure Conversion
'
Public Function ConvStdUOM(ByRef nQty As Currency, ByVal sFromUOM As String, ByVal sToUOM As String) As Boolean
  On Error Resume Next
  '
  Dim nFact As Currency
  Dim sStdUOM As String
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  '
  ' Convert directly?
  '
  sSql = "Select UCCONV as CFact from F41003 " & _
         " where UCRUM = '" & sFromUOM & "' and UCUM = '" & sToUOM & "' "
  DB.Execute(sSql,sCols,sRows)
  '
  If (Len(sRows) <> 0) Then
    nFact = CCur(DB.Extract(sCols, sRows, 1, "CFact")) / 10000000
    nQty = (nQty / nFact)
    GoTo UOMDone
  Else
    sSql = "Select UCCONV as CFact from F41003 " & _
           " where UCRUM = '" & sToUOM & "' and UCUM = '" & sFromUOM & "' "
    DB.Execute(sSql,sCols,sRows)

    If (Len(sRows) <> 0) Then
      nFact = CCur(DB.Extract(sCols, sRows, 1, "CFact")) / 10000000
      nQty = (nQty * nFact)
      GoTo UOMDone
    End If
  End If

UOMDone:
  ConvStdUOM = True
End Function
'
' This function takes a value like 40 and converts it to 40.00
' based upon the number of decimals specified in the users data dictionary
'
Public Function FormatDecimals(ByVal sDTAI As String, ByVal vValue As Variant) As String
  On Error Resume Next
  '
  Dim iFnd      As Integer
  Dim iDecCnt   As Integer
  Dim sFormat   As String
  ' find entry in cache
  '
  sDTAI = Trim(UCase(sDTAI))
  iFnd= Locate(sDTAI, msDictCache, 1)
  '
  If (iFnd <> 0) Then
    iDecCnt  = Val(Ext(msDictCache, 2, iFnd))
    sFormat  = Ext(msDictCache, 4, iFnd)
  Else
    Call CrtDDCache(sDTAI)
    iFnd= Locate(sDTAI, msDictCache, 1)
    iDecCnt  = Val(Ext(msDictCache, 2, iFnd))
    sFormat  = Ext(msDictCache, 4, iFnd)
  End If  '

  vValue = Round(vValue, iDecCnt)
  FormatDecimals = Format(CCur(vValue), sFormat)
End Function
'
' Formats Screen Input to JDE Display / File Format and
' also validates against F4100 if required
'
Public Function FormatLocnDisplay(ByVal sLOCN As String, ByVal sMCU As String) As String
  On Error Resume Next
  '
  Dim i          As Integer
  Dim iPos       As Integer
  Dim sSql       As String
  Dim sCols      As String
  Dim sRows      As String
  Dim sSepl      As String
  Dim sValue     As String
  Dim sLocnD     As String ' Display Format
  Dim sLocnF     As String ' File Format
  Dim sItemCtr   As String
  Dim iItemLen   As Integer
  Dim bItemRight As Boolean
  Dim bHasSeps   As Boolean
  Dim bChkLocn   As Boolean
  '
  ' get Branch/Plant constant
  '
  sSql = "select * from  F41001 where CIMCU = '" & sMCU & "'"
  DB.Execute(sSql, sCols, sRows)
  '
  sSepl =  Trim(DB.Extract(sCols, sRows, 1, "CISEPL"))  ' seperator
  If ((sSepl = " ") Or (sSepl = "")) Then sSepl = Chr(1)             ' in case it's blank or null the routine does not work
  '
  ' Parse location into elements
  '
  sLOCN = UCase(sLOCN)
  bHasSeps  = (InStr(sLOCN, sSepl) <> 0)
  iPos = 1
  '
  For i = 1 To 10
    sItemCtr   = FixRight(CStr(i), 2, "0")
    iItemLen   = Val(DB.Extract(sCols, sRows, 1, "CISE" & sItemCtr))           ' segment Width
    bItemRight = Trim((DB.Extract(sCols, sRows, 1, "CILR" & sItemCtr) = "R"))     ' segment adjustment left / right
    '
    If (iItemLen = 0) Then Exit For
    '
    If bHasSeps Then
      sValue = Trim(LField(sLOCN, sSepl, i))
    Else
      sValue = Trim(Mid(sLOCN, iPos, iItemLen))
      iPos = iPos + iItemLen
    End If
    '
    If (i>1) Then sLocnD = sLocnD & sSepl
    If bItemRight Then
      sLocnD = sLocnD & FixRight(sValue, iItemLen, " ")
      sLocnF = sLocnF & FixRight(sValue, iItemLen, " ")
    Else
      sLocnD = sLocnD & FixLeft(sValue, iItemLen, " ")
      sLocnF = sLocnF & FixLeft(sValue, iItemLen, " ")
    End If
  Next i
  '
  If sSepl = Chr(1) Then sLocnD = Replace(sLocnD,Chr(1)," ") ' in case it's blank the routine does not work
  FormatLocnDisplay = sLocnD
End Function
'
' This function takes a value from SQL like 4000 and converts it to 40.00
' based upon the number of decimals specified in the users data dictionary
'
Public Function ConvDecimalsFromSQL(ByVal sDTAI As String, ByVal vValue As Variant) As Currency
  On Error Resume Next
  '
  Dim iFnd As Integer
  Dim iDec As Integer
  '
  ' find entry in cache
  '
  sDTAI = Trim(UCase(sDTAI))
  iFnd= Locate(sDTAI, msDictCache, 1)
  '
  If (iFnd <> 0) Then
    iDec  = Val(Ext(msDictCache, 2, iFnd))
  Else
    Call CrtDDCache(sDTAI)
    iFnd= Locate(sDTAI, msDictCache, 1)
    iDec  = Val(Ext(msDictCache, 2, iFnd))
  End If
  '
  If (iDec>0) Then vValue = CCur(vValue) / (10 ^ iDec)
  '
  ConvDecimalsFromSQL = CCur(vValue)
End Function
'
' This function takes a value from SQL like 40.00 and converts it to 4000
' based upon the number of decimals specified in the users data dictionary
'
Public Function ConvDecimalsToSQL(ByVal sDTAI As String, ByVal vValue As Variant) As Currency
  On Error Resume Next
  '
  Dim iFnd  As Integer
  Dim iDec  As Currency

  ' replace decimal comma with decimal dot for the non US market
  If Mid$(CStr( 3 / 2),2,1) = "," Then vValue = Replace(vValue,".",",")
  '
  ' find entry in cache
  '
  sDTAI = Trim(UCase(sDTAI))
  iFnd= Locate(sDTAI, msDictCache, 1)
  '
  If (iFnd <> 0) Then
    iDec  = Val(Ext(msDictCache, 2, iFnd))
  Else
    Call CrtDDCache(sDTAI)
    iFnd= Locate(sDTAI, msDictCache, 1)
    iDec  = Val(Ext(msDictCache, 2, iFnd))
  End If
  '
  If (iDec>0) Then vValue = CCur(vValue) * (10 ^ iDec)
  '
  ConvDecimalsToSQL = CCur(vValue)
End Function
'
' Return decimal information based upon customers data dictionary
'
Public Function GetDecimals(ByVal sDTAI As String, ByRef iDecCnt As Integer, Optional ByRef nDecMult As Currency = 0, Optional ByRef sFormat As String = "")
  On Error Resume Next
  '
  Dim iFnd  As Integer
  '
  ' find entry in cache
  '
  sDTAI = Trim(UCase(sDTAI))
  iFnd= Locate(sDTAI, msDictCache, 1)
  '
  If (iFnd <> 0) Then
    iDecCnt  = Val(Ext(msDictCache, 2, iFnd))
    nDecMult = Val(Ext(msDictCache, 3, iFnd))
    sFormat  = Ext(msDictCache, 4, iFnd)
  Else
    Call CrtDDCache(sDTAI)
    iFnd= Locate(sDTAI, msDictCache, 1)
    iDecCnt  = Val(Ext(msDictCache, 2, iFnd))
    nDecMult = Val(Ext(msDictCache, 3, iFnd))
    sFormat  = Ext(msDictCache, 4, iFnd)
  End If
End Function
'
' Return Default Branch For User
'
Public Function GetDefaultMCU() As String
  On Error Resume Next
  '
  Dim sSql   As String
  Dim sCols  As String
  Dim sRows  As String
  Dim sValue As String
  '
  ' Is this option turned on for this user?
  sValue = Trim(UCase(GetUserInfo("PLANT")))
  '
  Select Case sValue
  Case "OFF"
    sValue = ""
    '
  Case "JDESRC"
    sSql = "select DLMCU from  F40095" & _
           " where DLTERM = '" & UCase(App.User) & "'"
    '
    DB.Execute(sSql, sCols, sRows)
    sValue = DB.Extract(sCols, sRows, 1, "DLMCU")
  End Select
  '
  GetDefaultMCU = sValue
End Function
'
' Return the JDE text description for an error number
'
Public Function GetErrorText(ByVal sErrId As String) As String
  On Error Resume Next
  '
  Dim emGetErrorText As New EmbeddedProc
  '
  emGetErrorText.Name = "GetErrorMessageGlossaryText"
  emGetErrorText.Param("ErrorMessageID") = sErrId
  emGetErrorText.Execute
  '
  GetErrorText = Left$(CStr(emGetErrorText.Param("GlossaryText_500Chars")),128)
  '
  Set emGetErrorText = Nothing
End Function
'
' Search for all valid branchplants
'
Public Function Search_BranchPlant(ByRef Rsp As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim oList As New SearchList
  '
  sSql = "select CIMCU, ABALPH from  F41001" & _
         " inner join  F0101 on CIAN8 = ABAN8 order by CIMCU"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Branch",      12, CenterLeft, True)
  oList.SetColumn(2, "Description", 20, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = Trim(oList.ShowList)
  '
  Search_BranchPlant = (Len(Rsp) > 0)
End Function
'
' Search for all valid UDC
'
Public Function Search_UDC(ByRef Rsp As String, ByVal sDRSY As String, ByVal sDRRT As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim oList As New SearchList
  '
  sSql = "select DRKY, DRDL01 from  F0005 where DRSY = '" & sDRSY & "'" & _
         " and DRRT = '" & sDRRT & "' order by DRKY"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Key",         10, CenterLeft, True)
  oList.SetColumn(2, "Description", 25, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  '
  Search_UDC = (Len(Rsp) > 0)
End Function
'
' Search for employees
'
Public Function Search_F0101_Employee(ByRef Rsp As String, ByVal sMCU As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim oList As New SearchList
  '
'  sSql = "select ABAN8, ABALPH from  F0101" & _
'         " where ABMCU = '" & sMCU & "' and ABAT1 = 'E' order by ABAN8"
  sSql = "select ABAN8, ABALPH from  F0101" & _
         " where ABAT1 = 'E' order by ABAN8"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Empl",         8, CenterRight, False)
  oList.SetColumn(2, "Description", 15, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  '
  Search_F0101_Employee = (Len(Rsp) > 0)
End Function
'
' Search for Carrier
'
Public Function Search_F0101_Carrier(ByRef Rsp As String) As Boolean
  On Error Resume Next
  '
  Dim sSql    As String
  Dim sValue  As String
  Dim oList   As New SearchList
  '
  sSql = "select ABALPH, ABAN8 from  F0101 where ABAT1 = 'TC' order by ABALPH"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Description", 20, CenterLeft, True)
  oList.SetColumn(2, "Carrier",      8, CenterRight, False)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  Rsp = LField(sValue, Chr(3), 2)
  Search_F0101_Carrier = (Len(Rsp) > 0)
End Function
'
' Search for employees
'
Public Function Search_F00191_Employee(ByRef Rsp As String, ByVal sMCU As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sValue As String
  Dim oList As New SearchList
  '
  sSql = "select CEDL01, CEKY from  F00191" & _
         " where CESY = '31' and CERT = 'ER' order by CEDL01"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Description", 20, CenterLeft, True)
  oList.SetColumn(2, "Empl",         8, CenterRight, False, 0)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  Rsp = LField(sValue, Chr(3), 2)
  Search_F00191_Employee = (Len(Rsp) > 0)
End Function
'
' Search Kanban Master by Status
'
Public Function Search_F3016(ByRef Rsp As String, ByVal sMCU As String, ByVal sStatus As String) As Boolean
  On Error Resume Next
  '
  Dim iDecKBQT As Integer
  Dim sSql  As String
  Dim oList As New SearchList
  '
  sSql = "Select KMKID1, KMLITM, KMKBQT, KMUOM from  F3016" & _
         " where KMKBST = '" & sStatus & "' and KMMMCU = '" & sMCU & "'" & _
         " order by KMKID1"
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"KMLITM","KMITM")
    Case 3
      sSql = Replace(sSql,"KMLITM","KMAITM")
    Case Else
  End Select
  '
  Call GetDecimals("KBQT", iDecKBQT)
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "ID",           8, CenterRight, True)
  oList.SetColumn(2, "Item", giLenItem, CenterLeft, True)
  oList.SetColumn(3, "Qty",   giLenQTY, CenterRight, True, iDecKBQT)
  oList.SetColumn(4, "UOM",          3, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F3016 = (Len(Rsp) > 0)
End Function
'
' Search Kanban Card Detail by DOCO
'
Public Function Search_F30161(ByRef Rsp As String, ByVal vKID1 As Variant) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim oList As New SearchList
  '
  sSql = "Select KDCDN from  F30161 where KDKID1 = " & vKID1 & _
         " order by KDCDN"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Card", 3, CenterRight, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F30161 = (Len(Rsp) > 0)
End Function
'
' Search Work Order Components by LITM
'
Public Function Search_F3111_LITM(ByRef Rsp As String, ByVal sFindLITM As String, ByVal vDOCO As Variant, ByRef sOPSQ As String) As Boolean
  On Error Resume Next
  '
  Dim iOPSQ  As Integer
  Dim iCPNB  As Integer
  Dim iUORG  As Integer
  Dim sSql   As String
  Dim sLike  As String
  Dim sValue As String
  Dim oList  As New SearchList
  '
  ' lookup using "Like%" ?
  '
  If (Len(sFindLITM)>0) Then
    If (Len(sFindLITM) < giMinSearchLen) Then
      App.MsgBox (giMinSearchLen & GetMsg(15))
      Search_F3111_LITM = True
      Exit Function
    End If
    '
    sLike = " and WMCPIL Like ('" & Trim(UCase(sFindLITM)) & "%%')"
  End If
  '
  If Len(sOPSQ) = 0 Then
    sSql = "Select WMCPNB, WMCPIL, WMUORG, WMUM, WMDSC1, WMOPSQ" & _
           " from  F3111 where WMDOCO = " & vDOCO & " and WMUORG > WMTRQT " & sLike & _
           " order by WMCPIL"
  Else
    sSql = "Select WMCPNB, WMCPIL, WMUORG, WMUM, WMDSC1" & _
           " from  F3111 where WMDOCO = " & vDOCO & " and WMOPSQ = '" & sOPSQ & "' and WMUORG > WMTRQT " & sLike & _
           " order by WMCPIL"
  End If
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"WMCPIL","WMCPIT")
    Case 3
      sSql = Replace(sSql,"WMCPIL","WMCPIA")
    Case Else
  End Select
  '
  Call GetDecimals("OPSQ", iOPSQ)
  Call GetDecimals("CPNB", iCPNB)
  Call GetDecimals("UORG", iUORG)
  '
  If gsJDEVers = "A9.2" Then
    sSql = Replace(sSql,"WMCPNB","WMCPNT")
    Call GetDecimals("CPNT", iCPNB)
  End If
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Line",         6, CenterRight, True, iCPNB)
  oList.SetColumn(2, "Item", giLenItem, CenterLeft, True)
  oList.SetColumn(3, "Qty",   giLenQTY, CenterRight, True, iUORG)
  oList.SetColumn(4, "UOM",          3, CenterLeft, True)
  oList.SetColumn(5, "Desc",        10, CenterLeft, True)
  '
  If Len(sOPSQ) = 0 Then
    oList.SetColumn(6, "Seq",       8, CenterRight, True, iOPSQ)
  End If
  '
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp = LField(sValue, Chr(3), 2)
  '
  If Len(sOPSQ) = 0 Then
    sOPSQ = LField(sValue, Chr(3), 6)
  End If
  '
  Search_F3111_LITM = (Len(Rsp) > 0)
  '
  If Not gbDemoMode Then Rsp = ""
  '
End Function
'
' Search Work Order Routing by DOCO
'
Public Function Search_F3112(ByRef Rsp As String, ByVal sMCU As String, ByVal vDOCO As Variant, ByVal sDCTO As String) As Boolean
  On Error Resume Next
  '
  Dim iDecOPSQ As Integer
  Dim sSql     As String
  Dim oList    As New SearchList
  '
  sSql = "Select WLOPSQ, WLDSC1 from  F3112" & _
         " where WLDOCO = " & vDOCO & " and WLDCTO = '" & sDCTO & "' and WLMMCU = '" & sMCU & "'" & _
         " order by WLOPSQ "
  '
  Call GetDecimals("OPSQ", iDecOPSQ)
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Seq",   8, CenterRight, True, iDecOPSQ)
  oList.SetColumn(2, "Desc", 15, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F3112 = (Len(Rsp) > 0)
End Function
'
' Search for possible locations
'
Public Function Search_F4100(ByRef Rsp As String, ByVal sFindLOCN As String, ByVal sMCU As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sLike As String
  Dim oList As New SearchList
  '
  ' lookup using "Like%" ?
  '
  If (Len(sFindLOCN)>0) Then
    If (Len(sFindLOCN) < giMinSearchLen) Then
      App.MsgBox (giMinSearchLen & GetMsg(15))
      Search_F4100 = True
      Exit Function
    End If
    '
    sLike = " and LMLOCN Like ('" & Trim(UCase(sFindLOCN)) & "%%')"
  End If
  '
  sSql = "select LMLOCN from  F4100 where LMMCU = '" & sMCU & "'" & _
         sLike & " order by LMLOCN"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Location", giLenLOCN, CenterLeft, False)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F4100 = (Len(Rsp) > 0)
  '
  If Not gbDemoMode Then Rsp = ""
  '
End Function
'
' Search for inventory items
'
Public Function Search_F4101(ByRef Rsp As String, ByVal sFindLITM As String, ByVal sMCU As String) As Boolean
  On Error Resume Next
  '
  Dim sSql   As String
  Dim sWhere As String
  Dim oList  As New SearchList
  '
  If (Len(sMCU)>0) Then
    If (Len(sWhere)>0) Then sWhere = sWhere & " and"
    sWhere = sWhere & " IBMCU = '" & sMCU & "'"
  End If
  '
  If (Len(sFindLITM)>0) Then
    If (Len(sFindLITM) < giMinSearchLen) Then
      App.MsgBox (giMinSearchLen & GetMsg(15))
      Search_F4101 = True
      Exit Function
    End If
    '
    If (Len(sWhere)>0) Then sWhere = sWhere & " and"
    sWhere = sWhere & " IMLITM Like ('" & Trim(UCase(sFindLITM)) & "%%')"
  End If
  '
  If (Len(sWhere)>0) Then sWhere = " where" & sWhere
  '
  sSql = "select IMLITM, IMDSC1 from  F4101" & _
         " inner join  F4102 on IMITM = IBITM" & _
         sWhere & " order by IMLITM"
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"IMLITM","IMITM")
    Case 3
      sSql = Replace(sSql,"IMLITM","IMAITM")
    Case Else
  End Select
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Item",        giLenItem, CenterLeft, True)
  oList.SetColumn(2, "Description",        15, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F4101 = (Len(Rsp) > 0)
  '
  If Not gbDemoMode Then Rsp = ""
  '
End Function
'
' Search for lots
'
Public Function Search_F41021(ByRef Rsp As String, ByVal sFindLOCN As String, ByVal sMCU As String, ByVal vITM As Variant, ByVal sLotn As String) As Boolean
  On Error Resume Next
  '
  Dim iDecPQOH As Integer
  Dim sSql     As String
  Dim sCols    As String
  Dim sRows    As String
  Dim sLike    As String
  Dim sLikOI   As String
  Dim sIPAdr   As String
  Dim oList    As New SearchList
  '
  ' In case DB is Oracle
  If gbOracleJDE Then
    If Len(Trim(slotn)) = 0 Then sLotn = " "
  End If

  Call GetDecimals("PQOH", iDecPQOH)
  '
  ' lookup using "Like%" ?
  '
  If (Len(sFindLOCN)>0) Then
    If (Len(sFindLOCN) < giMinSearchLen) Then
      App.MsgBox (giMinSearchLen & GetMsg(15))
      Search_F41021 = True
      Exit Function
    End If
    '
    sLike = " and LILOCN Like ('" & Trim(UCase(sFindLOCN)) & "%%')"
    sLikOI = " and ILLOCN Like ('" & Trim(UCase(sFindLOCN)) & "%%')"
  End If
  '
  If gbOfflineEnabled Then
    sIPAdr = "#Temp" & App.IpAddress      ' # = Temp File unique for each user
    sIPAdr = Replace (sIPAdr, ".", "")

    sSql = "If OBJECT_ID('" & sIPAdr & "') is not null drop table " & sIPAdr       ' if already exists by accident
    DB.Execute (sSql)

    sSql = "Select lilocn, LIPQOH, LILOTN, LILOTS INTO " & sIPAdr & " from  F41021 where " _
    & " LIMCU = '" & sMCU & "' and LIITM = " & vITM & " and LILOTN = '" & sLotn & "' and LIPQOH <> 0" & sLike & " "
    DB.Execute (sSql)

    sSql = "insert into " & sIPAdr & " Select ILLOCN, ILQTY1, ILLOTN, ILLOTS from OI001 where " _
    & " ILMCU = '" & sMCU & "' and ILITM = " & vITM & " and ILLOTN = '" & sLotn & "' " & sLike & "
    DB.Execute (sSql)

    sSql = "select LILOCN, LILOTN, LILOTS, sum(LIPQOH) from " & sIPAdr & " group by LILOCN, LILOTN, LILOTS"
  Else

    sSql = "select LILOCN, LIPBIN, LIPQOH, LILOTN, LILOTS" & _
           " from  F41021 where LIMCU = '" & sMCU & "' and LIITM = " & vITM & " and LILOTN = '" & sLotn & "'" & _
           " and LIPQOH <> 0" & sLike & "  order by LILOCN"
  End If
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Location", giLenLOCN, CenterLeft,False)
  oList.SetColumn(2, "P/S",              2, CenterLeft,True)
  oList.SetColumn(3, "Qty",       giLenQTY, CenterRight,True, iDecPQOH)
  oList.SetColumn(4, "Lot",      giLenLOTN, CenterLeft,True)
  oList.SetColumn(5, "Sts",              2, CenterLeft,True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F41021 = (Len(Rsp) > 0)

  If gbOfflineEnabled Then
    sSql = "If OBJECT_ID('" & sIPAdr & "') is not null drop table " & sIPAdr
    DB.Execute sSql
  End If
  '
  If Not gbDemoMode Then Rsp = ""
  '
End Function
'
' Search for LITM
'
Public Function Search_F41021_LOCN(ByRef Rsp As String, ByVal sFindLOCN As String, ByVal sMCU As String, ByVal vITM As Variant, ByRef sLot As String, Optional ByRef bAvail As Boolean) As Boolean
  On Error Resume Next
  '
  Dim iDecPQOH As Integer
  Dim sSql     As String
  Dim sCols    As String
  Dim sRows    As String
  Dim sLike    As String
  Dim sLikOI   As String
  Dim sIPAdr   As String
  Dim sValue   As String
  Dim sSQLStr  As String
  Dim oList    As New SearchList
  '
  Call GetDecimals("PQOH", iDecPQOH)
  '
  ' lookup using "Like%" ?
  '
  If (Len(sFindLOCN)>0) Then
    If (Len(sFindLOCN) < giMinSearchLen) Then
      App.MsgBox (giMinSearchLen & GetMsg(15))
      Search_F41021_LOCN = True
      Exit Function
    End If
    '
    sLike = " and LILOCN Like ('" & Trim(UCase(sFindLOCN)) & "%%')"
    sLikOI = " and ILLOCN Like ('" & Trim(UCase(sFindLOCN)) & "%%')"
  End If
  '
  If gbOfflineEnabled Then
    sIPAdr = "#Temp" & App.IpAddress      ' # = Temp File unique for each user
    sIPAdr = Replace (sIPAdr, ".", "")

    sSql = "If OBJECT_ID('" & sIPAdr & "') is not null drop table " & sIPAdr       ' if already exists by accident
    DB.Execute (sSql)

    If bAvail Then
      Call GetItemAvailSQL(sMCU, sSQLStr)
      '
      sSql = "Select LILOCN, " & sSQLStr & " as LIPQOH, LILOTN, LILOTS INTO " & sIPAdr & " from  F41021 where " _
      & " LIMCU = '" & sMCU & "' and LIITM = " & vITM & " and LIPQOH <> 0" & sLike & " "
    Else
      sSql = "Select LILOCN, LIPQOH, LILOTN, LILOTS INTO " & sIPAdr & " from  F41021 where " _
      & " LIMCU = '" & sMCU & "' and LIITM = " & vITM & " and LIPQOH <> 0" & sLike & " "
    End If
    '
    DB.Execute (sSql)

    sSql = "insert into " & sIPAdr & " Select ILLOCN, ILQTY1, ILLOTN, ILLOTS from OI001 where " _
    & " ILMCU = '" & sMCU & "' and ILITM = " & vITM & " " & sLike & "
    DB.Execute (sSql)

    sSql = "select LILOCN, LILOTN, LILOTS, sum(LIPQOH) from " & sIPAdr & " group by LILOCN, LILOTN, LILOTS"
  Else
    If bAvail Then
      Call GetItemAvailSQL(sMCU, sSQLStr)
      sSql = "Select LILOCN, " & sSQLStr & ", LILOTN, LILOTS from F41021 where LIMCU = '" & sMCU & "' and LIITM = " & vITM & " and " & sSQLStr & " <> 0 order by LILOCN"
    Else
      sSql = "select LILOCN, LIPQOH, LILOTN, LILOTS" & _
             " from  F41021 where LIMCU = '" & sMCU & "' and LIITM = " & vITM & " " & _
             " and LIPQOH <> 0" & sLike & "  order by LILOCN"
    End If
  End If
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Location", giLenLOCN, CenterLeft,False)
  oList.SetColumn(2, "Qty",       giLenQTY, CenterRight,True, iDecPQOH)
  oList.SetColumn(3, "Lot",      giLenLOTN, CenterLeft,True)
  oList.SetColumn(4, "Sts",              2, CenterLeft,True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp  = LField(sValue, Chr(3), 1)
  sLot = LField(sValue, Chr(3), 3)
  '
  Search_F41021_LOCN = (Len(Rsp) > 0)

  If gbOfflineEnabled Then
    sSql = "If OBJECT_ID('" & sIPAdr & "') is not null drop table " & sIPAdr
    DB.Execute sSql
  End If
  '
  If Not gbDemoMode Then
    Rsp  = ""
    sLot = ""
  End If
  '
End Function
'
' Search for lot locations
'
Public Function Search_F41021_LOTN(ByRef Rsp As String, ByVal sFindLOTN As String, ByVal sMCU As String, ByVal vITM As Variant, Optional ByRef sLOCN As String, Optional ByRef bAvail As Boolean) As Boolean
  On Error Resume Next
  '
  Dim sSql     As String
  Dim sWhere   As String
  Dim sSQLStr  As String
  Dim sValue   As String
  Dim iDecPQOH As Integer
  Dim oList    As New SearchList
  '
  ' In case DB is Oracle
  If gbOracleJDE Then
    If Len(sLOCN) = 0 Then sLOCN = " "
  End If

  Call GetDecimals("PQOH", iDecPQOH)
  '
  If (Len(sMCU)>0) Then
    If (Len(sWhere)>0) Then sWhere = sWhere & " and"
    sWhere = sWhere & " LIMCU = '" & sMCU & "'"
  End If
  '
  If (Len(vITM)>0) Then
    If (Len(sWhere)>0) Then sWhere = sWhere & " and"
    sWhere = sWhere & " LIITM = " & vITM
  End If
  '
  If (Len(sLOCN)>0) Then
    If (Len(sWhere)>0) Then sWhere = sWhere & " and"
    sWhere = sWhere & " LILOCN = '" & sLOCN & "' "
  End If
  '
  If (Len(sFindLOTN)>0) Then
    If (Len(sFindLOTN) < giMinSearchLen) Then
      App.MsgBox (giMinSearchLen & GetMsg(15))
      Search_F41021_LOTN = True
      Exit Function
    End If
    '
    If (Len(sWhere)>0) Then sWhere = sWhere & " and"
    sWhere = sWhere & " LILOTN Like ('" & Trim(UCase(sFindLOTN)) & "%%')"
  End If
  '
  If (Len(sWhere)>0) Then sWhere = " where" & sWhere
  '
  If bAvail Then
    Call GetItemAvailSQL(sMCU, sSQLStr)
    sSql = "select LILOTN, LILOCN, " & sSQLStr & ", IMUOM1, LILOTS from F41021 inner join F4101 on LIITM = IMITM " & sWhere & " and " & sSQLStr & " <> 0 order by LILOTN, LILOCN"
  Else
    sSql = "select LILOTN, LILOCN, LIPQOH, IMUOM1, LILOTS from F41021 inner join F4101 on LIITM = IMITM " & sWhere & " group by LILOTN, LILOCN, LIPQOH, IMUOM1, LILOTS order by LILOTN, LILOCN"
  End If
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Lot", giLenLOTN,  CenterLeft, True)
  oList.SetColumn(2, "Locn", giLenLOCN, CenterLeft, True)
  oList.SetColumn(3, "Qty", giLenQTY,   CenterRight, True, iDecPQOH)
  oList.SetColumn(4, "UM",        2,    CenterLeft, True)
  oList.SetColumn(5, "S",         1,    CenterLeft, True)
  oList.SQL = sSql
  sValue = oList.ShowList
  '
  Rsp   = LField(sValue, Chr(3), 1)
  sLOCN = LField(sValue, Chr(3), 2)
  '
  Search_F41021_LOTN = (Len(Rsp) > 0)
  '
    '
  If Not gbDemoMode Then
    sLOCN = ""
    Rsp = ""
  End If
 '
End Function
'
' Search Sales Orders by DCCO
'
Public Function Search_F4211_DOCO(ByRef Rsp As String, ByVal sMCU As String, ByVal vStatusF As Variant, ByVal vStatusT As Variant, ByRef sDocType As String) As Boolean
  On Error Resume Next
  '
  Dim sSql   As String
  Dim sValue As String
  Dim oList  As New SearchList
  '
  sSql = "select SDDOCO, SDDCTO, ABALPH, SDVR01 from  F4211" & _
         " inner join  F0101 on SDAN8 = ABAN8" & _
         " where SDNXTR between '" & vStatusF & "' and '" & vStatusT & "' and SDMCU = '" & sMCU & "'" & _
         " group by SDDOCO, SDDCTO, ABALPH,SDVR01" & _
         " order by SDDOCO, SDDCTO "
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Doco",        8, CenterRight, True)
  oList.SetColumn(2, "Type",        2, CenterLeft, True)
  oList.SetColumn(3, "Customer",   15, CenterLeft, True)
  oList.SetColumn(4, "CustomerPO", 20, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp      = LField(sValue, Chr(3), 1)
  sDocType = LField(sValue, Chr(3), 2)
  '
  Search_F4211_DOCO = (Len(Rsp) > 0)
End Function
'
' Search Sales Orders by DCTO
'
Public Function Search_F4211_DCTO(ByRef Rsp As String, ByVal sMCU As String, ByVal vDOCO As Variant, ByVal vStatusF As Variant, ByVal vStatusT As Variant) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim oList As New SearchList
  '
  sSql = "select SDDCTO, SDDOCO, ABALPH from  F4211" & _
         " inner join  F0101 on SDAN8 = ABAN8" & _
         " where SDMCU = '" & sMCU & "' and SDDOCO = " & vDOCO & " " & _
         " and SDNXTR between '" & vStatusF & "' and '" & vStatusT & "' " & _
         " group by SDDOCO, SDDCTO, ABALPH" & _
         " order by SDDOCO, SDDCTO"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Type",      2, CenterLeft, True)
  oList.SetColumn(2, "Doco",      8, CenterRight, True)
  oList.SetColumn(3, "Customer", 15, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F4211_DCTO = (Len(Rsp) > 0)
End Function
'
' Search Sales Orders by LITM
'
Public Function Search_F4211_LITM(ByRef Rsp As String, ByVal sFindLITM As String, ByVal sMCU As String, ByVal vDOCO As Variant, ByVal sDCTO As String, ByVal vStatusF As Variant, ByVal vStatusT As Variant, ByRef sLineID As String) As Boolean
  On Error Resume Next
  '
  Dim iDecLNID As Integer
  Dim iDecSOQS As Integer
  Dim sSql     As String
  Dim sLike    As String
  Dim sValue   As String
  Dim oList    As New SearchList
  '
  ' lookup using "Like%" ?
  '
  If (Len(sFindLITM)>0) Then
    If (Len(sFindLITM) < giMinSearchLen) Then
      App.MsgBox (giMinSearchLen & GetMsg(15))
      Search_F4211_LITM = True
      Exit Function
    End If
    '
    sLike = " and SDLITM Like ('" & Trim(UCase(sFindLITM)) & "%%')"
  End If
  '
  sSql = "Select SDLITM, SDLNID, SDUOM, SDSOQS, SDDSC1 from  F4211 " & _
         " where SDMCU = '" & sMCU & "' and SDDOCO = " & vDOCO & " and SDDCTO = '" & sDCTO & "' " & _
         " and SDSOQS <> 0 and SDNXTR between '" & vStatusF & "' and '" & vStatusT & "'" & sLike & " order by SDLITM"
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"SDLITM","SDITM")
    Case 3
      sSql = Replace(sSql,"SDLITM","SDAITM")
    Case Else
  End Select
  '
  Call GetDecimals("LNID", iDecLNID)
  Call GetDecimals("SOQS", iDecSOQS)
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Item", giLenItem, CenterLeft, True)
  oList.SetColumn(2, "Line",         6, CenterRight, True, iDecLNID)
  oList.SetColumn(3, "UOM",          3, CenterLeft, True)
  oList.SetColumn(4, "Qty",   giLenQTY, CenterRight, True, iDecSOQS)
  oList.SetColumn(5, "Desc",        10, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp     = LField(sValue, Chr(3), 1)
  sLineID = LField(sValue, Chr(3), 2)
  '
  Search_F4211_LITM = (Len(Rsp) > 0)
    '
  If Not gbDemoMode Then
    sLineID = ""
    Rsp = ""
  End If
  '

End Function
'
' Search Sales Orders by LNID
'
Public Function Search_F4211_LNID(ByRef Rsp As String, ByVal sMCU As String, ByVal vDOCO As Variant, ByVal sDCTO As String, ByVal vStatusF As Variant, ByVal vStatusT As Variant) As Boolean
  On Error Resume Next
  '
  Dim iDecLNID As Integer
  Dim iDecSOQS As Integer
  Dim sSql     As String
  Dim oList    As New SearchList
  '
  sSql = "Select SDLNID, SDLITM, SDUOM, SDSOQS, SDDSC1 from F4211 " & _
         " where SDMCU = '" & sMCU & "' and SDDOCO = " & vDOCO & " and SDDCTO = '" & sDCTO & "' and SDSOQS <> 0 and" & _
         " SDNXTR between '" & vStatusF & "' and '" & vStatusT & "' order by SDLNID"
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"SDLITM","SDITM")
    Case 3
      sSql = Replace(sSql,"SDLITM","SDAITM")
    Case Else
  End Select
  '
  Call GetDecimals("LNID", iDecLNID)
  Call GetDecimals("SOQS", iDecSOQS)
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Line",         7, CenterRight, True, iDecLNID)
  oList.SetColumn(2, "Item", giLenItem, CenterLeft, True)
  oList.SetColumn(3, "UOM",          3, CenterLeft, True)
  oList.SetColumn(4, "Qty",   giLenQTY, CenterRight, True, iDecSOQS)
  oList.SetColumn(5, "Desc",        10, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F4211_LNID = (Len(Rsp) > 0)
End Function
'
' Search Purchase Orders by DOCO
'
Public Function Search_F4311_DOCO(ByRef Rsp As String, ByVal sMCU As String, ByVal vStatusF As Variant, ByVal vStatusT As Variant, ByRef sDocType As String, Optional ByRef sLITM As String) As Boolean
  On Error Resume Next
  '
  Dim sSql   As String
  Dim sValue As String
  Dim oList  As New SearchList
  '
  sSql = "select PDDOCO, PDDCTO, ABALPH from  F4311" & _
         " inner join  F0101 on PDAN8 = ABAN8" & _
         " where PDNXTR between '" & vStatusF & "' " & _
         " and '" & vStatusT & "' "
  '
  If Len(Trim(sMCU)) > 0 Then
    sSql = sSql & " and PDMCU = '" & sMCU & "'"
  End If
  '
  If Len(Trim(sLITM)) > 0 Then
    sSql = sSql & " and PDLITM = '" & sLITM & "' "
  End If

  If Len(Trim(sDocType)) > 0 Then
    sSql = sSql & " and PDDCTO = '" & sDocType & "' "
  End If
  '
  sSql = sSql &" group by PDDOCO, PDDCTO, ABALPH" & _
               " order by PDDOCO, PDDCTO "
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"PDLITM","PDITM")
    Case 3
      sSql = Replace(sSql,"PDLITM","PDAITM")
    Case Else
  End Select

  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Doco",      8, CenterRight, True)
  oList.SetColumn(2, "Type",      2, CenterLeft, True)
  oList.SetColumn(3, "Supplier", 15, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp     = LField(sValue, Chr(3), 1)
  sDocType = LField(sValue, Chr(3), 2)
  '
  Search_F4311_DOCO = (Len(Rsp) > 0)
End Function
'
' Search Purchase Orders by DCTO
'
Public Function Search_F4311_DCTO(ByRef Rsp As String, ByVal sMCU As String, ByVal vDOCO As Variant, ByVal vStatusF As Variant, ByVal vStatusT As Variant) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim oList As New SearchList
  '
  sSql = "select PDDCTO, PDDOCO, ABALPH from  F4311" & _
         " inner join  F0101 on PDAN8 = ABAN8" & _
         " where PDDOCO = " & vDOCO

  If Len(Trim(sMCU)) > 0 Then
    sSql = sSql & " and PDMCU = '" & sMCU & "' "
  End If

  sSql = sSql & " and PDNXTR between '" & vStatusF & "' and '" & vStatusT & "'" & _
         " group by PDDOCO, PDDCTO, ABALPH" & _
         " order by PDDOCO, PDDCTO"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Type",      2, CenterLeft, True)
  oList.SetColumn(2, "Doco",      8, CenterRight, True)
  oList.SetColumn(3, "Supplier", 15, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F4311_DCTO = (Len(Rsp) > 0)
End Function
'
' Search Purchase Orders by LITM
'
Public Function Search_F4311_LITM(ByRef Rsp As String, ByVal sFindLITM As String, ByVal vMCU As Variant, ByVal vDOCO As Variant, ByVal vDCTO As Variant, ByVal vStatusF As Variant, ByVal vStatusT As Variant, ByRef sLineID As String) As Boolean
  On Error Resume Next
  '
  Dim iDecLNID As Integer
  Dim iDecUOPN As Integer
  Dim sSql     As String
  Dim sLike    As String
  Dim sValue   As String
  Dim oList    As New SearchList
  '
  ' lookup using "Like%" ?
  '
  If (Len(sFindLITM)>0) Then
    If (Len(sFindLITM) < giMinSearchLen) Then
      App.MsgBox (giMinSearchLen & GetMsg(15))
      Search_F4311_LITM = True
      Exit Function
    End If
    '
    sLike = " and PDLITM Like ('" & Trim(UCase(sFindLITM)) & "%%')"
  End If
  '
  sSql = "Select PDLITM, PDLNID, PDUOM, PDUOPN, PDDSC1" & _
         " from  F4311 where PDMCU = '" & vMCU & "' and PDDOCO = " & vDOCO & " " & _
         " and PDDCTO = '" & vDCTO & "' " & _
         " and PDNXTR between '" & vStatusF & "' and '" & vStatusT & "'" & sLike & _
         " order by PDLITM"
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"PDLITM","PDITM")
    Case 3
      sSql = Replace(sSql,"PDLITM","PDAITM")
    Case Else
  End Select
  '
  Call GetDecimals("LNID", iDecLNID)
  Call GetDecimals("UOPN", iDecUOPN)
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Item", giLenItem, CenterLeft, True)
  oList.SetColumn(2, "Line",         6, CenterRight, True, iDecLNID)
  oList.SetColumn(3, "UOM",          3, CenterLeft, True)
  oList.SetColumn(4, "Qty",   giLenQTY, CenterRight, True, iDecUOPN)
  oList.SetColumn(5, "Desc",        10, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp     = LField(sValue, Chr(3), 1)
  sLineID = LField(sValue, Chr(3), 2)
  '
  Search_F4311_LITM = (Len(Rsp) > 0)
  '
  If Not gbDemoMode Then Rsp = ""
  '
End Function
'
' Search Purchase Orders by LNID
'
Public Function Search_F4311_LNID(ByRef Rsp As String, ByVal vMCU As Variant, ByVal vDOCO As Variant, ByVal vDCTO As Variant, ByVal vStatusF As Variant, ByVal vStatusT As Variant) As Boolean
  On Error Resume Next
  '
  Dim iDecLNID As Integer
  Dim iDecUOPN As Integer
  Dim sSql     As String
  Dim oList    As New SearchList
  '
  sSql = "Select PDLNID, PDLITM, PDUOM, PDUOPN, PDDSC1" & _
         " from  F4311 where "
           If Len(Trim(vMCU)) > 0 Then sSql = sSql & " PDMCU = '" & vMCU & "' "
           sSql = sSql & " and PDDOCO = " & vDOCO & " and PDDCTO =  '" & vDCTO & "' " & _
         " and PDNXTR between '" & vStatusF & "' and '" & vStatusT & "' order by PDLNID"
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"PDLITM","PDITM")
    Case 3
      sSql = Replace(sSql,"PDLITM","PDAITM")
    Case Else
  End Select
  '
  Call GetDecimals("LNID", iDecLNID)
  Call GetDecimals("UOPN", iDecUOPN)
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Line",         6, CenterRight, True, iDecLNID)
  oList.SetColumn(2, "Item", giLenItem, CenterLeft, True)
  oList.SetColumn(3, "UOM",          3, CenterLeft, True)
  oList.SetColumn(4, "Qty",   giLenQTY, CenterRight, True, iDecUOPN)
  oList.SetColumn(5, "Desc",        10, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F4311_LNID = (Len(Rsp) > 0)
End Function
'
' Search All Purchase Orders Items
'
Public Function Search_F4311_AllItem(ByRef Rsp As String, ByVal sFindLITM As String, ByVal sMCU As String, ByVal vStatusF As Variant, ByVal vStatusT As Variant) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sLike As String
  Dim oList As New SearchList
  '
  ' lookup using "Like%" ?
  '
  If (Len(sFindLITM)>0) Then
    If (Len(sFindLITM) < giMinSearchLen) Then
      App.MsgBox (giMinSearchLen & GetMsg(15))
      Search_F4311_AllItem = True
      Exit Function
    End If
    '
    sLike = " and PDLITM Like ('" & Trim(UCase(sFindLITM)) & "%%')"
  End If
  '
  sSql = "Select PDLITM, PDDSC1 from  F4311" & _
         " where PDMCU = '" & sMCU & "' " & _
         " and PDNXTR between '" & vStatusF & "' and '" & vStatusT & "'" & sLike & _
         " group by PDLITM, PDDSC1 order by PDLITM"
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"PDLITM","PDITM")
    Case 3
      sSql = Replace(sSql,"PDLITM","PDAITM")
    Case Else
  End Select

  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Item", giLenItem, CenterLeft, True)
  oList.SetColumn(2, "Desc",        10, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F4311_AllItem = (Len(Rsp) > 0)
    '
  If Not gbDemoMode Then Rsp = ""
  '
End Function
'
' Search Purchase Receipts by DOCO - Receipt Routed Items Only
'
Public Function Search_F43121_DOCO_RR(ByRef Rsp As String, ByVal sMCU As String, ByVal vStatusF As Variant, ByVal vStatusT As Variant, ByRef sDocType As String) As Boolean
  On Error Resume Next
  '
  Dim sSql   As String
  Dim sValue As String
  Dim oList  As New SearchList
  '
  sSql = "select PRDOCO, PRDCTO, ABALPH from  F43121" & _
         " inner join  F0101 on PRAN8 = ABAN8" & _
         " where PRNXTR between '" & vStatusF & "' and '" & vStatusT & "' "
          If Len(Trim(sMCU)) > 0 Then sSql = sSql & " and PRMCU = '" & sMCU & "' "
         sSql = sSql & " and PRRTGC = 'Y' group by PRDOCO, PRDCTO, ABALPH" & _
         " order by PRDOCO, PRDCTO "
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Doco",      8, CenterRight, True)
  oList.SetColumn(2, "Type",      2, CenterLeft, True)
  oList.SetColumn(3, "Supplier", 15, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp      = LField(sValue, Chr(3), 1)
  sDocType = LField(sValue, Chr(3), 2)
  '
  Search_F43121_DOCO_RR = (Len(Rsp) > 0)
End Function
'
' Search Purchase Receipts by DOCO
'
Public Function Search_F43121_DOCO(ByRef Rsp As String, ByVal sMCU As String, ByVal vStatusF As Variant, ByVal vStatusT As Variant, ByRef sDocType As String) As Boolean
  On Error Resume Next
  '
  Dim sSql   As String
  Dim sValue As String
  Dim oList  As New SearchList
  '
  sSql = "select PRDOCO, PRDCTO, ABALPH from  F43121" & _
         " inner join  F0101 on PRAN8 = ABAN8" & _
         " where PRNXTR between '" & vStatusF & "' and '" & vStatusT & "' "
         If Len(Trim(sMCU)) > 0 Then sSql = sSql & " and PRMCU = '" & sMCU & "' "
         sSql = sSql & " group by PRDOCO, PRDCTO, ABALPH" & _
         " order by PRDOCO, PRDCTO "
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Doco",      8, CenterRight, True)
  oList.SetColumn(2, "Type",      2, CenterLeft, True)
  oList.SetColumn(3, "Supplier", 15, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp      = LField(sValue, Chr(3), 1)
  sDocType = LField(sValue, Chr(3), 2)
  '
  Search_F43121_DOCO = (Len(Rsp) > 0)
End Function
'
' Search Purchase Receipts by DCTO
'
Public Function Search_F43121_DCTO(ByRef Rsp As String, ByVal sMCU As String, ByVal vStatusF As Variant, ByVal vStatusT As Variant) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim oList As New SearchList
  '
  sSql = "select PRDCTO, PRDOCO, ABALPH from  F43121" & _
         " inner join  F0101 on PRAN8 = ABAN8" & _
         " where PRNXTR between '" & vStatusF & "' and '" & vStatusT & "' "
          If Len(Trim(sMCU)) > 0 Then sSql = sSql & " and PRMCU = '" & sMCU & "' "
         sSql = sSql & " group by PRDOCO, PRDCTO, ABALPH" & _
         " order by PRDOCO, PRDCTO"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Type",      2, CenterLeft, True)
  oList.SetColumn(2, "Doco",      8, CenterRight, True)
  oList.SetColumn(3, "Supplier", 15, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F43121_DCTO = (Len(Rsp) > 0)
End Function
'
' Search Purchase Receipts by LITM
'
Public Function Search_F43121_LITM(ByRef Rsp As String, ByVal sFindLITM As String, ByVal vDOCO As Variant, ByVal vStatusF As Variant, ByVal vStatusT As Variant, ByRef sLineID As String, ByRef sNLIN As String, ByRef sLotn As String) As Boolean
  On Error Resume Next
  '
  Dim iDecLNID As Integer
  Dim iDecUREC As Integer
  Dim sSql     As String
  Dim sLike    As String
  Dim sValue   As String
  Dim oList    As New SearchList
  '
  ' lookup using "Like%" ?
  '
  If (Len(sFindLITM)>0) Then
    If (Len(sFindLITM) < giMinSearchLen) Then
      App.MsgBox (giMinSearchLen & GetMsg(15))
      Search_F43121_LITM = True
      Exit Function
    End If
    '
    sLike = " and PRLITM Like ('" & Trim(UCase(sFindLITM)) & "%%')"
  End If
  '
  sSql = "Select PRLITM, PRLNID, PRNLIN, PRUOM, PRUREC, PRLOTN" & _
         " from  F43121 where PRDOCO = " & vDOCO & _
         " and PRNXTR between '" & vStatusF & "' and '" & vStatusT & "'" & sLike & _
         " order by PRLITM"
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"PRLITM","PRITM")
    Case 3
      sSql = Replace(sSql,"PRLITM","PRAITM")
    Case Else
  End Select
  '
  Call GetDecimals("LNID", iDecLNID)
  Call GetDecimals("UREC", iDecUREC)
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Item", giLenItem, CenterLeft, True)
  oList.SetColumn(2, "Line",         6, CenterRight, True, iDecLNID)
  oList.SetColumn(3, "Seq",          3, CenterLeft, True)
  oList.SetColumn(4, "UOM",          3, CenterLeft, True)
  oList.SetColumn(5, "Qty",   giLenQTY, CenterRight, True, iDecUREC)
  oList.SetColumn(6, "Lot",  giLenLOTN, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  '
  If gbDemoMode Then
    '
    Rsp     = LField(sValue, Chr(3), 1)
    sLineID = LField(sValue, Chr(3), 2)
    sNLIN   = LField(sValue, Chr(3), 3)
    sLotn   = LField(sValue, Chr(3), 6)
    '
  End If
  '
  Search_F43121_LITM = (Len(Rsp) > 0)
  '
End Function
'
' Search Purchase Receipts by LOTN
'
Public Function Search_F43121_LOTN(ByRef Rsp As String, ByVal sMCU As String, ByVal vDOCO As Variant, ByVal vITM As Variant, ByVal vStatusF As Variant, ByVal vStatusT As Variant, ByRef sLineID As String, ByRef sNLIN As String) As Boolean
  On Error Resume Next
  '
  Dim iDecLNID As Integer
  Dim iDecUREC As Integer
  Dim sSql     As String
  Dim sLike    As String
  Dim sValue   As String
  Dim oList    As New SearchList
  '
  Call GetDecimals("LNID", iDecLNID)
  Call GetDecimals("UREC", iDecUREC)
  '
  sSql = "select PRLOTN, PRLNID, PRNLIN, PRUOM, PRUREC from  F43121" & _
         " where PRDOCO = " & vDOCO & " and PRMCU = '" & sMCU & "' and PRITM = " & vITM & " group by PRLOTN, PRLNID, PRNLIN, PRUOM, PRUREC"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Lot",  giLenLOTN, CenterLeft, True)
  oList.SetColumn(2, "Line",         6, CenterRight, True, iDecLNID)
  oList.SetColumn(3, "Seq",          3, CenterLeft, True)
  oList.SetColumn(4, "UOM",          3, CenterLeft, True)
  oList.SetColumn(5, "Qty",   giLenQTY, CenterRight, True, iDecUREC)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  If gbDemoMode Then
    Rsp     = LField(sValue, Chr(3), 1)
    sLineID = LField(sValue, Chr(3), 2)
    sNLIN   = LField(sValue, Chr(3), 3)
  End If
  '
  Search_F43121_LOTN = (Len(Rsp) > 0)
End Function
'
' Search Receipt Routings
'
Public Function Search_F43092(ByRef Rsp As String, ByVal vDOCO As Variant, ByVal sDCTO As String, ByVal vLNID As Variant, Optional ByRef nSeqF As Long, Optional ByRef bTop1 As Boolean, Optional ByRef bFrom As Boolean) As Boolean
  On Error Resume Next
  '
  Dim iDecQTYO As Integer
  Dim sSql     As String
  Dim oList    As New SearchList
  '
  If bTop1 Then
    sSql = "select Top 1 PXOPRC, PXOPRS, PXQTYO from  F43092" & _
           " where PXDOCO = " & vDOCO & " and PXDCTO = '" & sDCTO & "' and PXLNID = " & vLNID & " and PXOPRS > " & nSeqF & " "
    '
  Else
    sSql = "select PXOPRC, PXOPRS, PXQTYO from  F43092" & _
           " where PXDOCO = " & vDOCO & " and PXDCTO = '" & sDCTO & "' and PXLNID = " & vLNID & " and PXOPRS > " & nSeqF & " "
  End If

  If bFrom = True Then
    sSql = sSql & " and PXQTYO <> 0 "
  End If

  sSql = sSql & " order by PXOPRS"

  Call GetDecimals("QTYO", iDecQTYO)
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Oper",       6, CenterLeft, True)
  oList.SetColumn(2, "Seq",        2, CenterRight, True)
  oList.SetColumn(3, "Qty", giLenQTY, CenterRight, True, iDecQTYO)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F43092 = (Len(Rsp) > 0)
End Function
'
' Search Warehouse Details by LITM
'
Public Function Search_F4611_LITM(ByRef Rsp As String, ByVal sMCU As String, ByVal vStatus As Variant, ByVal vTYFL As Variant, ByRef nDOCO As Variant, ByRef sDCTO As Variant, ByRef nLNID As Variant, ByRef sFLOC As Variant, ByRef sTLOC As Variant, ByRef sPhase As String) As Boolean
  On Error Resume Next
  '
  Dim sSql     As String
  Dim sValue   As String
  Dim sWhere   As String
  Dim oList    As New SearchList
  Dim iDecLNID As Integer
'
  sSql = "select R2LITM, R2FLOC, R2TLOC, R2DOCO, R2DCTO, R2LNID, R2DSC1  from  F4611 " _
       & " where R2MCU = '" & sMCU & "' and R2PSTB = '" & vStatus & "' and R2TYFL = '" & vTYFL & "' and R2PHAS = '" & sPhase & "' "
  '
  ' if doco, dcto is specified
  If ((nDOCO <> 0) And (nDOCO <> ""))Then sWhere = " and R2DOCO = " & nDOCO & " and R2DCTO = '" & sDCTO & "' "
  If Len(Trim(sWhere)) > 0 Then sSql = sSql & sWhere

  If vTYFL = "1" Then
    sSql = sSql & "order by R2LITM, R2DOCO, R2DCTO, R2LNID, R2TLOC, R2FLOC"
  Else
    sSql = sSql & "order by R2LITM, R2DOCO, R2DCTO, R2LNID, R2FLOC, R2TLOC"
  End If
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"R2LITM","R2ITM")
    Case 3
      sSql = Replace(sSql,"R2LITM","R2AITM")
    Case Else
  End Select

  Call GetDecimals("LNID", iDecLNID)

  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Item",  giLenItem, CenterLeft, True)
  oList.SetColumn(2, "From",  giLenLOCN, CenterLeft,False)
  oList.SetColumn(3, "To  ",  giLenLOCN, CenterLeft,False)
  oList.SetColumn(4, "Doco",          8, CenterRight, True)
  oList.SetColumn(5, "Type",          2, CenterLeft, True)
  oList.SetColumn(6, "Line",          6, CenterLeft, True, iDecLNID)
  oList.SetColumn(7, "Desc",         15, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  If gbDemoMode Then
    Rsp   = LField(sValue, Chr(3), 1)
    sFLOC = LField(sValue, Chr(3), 2)
    sTLOC = LField(sValue, Chr(3), 3)
    nDOCO = LField(sValue, Chr(3), 4)
    sDCTO = LField(sValue, Chr(3), 5)
    nLNID = LField(sValue, Chr(3), 6)
  End If
  '
  Search_F4611_LITM = (Len(Rsp) > 0)
End Function
'
' Search Warehouse Details by Document
'
Public Function Search_F4611_DOCO(ByRef Rsp As String, ByVal sMCU As String, ByVal vStatus As Variant, ByVal vTYFL As Variant, ByRef nDOCO As Variant, ByRef sDCTO As Variant, ByRef sPhase As String) As Boolean
  On Error Resume Next
  '
  Dim sSql     As String
  Dim sValue   As String
  Dim oList    As New SearchList
  Dim iDecLNID As Integer
  '
  sSql = "select DISTINCT R2DOCO,R2DCTO,ABALPH from  F4611 " _
      & " inner join  F0101 on R2AN8 = ABAN8"  _
      & " where R2MCU = '" & sMCU & "' and R2PSTB = '" & vStatus & "' and R2TYFL = '" & vTYFL & "' " _
      & " and R2PHAS = '" & sPhase & "' order by R2DOCO,R2DCTO,ABALPH"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Doco",      8, CenterRight, True)
  oList.SetColumn(2, "Type",      2, CenterLeft, True)
  oList.SetColumn(3, "Customer", 20, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp   = LField(sValue, Chr(3), 1)
  nDOCO = LField(sValue, Chr(3), 1)
  sDCTO = LField(sValue, Chr(3), 2)
  '
  Search_F4611_DOCO = (Len(Rsp) > 0)
End Function
'
' Search Warehouse Details by Document Type
'
Public Function Search_F4611_DCTO(ByRef Rsp As String, ByVal sMCU As String, ByVal vStatus As Variant, ByVal vTYFL As Variant, ByRef nDOCO As Variant, ByRef sDCTO As Variant, ByRef sPhase As String) As Boolean
  On Error Resume Next
  '
  Dim sSql     As String
  Dim sValue   As String
  Dim oList    As New SearchList
  Dim iDecLNID As Integer
  '
  sSql = "select DISTINCT R2DCTO,R2DOCO,ABALPH from  F4611 " _
      & " inner join  F0101 on R2AN8 = ABAN8"  _
      & " where R2MCU = '" & sMCU & "' and R2PSTB = '" & vStatus & "' and R2TYFL = '" & vTYFL & "' " _
      & " and R2PHAS = '" & sPhase & "' order by R2DCTO,R2DOCO,ABALPH"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Type",      2, CenterLeft, True)
  oList.SetColumn(2, "Doco",      8, CenterRight, True)
  oList.SetColumn(3, "Customer", 20, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  Rsp = LField(sValue, Chr(3), 1)
  Search_F4611_DCTO = (Len(Rsp) > 0)
End Function
'
' Search Warehouse by Pick No
'
Public Function Search_F4611_DOCO_PSN(ByRef Rsp As String, ByVal sMCU As String, ByVal vStatus As Variant, ByVal vTYFL As Variant, ByRef nDOCO As Variant, ByRef sDCTO As Variant, ByRef sPhase As String) As Boolean
  On Error Resume Next
  '
  Dim sSql     As String
  Dim sValue   As String
  Dim oList    As New SearchList
  Dim iDecLNID As Integer

  'search the pick nos for the sales order nos

  sSql ="select distinct SDPSN,SDDOCO,SDDCTO from F4211 where exists (select 'x' from  F4611" _
        &" where R2MCU= '" & sMCU & "' and R2PSTB = '" & vStatus & "' and R2TYFL = '" & vTYFL & "' and R2PHAS = '" & sPhase & "'" _
        &"  and SDDOCO=R2DOCO AND SDDCTO=R2DCTO)"

  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Pick No", 8, CenterRight, True)
  oList.SetColumn(2, "Doco",    8, CenterLeft, True)
  oList.SetColumn(3, "Type",    2, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp   = LField(sValue, Chr(3), 1)
  nDOCO = LField(sValue, Chr(3), 2)
  sDCTO = LField(sValue, Chr(3), 3)
  '
  Search_F4611_DOCO_PSN = (Len(Rsp) > 0)
End Function
'
' Search Work Order Master by DOCO
'
Public Function Search_F4801_DOCO(ByRef Rsp As String, ByVal sMCU As String, ByVal vStatusF As Variant, ByVal vStatusT As Variant, ByRef sDocType As String) As Boolean
  On Error Resume Next
  '
  Dim sSql   As String
  Dim sValue As String
  Dim oList  As New SearchList
  '
  sSql = "Select WADOCO, WADCTO, WADL01 from  F4801" & _
         " where WASRST between '" & vStatusF & "' and '" & vStatusT & "' and WAMCU = '" & sMCU & "'" & _
         " group by WADOCO, WADCTO, WADL01"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Doco",  8, CenterRight, True)
  oList.SetColumn(2, "Type",  2, CenterLeft, True)
  oList.SetColumn(3, "Desc", 15, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp      = LField(sValue, Chr(3), 1)
  sDocType = LField(sValue, Chr(3), 2)
  '
  Search_F4801_DOCO = (Len(Rsp) > 0)
End Function

Public Function Search_F4801_DCTO(ByRef Rsp As String, ByVal sMCU As String, ByVal vStatusF As Variant, ByVal vStatusT As Variant, ByRef sDOCO As String) As Boolean
  On Error Resume Next
  '
  Dim sSql   As String
  Dim sValue As String
  Dim oList  As New SearchList
  '
  sSql = "Select WADOCO, WADCTO, WADL01 from  F4801" & _
         " where WASRST between '" & vStatusF & "' and '" & vStatusT & "' and WAMCU = '" & sMCU & "'" & _
         " and WADOCO = " & sDOCO & _
         " group by WADOCO, WADCTO, WADL01"
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Doco",  8, CenterRight, True)
  oList.SetColumn(2, "Type",  2, CenterLeft, True)
  oList.SetColumn(3, "Desc", 15, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp = LField(sValue, Chr(3), 2)
  Search_F4801_DCTO = (Len(Rsp) > 0)
End Function
'
' Search Work Order Master by DOCO / LITM
'
Public Function Search_F4801_DOCO_LITM(ByRef Rsp As String, ByVal sLITM As String, ByVal sMCU As String, ByVal vStatusF As Variant, ByVal vStatusT As Variant, ByRef sDocType As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sValue As String
  Dim oList As New SearchList
  '
  sSql = "Select WADOCO, WADCTO, WADL01 from  F4801" & _
         " where WASRST between '" & vStatusF & "' and '" & vStatusT & "' and WAMCU = '" & sMCU & "'" & _
         " and WALITM = '" & sLITM & "' group by WADOCO, WADCTO, WADL01 order by WADOCO"
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"WALITM","WAITM")
    Case 3
      sSql = Replace(sSql,"WALITM","WAAITM")
    Case Else
  End Select
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = True
  oList.SetColumn(1, "Doco",  8, CenterRight, True)
  oList.SetColumn(2, "Type",  2, CenterLeft, True)
  oList.SetColumn(3, "Desc", 15, CenterLeft, True)
  oList.SQL = sSql
  '
  sValue = oList.ShowList
  '
  Rsp      = LField(sValue, Chr(3), 1)
  sDocType = LField(sValue, Chr(3), 2)
  '
  Search_F4801_DOCO_LITM = (Len(Rsp) > 0)
End Function
'
' Search Work Order Master for LITM
'
Public Function Search_F4801_LITM_LIST(ByRef Rsp As String, ByVal sFindLITM As String, ByVal sMCU As String, ByVal sDCTO As String, ByVal vStatusF As Variant, ByVal vStatusT As Variant) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sLike As String
  Dim oList As New SearchList
  '
  ' lookup using "Like%" ?
  '
  If (Len(sFindLITM)>0) Then
    If (Len(sFindLITM) < giMinSearchLen) Then
      App.MsgBox (giMinSearchLen & GetMsg(15))
      Search_F4801_LITM_LIST = True
      Exit Function
    End If
    '
    sLike = " and WALITM Like ('" & Trim(UCase(sFindLITM)) & "%%')"
  End If
  '
  If (Len(sDCTO)>0) Then sLike = sLike & " and WADCTO = '" & sDCTO & "'"
  '
  sSql = "Select WALITM, WADL01 from  F4801" & _
         " where WASRST between '" & vStatusF & "' and '" & vStatusT & "' and WAMCU = '" & sMCU & "'" & _
         sLike & " group by WALITM, WADL01 order by WALITM"
  '
  Select Case App.GetValue("tmCISY")  ' Get what Item number is used
    Case 1
      sSql = Replace(sSql,"WALITM","WAITM")
    Case 3
      sSql = Replace(sSql,"WALITM","WAAITM")
    Case Else
  End Select
  '
  oList.MaxRows = giMaxSearchRows
  oList.ShowEmptyList = True
  oList.ReturnAllRows = False
  oList.SetColumn(1, "Item", giLenItem, CenterLeft, True)
  oList.SetColumn(2, "Desc",        15, CenterLeft, True)
  oList.SQL = sSql
  '
  Rsp = oList.ShowList
  Search_F4801_LITM_LIST = (Len(Rsp) > 0)
End Function
'
' Validate the branchplant
'
Public Function Validate_BranchPlant(ByRef Rsp As String, ByRef sBranchPlant As String, ByRef sCompany As String, Optional ByRef sDL01 As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  '
  Validate_BranchPlant = False
  '
  If (Len(Rsp) = 0) Then Exit Function
  '
  ' Format Value
  Rsp = FixRight(Trim(UCase(Rsp)), 12, " ")
  '
  ' Validate it
  sSql = "select CISYM1, CISYM2, CISYM3 from  F41001 where CIMCU = '" & Rsp & "'"
  DB.Execute(sSql, sCols, sRows)
  '
  If (Len(sRows) = 0) Then
    App.MsgBox (GetMsg(51))
    Exit Function
  End If
  '
  ' Get Item Identifier
  '
  App.SetValue("tmCISY", 0)
  '
  If Len(Trim(DB.Extract(sCols,sRows,1,"CISYM1"))) = 0 Then        ' short Item Number
    App.SetValue("tmCISY", 1)
  Else
    If Len(Trim(DB.Extract(sCols,sRows,1,"CISYM2"))) = 0 Then      ' long Item Number
      App.SetValue("tmCISY", 2)
    Else
      If Len(Trim(DB.Extract(sCols,sRows,1,"CISYM3"))) = 0 Then    ' 3rd. Item Number
        App.SetValue("tmCISY", 3)
      End If
    End If
  End If
  '
  ' Company information is present?
  sSql = "select MCCO, MCDL01 from  F0006 where MCMCU = '" & Rsp & "'"
  DB.Execute(sSql, sCols, sRows)
  '
  If (Len(sRows) = 0) Then
    App.MsgBox GetMsg(16) & Rsp
    Exit Function
  End If
  '
  sCompany = FixRight(Trim(DB.Extract(sCols, sRows, 1, "MCCO")), 5, "0")
  sDL01    = Trim(DB.Extract(sCols, sRows, 1, "MCDL01"))
  sBranchPlant = Rsp
  Rsp = Trim(Rsp)
  '
  Validate_BranchPlant = True
End Function

'
' Validate the business unit
'
Public Function Validate_BU(ByRef Rsp As String, ByRef sBU As String, ByRef sCompany As String, Optional ByRef sDL01 As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  '
  Validate_BU = False
  '
  If (Len(Rsp) = 0) Then Exit Function
  '
  ' Format Value
  Rsp = FixRight(Trim(UCase(Rsp)), 12, " ")
  '
  ' Company information is present?
  sSql = "select MCCO, MCDL01 from  F0006 where MCMCU = '" & Rsp & "'"
  DB.Execute(sSql, sCols, sRows)
  '
  If (Len(sRows) = 0) Then
    App.MsgBox GetMsg(16) & Rsp
    Exit Function
  End If
  '
  sCompany = FixRight(Trim(DB.Extract(sCols, sRows, 1, "MCCO")), 5, "0")
  sDL01    = Trim(DB.Extract(sCols, sRows, 1, "MCDL01"))
  sBU = Rsp
  Rsp = Trim(Rsp)
  '
  Validate_BU = True
End Function

'
' Formats Screen Input to JDE Display / File Format and
' also validates against F4100 if required
'
Public Function Validate_Locn(ByRef Rsp As String, ByVal sMCU As String, ByRef sLOCNJDE As String, Optional ByRef bMustExist As Boolean) As Boolean
  On Error Resume Next
  '
  Dim i          As Integer
  Dim iPos       As Integer
  Dim sSql       As String
  Dim sCols      As String
  Dim sRows      As String
  Dim sSepl      As String
  Dim sValue     As String
  Dim sLocnD     As String ' Display Format
  Dim sLocnF     As String ' File Format
  Dim sItemCtr   As String
  Dim iItemLen   As Integer
  Dim bItemRight As Boolean
  Dim bHasSeps   As Boolean
  Dim bChkLocn   As Boolean
  '
  Validate_Locn  = False
  ' get Branch/Plant constant
  '
  sSql = "select * from  F41001 where CIMCU = '" & sMCU & "'"
  DB.Execute(sSql, sCols, sRows)
  '
  If (Len(sRows) = 0) Then
    App.MsgBox(GetMsg(51))
    Exit Function
  End If
  '
  sSepl =  Trim(DB.Extract(sCols, sRows, 1, "CISEPL"))  ' seperator
  If sSepl = "" Then sSepl = Chr(1)             ' in case it's blank the routine does not work
  '
  ' Parse location into elements
  '
  Rsp = UCase(Rsp)
  bHasSeps  = (InStr(Rsp, sSepl) <> 0)
  iPos = 1
  '
  For i = 1 To 10
    sItemCtr   = FixRight(CStr(i), 2, "0")
    iItemLen   = Val(DB.Extract(sCols, sRows, 1, "CISE" & sItemCtr))           ' segment Width
    bItemRight =    (DB.Extract(sCols, sRows, 1, "CILR" & sItemCtr) = "R")     ' segment adjustment left / right
    '
    If (iItemLen = 0) Then Exit For
    '
    If bHasSeps Then
      sValue = Trim(LField(Rsp, sSepl, i))
    Else
      sValue = Trim(Mid(Rsp, iPos, iItemLen))
      iPos = iPos + iItemLen
    End If
    '
    If (i>1) Then sLocnD = sLocnD & sSepl
    '
    If bItemRight Then
      sLocnD = sLocnD & FixRight(sValue, iItemLen, " ")
      sLocnF = sLocnF & FixRight(sValue, iItemLen, " ")
    Else
      sLocnD = sLocnD & FixLeft(sValue, iItemLen, " ")
      sLocnF = sLocnF & FixLeft(sValue, iItemLen, " ")
    End If
  Next i
  '
  If sSepl = Chr(1) Then sLocnD = Replace(sLocnD,Chr(1)," ") ' in case it's blank the routine does not work

  Rsp      = sLocnD
  sLOCNJDE = FixLeft(sLocnF, 20, " ")
  '
  ' Check Location only if required in JDE BranchPlant constants or on purpose
  '
  bChkLocn = (Trim(DB.Extract(sCols, sRows, 1, "CILCTL")) = "Y")
  '
  If bChkLocn Then
    sSql = "select count(*) from  F4100 where LMMCU = '" & sMCU & "' and LMLOCN ='" & sLOCNJDE & "'"
    DB.Execute(sSql, sCols, sRows)
    '
    If (Val(sRows) = 0) Then
      App.MsgBox(GetMsg(76))
      Exit Function
    End If
  End If
  '
  If bMustExist Then
    sSql = "select count(*) from  F41021 where LIMCU = '" & sMCU & "' and LILOCN ='" & sLOCNJDE & "'"
    DB.Execute(sSql, sCols, sRows)
    If (Val(sRows) = 0) Then
      '
      If gbOfflineEnabled Then   ' Check offline inventory
        sSql = "select count(*) from  OI001 where ILMCU = '" & sMCU & "' and ILLOCN ='" & sLOCNJDE & "'"
        DB.Execute(sSql, sCols, sRows)
      End If
      '
      If (Val(sRows) = 0) Then
        App.MsgBox(GetMsg(77))
        Exit Function
      End If
    End If
  End If
  '
  Validate_Locn = True
End Function
'
' Validate the UDC
'
Public Function Validate_UDC(ByRef Rsp As String, ByVal sDRSY As String, ByVal sDRRT As String, ByRef sDRDL01 As String, ByRef sDRDL02 As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  '
  If (Len(Rsp) = 0) Then Exit Function
  Validate_UDC = False
  '
  ' Validate that the UDC exists
  '
  sSql = "select DRDL01, DRDL02 from  F0005 where DRKY = '" & Rsp & "'" & _
         " and DRSY = '" & sDRSY & "' and DRRT = '" & sDRRT & "'"
  DB.Execute(sSql,sCols,sRows)
  '
  If (Len(sRows) = 0) Then
    App.MsgBox GetMsg(87)
    Exit Function
  End If
  '
  Rsp = Trim(Rsp)
  '
  sDRDL01 = Trim(DB.Extract(sCols, sRows, 1, "DRDL01"))
  sDRDL02 = Trim(DB.Extract(sCols, sRows, 1, "DRDL02"))
  '
  Validate_UDC = True
End Function
'
' Validate unique Lot per Item
'
Public Function Validate_UniqueLotn(ByVal sLotn As String, ByVal sITM As String, Optional ByRef sMCU As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  '
  If (Len(sLotn) = 0) Then Exit Function
  Validate_UniqueLotn = False
  sITM = Trim(UCase(sITM))

  ' In case DB is Oracle
  If gbOracleJDE Then
    If Len(Trim(slotn)) = 0 Then sLotn = " "
  End If
  '
  ' get Lotn from Item
  '
  sSql = "select count(*) from F4108 where IOLOTN = '" & sLotn & "' and IOITM <> " & sITM
  If Len(Trim(sMCU)) > 0 Then
    sSql = sSql & " and IOMCU = '" & sMCU & "' "
  End If
  '
  DB.Execute(sSql,sCols,sRows)
  '
  If Val(sRows) > 0 Then Exit Function
  '
  Validate_UniqueLotn = True
  '
End Function

'Write Offline Inventory
'
Public Function WriteOI(ByVal oiCO As String,ByVal oiMCU As String,ByVal oiLitm As String,ByVal oiItm As Variant,ByVal oiAitm As String,ByVal oiUOM1 As String,ByVal oiQty1 As String,ByVal oiDoco As Long, _
                ByVal oiDCTO As String,ByVal oiLnid As Single,ByVal oiQNAME As String,ByVal oiSEQNO As Long,ByVal oiLocn As String,ByVal oiLotn As String,ByVal oiLots As String) As Boolean
  On Error Resume Next

  Dim sSql    As String
  Dim sCols   As String
  Dim sRows   As String
  Dim sUOM    As String
  Dim sUOM2   As String
  Dim SQty1   As String
  Dim SQty2   As String
  Dim nQty1   As Currency
  Dim oiLOCNF As String
  Dim nResult As Long
  '
  WriteOI = True
  ' just in case Location is formated
  Call Validate_Locn(oiLocn, oiMCU, oiLOCNF)

  ' check UOM / offline inventory stores UOM1
  sSql = "select IMUOM1, IMITM, IMAITM from  F4101" & _
         " where IMLITM = '" & oiLitm & "'"
  DB.Execute(sSql,sCols,sRows)
  '
  If (Len(sRows) = 0) Then
    App.MsgBox(GetMsg(232))
    Exit Function
  End If
  '
  sUOM = DB.Extract(sCols, sRows, 1, 1)
  oiItm = Val(DB.Extract(sCols, sRows, 1, 2))
  oiAitm = DB.Extract(sCols, sRows, 1, 3)
  SQty1 = oiQty1

  If Trim(sUOM) <> Trim(oiUOM1) Then  ' convert UOM
    sUOM2 = oiUOM1                    ' keep transaction UOM and Qty
    SQty2 = SQty1
    nQty1 = CCur(oiQty1)
    ConvUOM(CStr(oiItm),nQty1,sUOM,oiUOM1)
    oiUOM1 = sUOM
    oiQty1 = CStr(nQty1)
    SQty1  = CStr(nQty1)
  End If

' replace decimal comma with decimal dot for the non US market
  If Mid$(CStr( 3 / 2),2,1) = "," Then SQty1 = Replace(oiQty1,",",".")
  If Mid$(CStr( 3 / 2),2,1) = "," Then SQty2 = Replace(SQty2,",",".")
  '
  SQty1 = Trim(SQty1)
  SQty2 = Trim(SQty2)
  '
  If Len(SQty2) = 0 Then SQty2 = "0"

  SQty1 = CStr(ConvDecimalsToSQL("TRQT", SQty1))
  SQty2 = CStr(ConvDecimalsToSQL("TRQT", SQty2))

  If Len(Trim(oiQNAME)) = 0 Then       ' default Queue name when empty
    oiQNAME = "RFQueue"
  End If

  sSql = "insert into OI001 (ILQNAME,ILSEQNO,ILCO,ILMCU,ILLITM,ILITM,ILAITM,ILUOM1,ILQTY1,ILUOM2,ILQTY2,ILDOCO,ILDCTO,ILLNID,ILTRDJ,ILLOCN,ILLOTN,ILLOTS)" _
  & " values('" & oiQNAME & "','" & oiSEQNO & "','" & oiCO & "','" & oiMCU & "','" & oiLitm & "'," & oiItm & ",'" & oiAitm & "','" & oiUOM1 & "'," & SQty1 & ",'" & sUOM2 & "'," & SQty2 & "," & oiDoco & ",'" & oiDCTO & "'," & oiLnid & ", " & Format(Date, "yymmdd") & ", '" & oiLOCNF & "','" & oiLotn & "','" & oiLots & "')"

  nResult = DB.Execute(sSql)

  If nResult <> 0 Then WriteOI = False
End Function
'
' Delete Offline Inventory
'
Public Function DeleteOI(ByRef sQNAME As String,ByRef nSEQNO As Long, Optional ByRef sUser As String, Optional ByRef sErrMsg As String, Optional ByRef sDateTime As String)
  On Error Resume Next
  '
  Dim sSql As String

  If Trim(sQNAME) = "" Then sQNAME = "RFQueue"

  sUser = UCase(sUser)
  '
  sSql = "insert into " & cOI098 & " (ILQNAME,ILSEQNO,ILUSER,ILMSG,ILDATE,ILMSENT)" _
    & " values('" & sQNAME & "', '" & nSEQNO & "','" & sUser & "','" & sErrMsg _
    & "','" & sDateTime & "','')"
  DB.Execute(sSql)
End Function
'
' Get Quantity OnHand
Public Function GetOnHandOI(ByVal sMCU As String,ByVal vITM As Variant,ByVal sLotn As String,ByVal sLOCN As String, ByRef nOnHand As Currency)
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String

  ' In case DB is Oracle
  If gbOracleJDE Then
    If Len(Trim(slotn)) = 0 Then sLotn = " "
    If Len(sLOCN) = 0 Then sLOCN = " "
  End If

  sSql = "select sum(ILQTY1) from OI001 " & _
         " where ILMCU = '" & sMCU & "' and ILITM = " & vITM & " and ILLOCN = '" & sLOCN & "' and ILLOTN = '" & sLotn & "' "

  DB.Execute(sSql,sCols,sRows)
  nOnHand = ConvDecimalsFromSQL("PQOH", CDbl(DB.Extract(sCols, sRows, 1, 1)))
End Function

Public Function F00095ReserveObject(ByRef sObj As String, ByRef sResKey As String, ByRef sAppl As String, ByRef sResKeySav As String, Optional ByRef bSilent As Boolean) As Boolean
  On Error Resume Next
  '
  Dim sSql     As String
  Dim sCols    As String
  Dim sRows    As String
  Dim sUser    As String
  Dim sLockUsr As String
  Dim nTime    As String
  Dim nDate    As String
  Dim nUKID    As Currency
  Dim emProc1  As New EmbeddedProc
  '
  If Not gbIsE1 Then
    F00095ReserveObject = True
    Exit Function
  End If
  '
  F00095ReserveObject = False
  '
  sUser = Trim(UCase(App.User))
  '
  If gbQueueProcessing Then   ' if Queueing is on we can asume data replication as well
    '
    ' check if already locked
    sSql = "SELECT  *  FROM  F00095  WHERE  ( A1OBNM = '" & sObj & "' AND A1GENKEY = '" & sResKey & "' )"
    DB.Execute(sSql,sCols,sRows)

    If Len(sRows) > 0 Then
      sLockUsr = Trim(UCase(DB.Extract(sCols,sRows,1,"A1USER")))
      If Not bSilent Then App.MsgBox(GetMsg(196) & sLockUsr)
      Exit Function
    Else
      '
      ' get unique Key to reserve
      sSql = "Select * FROM  F00022  (UPDLOCK)  WHERE  ( UKOBNM = 'RRESERVE' )"
      DB.Execute(sSql,sCols,sRows)
      nUKID = DB.Extract(sCols,sRows,1,"UKUKID")
      nUKID = nUKID + 1
      sSql = "UPDATE  F00022  SET UKUKID= " & nUKID & " WHERE  ( UKOBNM = 'RRESERVE' )"
      DB.Execute(sSql)
      nUKID = nUKID - 1

      nDate = ConvDatetoJDE(CStr(Date))
      nTime = Format(Time,"hhmmss")
      sSql = "INSERT INTO  F00095 VALUES ('" & sObj & "','" & sResKey & "','" & sUser & "','" & nUKID & "'," & nDate & "," & nTime & ",'RFgen')"
      DB.Execute(sSql)
    End If

    sAppl = CStr(nUKID)
  Else
    emProc1.Name = "TF00095ReserveObj"
    '
    emProc1.Param("tmObj")    = sObj
    emProc1.Param("tmUser")   = sUser
    emProc1.Param("tmGenKey") = sResKey
    '
    If Not emProc1.Execute Then Exit Function
    '
    If Trim(emProc1.Param("tmErr")) <> "" Then
      If Not bSilent Then App.MsgBox(GetMsg(88) & Trim(emProc1.Param("tmErr")) & " " & Trim(emProc1.Param("tmReserver")) & " " & Trim(emProc1.Param("tmResAppl")))
      Exit Function
    End If
    '
    sAppl = emProc1.Param("tmAppl")
  End If

  sResKeySav = sResKey  ' keep for later remove reservation
  F00095ReserveObject = True
End Function

Public Function F00095RemoveReservation(ByRef sObj As String, ByRef sResKey As String, ByRef sAppl As String) As Boolean
  On Error Resume Next
  '
  Dim sUser   As String
  Dim emProc1 As New EmbeddedProc
  '
  sUser = Trim(UCase(App.User))
  '
  emProc1.Name = "F00095RemoveReservation"
  emProc1.DataSource = "JDE"
  '
  emProc1.Param("UserId")       = sUser
  emProc1.Param("NameObject")   = sObj
  emProc1.Param("GenericKey")   = sResKey
  emProc1.Param("Application")  = sAppl
  '
  If gbQueueProcessing Then
    emProc1.Queue
  Else
    emProc1.Execute
  End If
End Function

Public Function GetProcOpt(ByRef sPgm As String, ByRef sVers As String, ByRef sSearch As String, Optional ByRef sHeader As String) As String
  On Error Resume Next
  '
  Dim sSql      As String
  Dim sCols     As String
  Dim sRows     As String
  Dim sSav      As String                        ' Store saved values for JDE Processing options
  Dim sHea      As String                        ' Store values Forms Header
  Dim sKey      As String
  Dim sJPO      As String
  Dim sMap      As String
  Dim sHex      As String
  Dim sPOTP     As String
  Dim sChar     As String
  Dim sPOKey    As String
  Dim sPoRel    As String
  Dim i         As Integer
  Dim iFnd      As Integer
  Dim iChar     As Integer
  Dim iKey      As Integer
  Dim iMap      As Integer
  Dim nSize     As Single
  Dim nPos      As Single
  Dim zChar(1)  As Byte
  Dim zData()   As Byte
  Dim szData()  As Byte
  Dim oRs       As ADODB.Recordset
  '
  Dim iCnt      As Long
  Dim sPO       As String
  Dim sPOProp() As String
  Dim sPOVal()  As String
  '
  If gbIsE1 Then
    sPoRel = gsPoRel
  Else
    sPoRel = "World"
  End If
  '
  ' check if already exists in dynamic array
  '
  sPOKey = sPgm & ";" & sVers
  iFnd = Locate(sPOKey,msPOCache,1)
  gbPOError = False

  If iFnd = 0 Then   ' create new entry
    '
    ' get RFgen mapping table for specified Release
    sSql = "select * from RFPO where POPID = '" & sPgm & "' and POREL = '" & sPoRel & "' "
    DB.Execute (sSql,sCols,sRows)
    '
    ' get RFgen mapping table
    If Len(sRows) = 0 Then
      sSql = "select * from RFPO where POPID = '" & sPgm & "' and POREL = 'All' "
      DB.Execute (sSql,sCols,sRows)
    End If

    If Len(sRows) = 0 Then

      sPO = SYS.GetProperty("RFPO","RFPO")
      sPOProp = Split(sPO, Chr(1))
      iCnt = UBound(sPOProp)
      '
      For i=0 To iCnt
        sPOVal = Split(sPOProp(i),Chr(2))
        If Trim(UCase(sPOVal(0))) = Trim(UCase(sPgm)) And Trim(UCase(sPOVal(1))) = Trim(UCase(sPoRel)) Then
          sMap = sPOVal(2)   ' Store Mapping table for JDE Processing options
          sKey = sPOVal(3)   ' Store access key for JDE Processing options
        End If
        '
        If Len(Trim(sMap)) > 0 Then Exit For
        Next i
      '
      If Len(Trim(sMap)) = 0 Then
      '
        For i=0 To iCnt
          sPOVal = Split(sPOProp(i),Chr(2))
          If Trim(UCase(sPOVal(0))) = Trim(UCase(sPgm)) And Trim(UCase(sPOVal(1))) = "ALL" Then
              sMap = sPOVal(2)   ' Store Mapping table for JDE Processing options
              sKey = sPOVal(3)   ' Store access key for JDE Processing options
          End If
        '
        If Len(Trim(sMap)) > 0 Then Exit For
          '
        Next i
      '
      End If
      '
      If Len(Trim(sMap)) = 0 Then
        App.MsgBox(GetMsg(192))
        gbPOError = True
        Exit Function
      End If
     '
    Else
      '
      sMap = DB.Extract(sCols,sRows,1,3)   ' Store Mapping table for JDE Processing options
      sKey = DB.Extract(sCols,sRows,1,4)   ' Store access key for JDE Processing options
      '
    End If
    '
    ' get RFgen saved Proc.Options
    '
    sSql = "select PVPODATA from RF983051 where PVPID = '" & sPgm & "' and PVVERS = '" & sVers & "' "
    DB.Execute(sSql,sCols,sRows)

    If Len(sRows) > 0 Then
      sSav = DB.Extract(sCols,sRows,1,1)
      sSav = Left(sSav,(Len(Trim(sSav)) -1))  ' cut last separator
      sSav = Replace(sSav,"|",Chr(3))
      '
      ' add to dyn array
      msPOSave = Rep(msPOSave,1, -1, sPOKey)
      msPOSave = Rep(msPOSave,2, -1, sSav)
    End If

    If gbIsE1 Then
      If gbTranServer Then  ' get from JDE Proc.Option tables direcctly, not replicated
        '
        ' get Data structure name
        '
        sSql = "select VRDSTNM,VRJD from F983051 where VRPID = '" & sPgm & "' and VRVERS = '" & sVers & "'"
        DB.Execute (sSql,sCols,sRows)

        If Len(sRows) = 0 Then
                    App.MsgBox GetMsg(165) & sPgm & "/" & sVers
          gbPOError = True
          Exit Function
        End If

        App.SetValue("DstName",  DB.Extract(sCols,sRows,1,1))
        sHea = DB.Extract(sCols,sRows,1,2)
        '
        ' get PO Data in a ADO Recordset
        '
        sSql = "select VRPODATA from F983051 where VRPID = '" & sPgm & "' and VRVERS = '" & sVers & "'"
        '
        Set oRs = DB.OpenResultset(sSql)
        '
        If oRs.EOF Then
          App.MsgBox GetMsg(128) & vbCrLf & SysErr.Description
          gbPOError = True
          Exit Function
        End If
        '
        szData = oRs.Fields(0).GetChunk(999999)
        If Len(szData) = 0 Then
          szData = oRs.Fields(0)
        End If

        If (szData(1) = 0) Then
          sJPO = CStr(szData)
        Else
          sJPO = StrConv(szData, vbUnicode)
        End If

        ' Truncate chunk
        nPos = InStr(sJPO,Trim(App.GetValue("DstName")))
        sJPO = Left(sJPO, (nPos -4))
        sJPO = sJPO & "|"
      Else    ' cTranServer    Get Proc.Options from replicated database
        sSql = "select RRPODATA, RRHEADER from RR983051 where " & _
               "RRPID = '" & sPgm & "' and RRVERS = '" & sVers & "' "
        DB.Execute (sSql,sCols,sRows)

        If Len(sRows) = 0 Then
          App.MsgBox(GetMsg(186) & vbCrLf & sPgm & " / " & sVers)
          Exit Function
        End If

        sJPO = DB.Extract(sCols,sRows,1,1)
        sHea = DB.Extract(sCols,sRows,1,2)
      End If  ' cTranServer

      mvJPO = Split(sJPO,"|")
    Else    ' gbIsE1 = false
      '
      ' get PO Header
      '
      sSql = "select DEVERS, DETXT1 from F98301 where " & _
             "DEPID = '" & sPgm & "' and DEVERS = '" & sVers & "' and DETY = 'R' "
      DB.Execute (sSql,sCols,sRows)

      If Len(sRows) = 0 Then
        App.MsgBox GetMsg(225) & ": " & sVers
        Exit Function
      End If

      sHea = DB.Extract(sCols,sRows,1,2)
      '
      ' get PO Data
      '
      sSql = "select DEOPT#,DESVL,DETXT1 from f98301 where " & _
             "DEPID = '" & sPgm & "' and DEVERS = '" & sVers & "'  and DETY = 'O' "
      DB.Execute (sSql,sCols,sRows)
      '
      If Len(sRows) = 0 Then
        App.MsgBox GetMsg(127) & vbCrLf & SysErr.Description
        gbPOError = True
        Exit Function
      End If
      '
      ' extract from recordset, fix left
      For i = 1 To DB.Count(sRows)
        sJPO = sJPO & FixLeft(DB.Extract(sCols,sRows,i,2),4," ") & "|"
      Next i
    End If  ' gbIsE1
    '
    sJPO = Left(sJPO,(Len(sJPO)) -1)  ' cut last separator
    sKey = Left(sKey,(Len(sKey)) -1)  ' cut last separator
    sMap = Left(sMap,(Len(sMap)) -1)  ' cut last separator
    sJPO = Replace(sJPO,"|",Chr(3))
    sKey = Replace(sKey,"|",Chr(3))
    sMap = Replace(sMap,"|",Chr(3))

    ' add to dyn array
    msPOCache = Rep(msPOCache,1, -1, sPOKey)
    msPOCache = Rep(msPOCache,2, -1, sKey)
    msPOCache = Rep(msPOCache,3, -1, sMap)
    msPOCache = Rep(msPOCache,4, -1, sJPO)
    msPOCache = Rep(msPOCache,5, -1, sHea)
  End If

  iFnd = Locate(sPOKey,msPOCache,1)

  ' get value from dyn array
  iKey = Locate(sSearch, msPOCache,2,iFnd)

  If gbIsE1 Then
    iMap = Val(Ext(msPOCache, 3,iFnd, iKey))
    GetProcOpt = Trim(Ext(msPOCache, 4,iFnd, (iMap +1)))    ' return value
  Else
    GetProcOpt = Trim(Ext(msPOCache, 4,iFnd, (iKey)))       ' return value
  End If

  sHeader = Trim(Ext(msPOCache, 5,iFnd))

  ' check saved Proc.Options
  If Len(Trim(Ext(msPOSave,2,iFnd))) > 0 Then
    If GetProcOpt <> Trim(Ext(msPOSave,2,iFnd, (iMap +1))) Then   ' return value
      App.MsgBox(GetMsg(162) & sPgm & " / " & sVers & vbCrLf & GetMsg(245))
    gbPOError = True
    App.ExitForm
    End If
  End If
End Function

Public Function GetItemQty(ByVal sMCU As String,ByVal vITM As Variant,ByVal sLotn As String,ByVal sLOCN As String, ByVal sAllowHold As String, ByRef nOnHand As Currency, ByRef nAvail As Currency, ByRef sHold As String, Optional ByRef bAdj As Boolean) As Boolean
'
' this function calculates and returns the Qty. available, Qty. onHand and Lot Status
' checks for Offline Inventory as well

' INPUT VALUES
' sMCU       <- retrieves the BranchPlant
' vITM       <- retrieves the Short Item number
' sLOTN      <- retrieves the Lot number
' sLOCN      <- retrieves the Location
' sAllowHold <- <> "" sets available Qty. to Zero when Lot has a Lotstatus <> "" (HoldCode)

' RETURN VALUES
' nOnHand  -> returns the Qty on Hand from F41021 and Offline Inv. when avail and switched on
' nAvail   -> returns the Qty available from F41021
' sHold    -> returns the Lot Status Code

  On Error Resume Next
  '
  Dim sSql      As String
  Dim sCols     As String
  Dim sRows     As String
  Dim sLOCNJDE  As String

  Dim iCnt      As Long
  Dim vC41021   As Variant
  Dim vR41021   As Variant
  Dim vR41001   As Variant
  Dim nSafe     As Currency
  Dim nOIonHand As Currency

  GetItemQty = False

  ' In case DB is Oracle
  If gbOracleJDE Then
    If Len(Trim(sLotn)) = 0 Then sLotn = " "
    If Len(sLOCN) = 0 Then sLOCN = " "
  End If

  ' just in case Location is formated
  Call Validate_Locn(sLOCN, sMCU, sLOCNJDE, False)

  ' get Values from Location Detail F41021
  sSql = "select LIPCOM,LIHCOM,LIFCOM,LIQOWO,LIOT1P,LIOT2P,LIPREQ,LIQWBO," & _
         "LIOT1A,LIQTIN,LIQTTR,LIQTO1,LIQTO2,LIQONL,LILOTS,LIPQOH  " & _
         "from F41021 where LIITM = " & vITM & " and LIMCU = '" & sMCU & "' and " & _
         "LILOTN = '" & sLotn & "'  and LILOCN = '" & Trim(sLOCNJDE) & "' "
'  If Len(Trim(sLOCNJDE)) > 0 Then
'    sSql = sSql & "and LILOCN = '" & sLOCNJDE & "' "
'  End If
  DB.Execute(sSql,sCols,sRows)
  '
  If (Len(sRows) = 0) Then
    If bAdj Then   ' if record not found, still return the LotStatus from Lot Master
      sSql = "select IOLOTS from F4108 where IOLOTN = '" & sLotn & "' and IOMCU = '" & sMCU & "' "
      DB.Execute(sSql,sCols,sRows)
      '
      sHold   = Trim(DB.Extract(sCols,sRows,1,1))
      nAvail  = 999999
      nOnHand = 999999
      '
      Exit Function
    Else
      App.MsgBox(GetMsg(74))
      Exit Function
    End If
  End If

  vR41021 = Split(sRows,Chr(2))
  vC41021 = Split(sCols,Chr(2))
  sHold   = Trim(DB.Extract(sCols,sRows,1,15))
  nOnHand = ConvDecimalsFromSQL("PQOH",DB.Extract(sCols,sRows,1,16))

  ' get safety stock from ItemBranch F4102
  sSql = "select IBSAFE  " _
       & " from  F4102 where IBITM = " & vITM & " and IBMCU = '" & sMCU & "' "
  DB.Execute(sSql,sCols,sRows)

  nSafe = ConvDecimalsFromSQL("SAFE",DB.Extract(sCols,sRows,1,1))

  ' get Availability definition from F41001
  sSql = "select CIDA01,CIDA02,CIDA03,CIDA04,CIDA05,CIDA06,CIDA08,CIDA09,CIDA10," & _
         "CIDA12,CIDA13,CIDA14,CIDA15,CIDA16,CIDA07,CIDA11 " _
       & "from  F41001 where CIMCU = '" & sMCU & "'  "
  DB.Execute(sSql,sCols,sRows)

  vR41001 = Split(sRows,Chr(2))
  nOnHand = ConvDecimalsFromSQL("PQOH", CDbl(DB.Extract(sCols, sRows, 1, 1)))

  If gbOfflineEnabled Then
    GetOnHandOI(sMCU,vITM,sLotn,sLOCNJDE,nOIonHand)
    nOnHand = nOnHand + nOIonHand ' sum F41021 and OI001
  End If

  nAvail = nOnHand

  ' calculate availability
  For iCnt = 0 To 13
    Select Case vR41001(iCnt)
      Case "-"                                'Fieldname(sCols)    Value(sRows)
        nAvail = nAvail - ConvDecimalsFromSQL(Mid(vC41021(iCnt),3,4), CCur(vR41021(iCnt)))
      Case "+"
        nAvail = nAvail + ConvDecimalsFromSQL(Mid(vC41021(iCnt),3,4), CCur(vR41021(iCnt)))
      Case Else
    End Select
  Next iCnt

  ' Lots on Hold
  '
  If vR41001(14) <> "-" And sHold <> "" And sAllowHold = "" Then
    nAvail = 0
  End If

  ' Safety Stock
  If Len(Trim(sLOCNJDE)) = 0 Then
    If vR41001(15) = "-" Then
      nAvail = nAvail - nSafe
    Else
    If vR41001(15) = "+" Then
      nAvail = nAvail + nSafe
    End If
    End If
  End If

  GetItemQty = True
End Function

Public Function GetItemAvailSQL(ByVal sMCU As String, ByRef sSqlString As String) As Boolean
  '
  ' the function returns part of an SQL statement to retrieve Qty available from F41021
  '
  On Error Resume Next
  '
  '
  Dim sSql      As String
  Dim sCols     As String
  Dim sRows     As String
  Dim sF41021   As String
  Dim vArray41  As Variant
  Dim iCnt      As Integer
  Dim vR41001   As Variant
  '
  sSqlString = ""
  '
  sF41021 = "LIPCOM,LIHCOM,LIFCOM,LIQOWO,LIOT1P,LIOT2P,LIPREQ,LIQWBO,LIOT1A,LIQTIN,LIQTTR,LIQTO1,LIQTO2,"
  vArray41 = Split(sF41021,",")
  '
  ' get Availability definition from F41001
  '
  sSql = "select CIDA01,CIDA02,CIDA03,CIDA04,CIDA05,CIDA06,CIDA08,CIDA09,CIDA10," & _
         "CIDA12,CIDA13,CIDA14,CIDA15,CIDA16,CIDA07,CIDA11 " _
       & "from  F41001 where CIMCU = '" & sMCU & "'  "
  DB.Execute(sSql,sCols,sRows)

  vR41001 = Split(sRows,Chr(2))
  '
  ' find fieldnames
  '
  For iCnt = 0 To 13
    Select Case vR41001(iCnt)
      Case "-"
        sSqlString = sSqlString & " -" & vArray41(iCnt)
      Case "+"
        sSqlString = sSqlString & " +" & vArray41(iCnt)
      Case Else
    End Select
  Next iCnt
  '
  sSqlString = "(LIPQOH" & sSqlString & ") "
End Function

Public Function GetItemPrimary(ByVal sMCU As String,ByVal vITM As Variant,ByRef sLotn As String,ByRef sLOCN As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String

  GetItemPrimary = False

  sSql = "select LILOCN, LILOTN from  F41021 where LIITM = " & vITM & " and " & _
         "LIMCU = '" & sMCU & "' and LIPBIN = 'P' "
  DB.Execute(sSql,sCols,sRows)

  If Len(sRows) = 0 Then
    App.MsgBox GetMsg(161)
    Exit Function
  End If

  sLOCN = FormatLocnDisplay(DB.Extract(sCols,sRows,1,1),sMCU)
  sLotn = Trim(DB.Extract(sCols,sRows,1,2))

  GetItemPrimary = True
End Function

Public Function GetItemInfo(ByVal sMCU As String, ByVal sLITM As String, ByRef cTNID As String, ByRef nITM As Long, ByRef sAITM As String, ByRef sUOM As String, ByRef sUOM2 As String, ByRef nQty As Currency, ByRef nQty2 As Currency) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String

  GetItemInfo = False
  '
  ' Get default information for this item
  '
  sSql = "select IBITM, IBAITM from  F4102" & _
         " where IBLITM = '" & sLITM & "' and IBMCU = '" & sMCU & "'"
  '
  If Ext(gsLog,5) = "1" Then Call TranLog(cTNID, "5", "F4102", Replace(sSql, "'", "`"))

  DB.Execute(sSql,sCols,sRows)
  '
  If (Len(sRows) = 0) Then
    App.LogError "DB.Execute", "SQL call did not return any rows" & vbCrLf & sSql
    If Ext(gsLog,6) = "1" Then Call TranLog(cTNID, "6", "F4102", Replace(sSql, "'", "`"))
    Exit Function
  End If
  '
  nITM  = DB.Extract(sCols,sRows,1,"IBITM")
  sAITM = DB.Extract(sCols,sRows,1,"IBAITM")
  '
  ' Get UOM2 for this item
  '
  sSql = "select IMUOM2 from F4101" & _
         " where IMLITM = '" & sLITM & "' "
  '
  If Ext(gsLog,5) = "1" Then Call TranLog(cTNID, "5", "F4101", Replace(sSql, "'", "`"))

  DB.Execute(sSql,sCols,sRows)
  '
  If (Len(sRows) = 0) Then
    App.LogError "DB.Execute", "SQL call did not return any rows" & vbCrLf & sSql
    If Ext(gsLog,6) = "1" Then Call TranLog(cTNID, "6", "F4101", Replace(sSql, "'", "`"))
    Exit Function
  End If
  '
  If Trim(DB.Extract(sCols,sRows,1,"IMUOM2")) <> Trim(sUOM) Then
    sUOM2 = DB.Extract(sCols,sRows,1,"IMUOM2")
    nQty2 = nQty
    ConvUOM(CStr(nITM),nQty2,sUOM,sUOM2)
  Else
    sUOM2 = sUOM
    nQty2 = nQty
  End If

  GetItemInfo = True
End Function

Public Function GetLotInfo(ByVal sMCU As String, ByVal sItem As String, ByRef sLotn As String, ByRef sLOTS As String, ByRef sLOTDesc As String, ByRef sXPDT As String, Optional ByRef sLOT1 As String, Optional sLOT2 As String) As Boolean
  On Error Resume Next
  '
  Dim sSql    As String
  Dim sCols   As String
  Dim sRows   As String
  Dim cTNID   As String
  Dim sDRDL01 As String
  Dim sDRDL02 As String
  Dim sValue  As String
  Dim nITM    As Long

  GetLotInfo = False
  cTNID = "GetLotInfo"

  ' In case DB is Oracle
  If gbOracleJDE Then
    If Len(Trim(sLotn)) = 0 Then sLotn = " "
  End If
  '
  ' Get default information for this item
  '
  sSql = "select IBITM, IBAITM from  F4102" & _
         " where IBLITM = '" & sItem & "' and IBMCU = '" & sMCU & "'"
  '
  If Ext(gsLog,5) = "1" Then Call TranLog(cTNID, "5", "F4102", Replace(sSql, "'", "`"))

  DB.Execute(sSql,sCols,sRows)
  '
  If (Len(sRows) = 0) Then
    App.LogError "DB.Execute", "SQL call did not return any rows" & vbCrLf & sSql
    If Ext(gsLog,6) = "1" Then Call TranLog(cTNID, "6", "F4102", Replace(sSql, "'", "`"))
    Exit Function
  End If
  '
  nITM  = DB.Extract(sCols,sRows,1,"IBITM")
  '
  ' Get Lot information
  '
  sSql = "select IOLOTS, IOLOT1, IOLOT2, IOMMEJ  from F4108" & _
         " where IOLOTN = '" & sLotn & "' and IOMCU = '" & sMCU & "' and IOITM = " & nITM & " "
  '
  If Ext(gsLog,5) = "1" Then Call TranLog(cTNID, "5", "F4101", Replace(sSql, "'", "`"))

  DB.Execute(sSql,sCols,sRows)
  '
  If (Len(sRows) = 0) Then
    App.LogError "DB.Execute", "SQL call did not return any rows" & vbCrLf & sSql
    If Ext(gsLog,6) = "1" Then Call TranLog(cTNID, "6", "F4101", Replace(sSql, "'", "`"))
    Exit Function
  End If
  '
  sLOTS = DB.Extract(sCols,sRows,1,"IOLOTS")
  '
  sValue = FixRight(FixLeft(Trim(UCase(sLOTS)), 1, " "), 10, " ")
  If Not Validate_UDC(sValue, "41", "L ", sDRDL01, sDRDL02) Then Exit Function
  '
  sLOTDesc = sDRDL01
  '
  sXPDT = ConvJDEtoDate(DB.Extract(sCols,sRows,1,"IOMMEJ"))
  sLOT1 = ConvJDEtoDate(DB.Extract(sCols,sRows,1,"IOLOT1"))
  sLOT2 = ConvJDEtoDate(DB.Extract(sCols,sRows,1,"IOLOT2"))

  GetLotInfo = True
End Function

Public Function GetNewLot(ByRef sMCU As String, ByRef nITM As Long, Optional ByRef sExpDate As String, Optional ByRef sLotn As String) As String
  On Error Resume Next
  ' This function returns a new lot number regarding the Branch Plant settings
  '
  Dim sSql    As String
  Dim sRows   As String
  Dim sCols   As String
  Dim sSRCE   As String
  Dim n02SLD  As Integer
  Dim nNN     As Long
  Dim sNN     As String
  Dim sDate   As String
  Dim sNNDt   As String
  '
  ' get lot defauls
  sSql = "select IBSRCE, IBSLD from  F4102" & _
         " where IBITM = " & nITM & " And IBMCU = '" & sMCU & "' "
  DB.Execute(sSql,sCols,sRows)
  '
  If (Len(sRows) = 0) Then
    App.MsgBox(GetMsg(64))
    Exit Function
  End If
  '
  sSRCE = DB.Extract(sCols,sRows,1,"IBSRCE")
  n02SLD = DB.Extract(sCols,sRows,1,"IBSLD")
  '
  If Len(Trim(sLotn)) = 0 Then
    '
    Select Case sSRCE     'Create New Lot Number
      '
      Case "1","5" ' Lot required YYYYMMDD + NNNN
        sSql = "select NNN008 from F0002 where NNSY = '40' "
        DB.Execute(sSql,sCols,sRows)
        sNN = DB.Extract(sCols,sRows,1,1)

        sDate = Format(Format(Date, "MMDD"), "####")
        sNNDt = Left(sNN,Len(sDate))

        If sDate <> sNNDt Then      'check for new date
          nNN = 1
        Else
          nNN = Val(Mid$(sNN,Len(sDate) +1, 4))
        End If

        GetNewLot = Format(Date, "YYYYMMDD") & FixRight(CStr(nNN), 4, "0")

        nNN = nNN +1
        sNN = sDate & FixRight(nNN, 4, "0")
        sSql = "update F0002 set NNN008 = " & sNN & " where NNSY = '40' "
        DB.Execute sSql

      Case "2","6" ' Lot required NNNN
        sSql = "select NNN001 from F0002 where NNSY = '40' "
        DB.Execute(sSql,sCols,sRows)
        nNN = DB.Extract(sCols,sRows,1,1)
        nNN = nNN +1
        sSql = "update F0002 set NNN001 = " & nNN & " where NNSY = '40' "
        DB.Execute sSql
        GetNewLot = CStr(nNN)

      Case "3","7" ' Lot required, assign manually

    End Select
    '
  End If

  If n02SLD > 0 Then
    sExpDate = CStr(DateAdd("d",CStr(n02SLD),Date))
  Else
    sSql = "select IMSLD from  F4101" & _
           " where IMITM = " & nITM & " "
    DB.Execute(sSql,sCols,sRows)
    '
    If Len(sRows) > 0 Then
      sExpDate = CStr(DateAdd("d",CStr(DB.Extract(sCols,sRows,1,1)),Date))
    End If
  End If
End Function

Public Function Validate_Item(ByVal sMCU As String, ByRef sItem As String, Optional ByRef sITM As String, Optional ByRef sLITM As String, Optional ByRef sAITM As String, Optional ByRef sDSC1 As String, Optional ByRef sUOM As String, Optional ByRef nType As Long, Optional ByRef bLot As Boolean, Optional ByRef bSerial As Boolean, Optional ByRef bSkipMCU As Boolean, Optional ByRef bSilent As Boolean) As Boolean
  On Error Resume Next

  Dim sSql   As String
  Dim sCols  As String
  Dim sRows  As String
  Dim sWhere As String
  Dim sLotn  As String
  Dim oList  As New SearchList
  Dim sValue As String

  Validate_Item = False

  bLot    = False
  bSerial = False

  sItem = Trim(UCase(sItem))

  ' In case DB is Oracle
  If gbOracleJDE Then
    If Len(Trim(sLotn)) = 0 Then sLotn = " "
  End If

  If gbItemFrmLot Then
    ' Get Item by Lot number
    sSql = "select IOITM, IOLITM, IOAITM from F4108 where IOMCU = '%tmMCU' and IOLOTN = '" & sItem & "' "
    DB.Execute(sSql, sCols, sRows)
    If Len(sRows) > 0 Then
      Select Case App.GetValue("tmCISY")
        Case 1
          sWhere = "IOITM"
        Case 2
          sWhere = "IOLITM"
        Case 3
          sWhere = "IOAITM"
      End Select
      If DB.Count(sRows) > 1 Then
        sSql = "select " & sWhere & " , IOLDSC from F4108 where IOMCU = '" & sMCU & "' and IOLOTN = '" & sItem & "' "
        sLotn = sItem
        oList.MaxRows = giMaxSearchRows
        oList.ShowEmptyList = True
        oList.ReturnAllRows = True
        oList.SetColumn(1, "Item", giLenItem, CenterLeft, True)
        oList.SetColumn(2, "Desc",        10, CenterLeft, True)
        oList.SQL = sSql
        sValue = oList.ShowList
        sItem  = LField(sValue, Chr(3), 1)
      Else
        sLotn = sItem
        sItem = DB.Extract(sCols, sRows, 1, sWhere)
      End If
    End If
    If Len(sLotn) > 0 Then RFPrompt("txtLOTN").Text = sLotn
  End If

  ' Get what Item number is used
  Select Case App.GetValue("tmCISY")
    Case 1
      sWhere = "IMITM = " & sItem & " "
    Case 2
      sWhere = "IMLITM = '" & sItem & "' or IMAITM = '" & sItem & "'"
    Case 3
      sWhere = "IMAITM = '" & sItem & "' or IMLITM = '" & sItem & "'"
  End Select

  sSql = "select IMITM, IMLITM, IMAITM, IMDSC1, IMUOM1 from  F4101" & _
         " where " & sWhere
  DB.Execute(sSql, sCols, sRows)

  If Len(sRows) = 0 Then
    If Not bSilent Then App.MsgBox(GetMsg(63))
    Exit Function
  End If

  sItem = Trim(DB.Extract(sCols, sRows, 1, "IMLITM"))
  sITM  = Trim(DB.Extract(sCols, sRows, 1, "IMITM"))
  sLITM = Trim(DB.Extract(sCols, sRows, 1, "IMLITM"))
  sAITM = Trim(DB.Extract(sCols, sRows, 1, "IMAITM"))
  sDSC1 = Trim(DB.Extract(sCols, sRows, 1, "IMDSC1"))
  sUOM  = DB.Extract(sCols, sRows, 1, "IMUOM1")

  If Not bSkipMCU Then
    ' Validate item within branch plant
    sSql = "select IBSRCE from  F4102" & _
           " where IBITM = " & sITM & " and IBMCU = '" & sMCU & "'"
    DB.Execute(sSql, sCols, sRows)
    If Len(sRows) = 0 Then
      If Not bSilent Then App.MsgBox(GetMsg(64))
      Exit Function
    End If
  End If

  bLot    = False
  bSerial = False

  nType = Val(DB.Extract(sCols, sRows, 1, "IBSRCE"))

  If nType <> 0 Then bLot = True

  If nType >= 5 Then bSerial = True

  Validate_Item = True

End Function

Public Function Validate_PDDOCO(ByVal sMCU As String, ByRef vDOCO As Variant, ByVal sStatusF As String, ByVal sStatusT As String, ByRef sDCTO As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  '
  Validate_PDDOCO = False

  sSql = "select count(*) from F4311" & _
         " where PDMCU = '" & sMCU & "' and PDDOCO = " & vDOCO & " " & _
         " and PDNXTR between '" & sStatusF & "' and '" & sStatusT & "' "
  DB.Execute(sSql, sCols, sRows)
  '
  If (Val(sRows) = 0) Then
    App.MsgBox GetMsg(166)
    Exit Function
  End If

  sSql = "select PHDCTO from  F4301" & _
         " where PHDOCO = " & vDOCO & " and PHMCU = '" & sMCU & "' "
  '
  DB.Execute(sSql, sCols, sRows)
  '
  ' If Ordernumber is unique default DocType
  '
  If (DB.Count(sRows) = 1) Then
    sDCTO = DB.Extract(sCols,sRows,1,"PHDCTO")
  End If

  Validate_PDDOCO = True
End Function

Public Function Validate_PDDCTO(ByVal sMCU As String, ByVal vDOCO As Variant, ByRef sDCTO As String, ByVal sStatusF As String, ByVal sStatusT As String) As Boolean
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  '
  Validate_PDDCTO = False
  '
  sDCTO = Trim(UCase(sDCTO))
  sSql = "select count(*) from F4311" & _
         " where PDMCU = '" & sMCU & "' and PDDOCO = " & vDOCO & " and PDDCTO = '" & sDCTO & "' " & _
         " and PDNXTR between '" & sStatusF & "' and '" & sStatusT & "' "
  DB.Execute(sSql, sCols, sRows)
  '
  If (Val(sRows) = 0) Then
    App.MsgBox(GetMsg(157))
    Exit Function
  End If
  '
  Validate_PDDCTO = True
End Function
'
' This function is ScreenMapping only

Public Function GetWorldErr(ByRef sErrId As String, ByRef sERRTEXT As String)
  On Error Resume Next
  '
  Dim sErrorID As String
  Dim sErrors  As String
  Dim vArray   As Variant
  Dim iCnt     As Integer
  '
  If Len(Trim(gsSMErr)) = 0 Then
    '
    vArray = Split(SYS.GetProperty("Config", "Env"), "|")
    gsSMErr = vArray(2)
    vArray = Split(gsSMErr,";")
    gsSMErr = ""
    '
    For iCnt = 0 To UBound(vArray)
      gsSMErr  = Rep(gsSMErr, 1, -1, vArray(iCnt))
    Next iCnt
  End If
  '
  SM.SendKey KeyF7
  SM.GetText 5, 3, 4, sErrorID, True
  '
  ' add Warnings in JDE.bas!!     0000 indicates wrong financial period -> Ignore

  If Locate(sErrorID,gsSMErr,1) = 0 Then
    SM.GetText 16, 3, 40, sErrors, True
    sErrId = sErrorID
    sERRTEXT = sErrors
  End If
  '
  SM.GetText 5, 4, 4, sErrorID, True
  '
  If Len(sErrorID) > 0 And Locate(sErrorID,gsSMErr,1) = 0 Then
    SM.GetText 16, 4, 40, sErrors, True
    sErrId = sErrorID
    sERRTEXT = sErrors
  End If
  '
  SM.SendKey KeyF3
End Function

Public Function ItemCost(ByRef sMCU As String, ByRef nITM As String, ByRef sLEDG As String, ByRef sDate As String, ByRef nUNCS As Currency)
  On Error Resume Next
  '
  Dim sSql As String
  Dim sCols As String
  Dim sRows As String
  '
  nUNCS = 0
  '
  sSql = "select COUNCS from F4105 " & _
         " where COITM = " & nITM & " and COMCU = '" & sMCU & "' and COLEDG = '" & sLEDG & "' "
  '
  DB.Execute(sSql,sCols,sRows)
  nUNCS = ConvDecimalsFromSQL("UNCS",DB.Extract(sCols,sRows,1,1))
End Function

Public Function ItemPrice(ByRef sMCU As String, ByRef nITM As String, ByRef sDate As String, ByRef nUPRC As Currency)
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  Dim nDate As Long
  '
  nUPRC = 0
  '
  nDate = CLng(ConvDatetoJDE(sDate))
  '
  sSql = "select BPUPRC from F4106 " & _
         " where BPITM = " & nITM & " and BPMCU = '" & sMCU & "' " & _
         " and BPEFTJ <= " & nDate & " and BPEXPDJ >= " & nDate & " "
  DB.Execute(sSql,sCols,sRows)
  '
  nUPRC = ConvDecimalsFromSQL("UPRC",DB.Extract(sCols,sRows,1,1))
End Function

Public Function TranLog(ByRef sTranId As String, ByRef sErrId As String, ByRef sErrDesc As String, Optional ByRef sSqlCmd As String, Optional ByRef oProc As Object, Optional ByRef sUser As String, Optional ByRef sQueueName As String, Optional ByRef nQueueSeq As Long)
  On Error Resume Next
  '
  Dim sSql        As String
  Dim sCols       As String
  Dim sRows       As String
  Dim nUKID       As Double
  Dim sDateTime   As String
  Dim sJOBN       As String
  Dim sProcData   As String
  Dim i           As Integer
  Dim iCnt        As Integer
  Dim sProcParams As String
  Dim sUserlist   As String
  Dim iDeviceId   As Integer
  Dim sMsg        As String
  Dim sUsrLst     As String
  '
  sJOBN = App.IpAddress()
  sUser = Left(Trim(UCase(sUser)), 10)
  '
  sDateTime = Format(Date, "YYYYMMDD") & Format(Time, "HHNNSS")
  '
  ' If the error originated from a business function...
  If Trim(sSqlCmd) = "" Then
    iCnt = CInt(oProc.ParamCount)
    '
    For i = 1 To iCnt
      sProcData = sProcData & oProc.ParamName(i) & ":"  & oProc.Param(i) & "|"
    Next i
    '
    ' (optional) send message to handheld if BSNF call failed
    '
    If nQueueSeq > 0 And Ext(gsLog,10) = "1" Then
    '
      sUserlist = SYS.UserList(True)
      i = 1
      '
      Do While Len(Ext(sUserlist,1,i)) > 0
        sUsrLst = Ext(sUserlist,2,i)
        '
        If Trim(UCase(Left(sUser,9))) = sUser Then
          iDeviceId = CInt(Ext(sUserlist, 1, i))
          '
          Call LoadLanguage(sUser)
          '  gsLanguage(258) = "TM failed for %1!"
          sMsg = Replace(GetMsg(258),"%1",sTranId)
          SYS.SendMessage(iDeviceId, sMsg & vbCrLf & sErrDesc & " Queue: " & sQueueName & " Number: " & nQueueSeq)
        End If
        '
        i = i + 1
      Loop
    End If
    '
  ' If the error originated from a SQL statement.
  Else
    sProcData = sSqlCmd
  End If

  sSql = "select max(RFUKID) as RFUKID from RFLOG"
  DB.Execute(sSql, sCols, sRows)
  '
  If (Len(sRows) <> 0) Then
    nUKID = DB.Extract(sCols, sRows, 1, "RFUKID")
  End If

  nUKID = nUKID + 1
  '
  ' Insert an entry in the error log table.
  sProcData = Replace(sProcData,Chr(34)," ")
  sSql = "insert into RFLOG values('"& sTranId &"', '"& sErrId &"', '"& sErrDesc &"', '"& sProcData &"', " _
       & "'"& sJOBN &"', '"& sUser &"', '" & sDateTime & "', '" & sQueueName & "', '" & nQueueSeq & "', " & nUKID & ")"
  DB.Execute(sSql)
End Function

Public Function ValidateOBJ(ByRef Rsp As String) As Boolean
  On Error Resume Next
  '
  Dim sSql As String
  Dim sCols As String
  Dim sRows As String
  '
  ValidateOBJ = False
  Rsp = Trim(UCase(Rsp))
  sSql = "select count(*) from F0901 where GMOBJ = '" & FixLeft(Rsp,6," ") & "'"
  DB.Execute(sSql, sCols, sRows)
  '
  If Val(sRows) = 0 Then
    App.MsgBox(GetMsg(80))
    Exit Function
  End If
  '
  ValidateOBJ = True

End Function

Public Function ValidateSub(ByRef Rsp As String) As Boolean
  On Error Resume Next
  '
  Dim sSql As String
  Dim sCols As String
  Dim sRows As String
  '
  If Rsp = "" Then Exit Function
  ValidateSub = False
  Rsp = Trim(UCase(Rsp))
  sSql = "select count(*) from F0901 where GMSUB = '" & FixLeft(Rsp,8," ") & "'"
  DB.Execute(sSql, sCols, sRows)
  '
  If Val(sRows) = 0 Then
    App.MsgBox(GetMsg(84))
    Exit Function
  End If
  ValidateSub = True
End Function

Public Function Concat_AccountNbr(ByVal sABU As String, ByVal sAOBJ As String, ByVal sASUB As String, ByRef sAccount As String)
  On Error Resume Next
  '
  Dim sSql        As String
  Dim sCols       As String
  Dim sRows       As String
  Dim sBranch     As String
  Dim sObject     As String
  Dim sSubsidiary As String
  Dim sSep        As String
  '
  sSql = "select GCSEP from F0009"
  DB.Execute(sSql, sCols, sRows)
  sSep = Trim(DB.Extract(sCols, sRows, 1, "GCSEP")) ' Account seperator from General Constants
  '
  If sABU <> "" Then
    sABU = UCase(sABU)
    sBranch = LTrim(sABU)
    sAccount = (sBranch & sSep)
  Else
    Exit Function
  End If
  '
  If sAOBJ <> "" Then
    sAOBJ = UCase(sAOBJ)
    sObject = LTrim(sAOBJ)
    sAccount = (sAccount & sObject)
  Else
    Exit Function
  End If
  '
  If sASUB <> "" Then
    sASUB = UCase(sASUB)
    sSubsidiary = LTrim(sASUB)
    sAccount = (sAccount & sSep & sSubsidiary)
  End If
End Function
'
'Create the msPOCache values from DD
'
Public Function CrtDDCache(ByVal sDTAI As String)
  On Error Resume Next
  '
  Dim iFnd    As Integer
  Dim sSql    As String
  Dim sRows   As String
  Dim sCols   As String
  Dim sClas   As String
  Dim sFormat As String
  Dim iDecCnt As Integer
  Dim nDecMult As Currency
  Dim nErrNo As Long
  Dim bDidRetry1 As Boolean
  Dim bDidRetry2 As Boolean

    '
  sDTAI = Trim(UCase(sDTAI))
  '
  ' lookup in data dictionary
  '
Retry1:
  If gbIsE1 Or gsJDEVers = "A9.2" Then
    sSql = "select FRCDEC, FRCLAS from  F9210 " & _
           " where FRDTAI = '" & sDTAI & "'"
  Else
    sSql = "select FRCDEC, FRCLAS from  F9201 " & _
           " where FRDTAI = '" & sDTAI & "'
  End If
  '
  nErrNo = DB.Execute(sSql, sCols, sRows)

  If Len(sRows) = 0 Then
    ' Retry at most once
    If Not bDidRetry1 Then
      bDidRetry1 = True
      GoTo Retry1
    End If
  End If

  sClas = DB.Extract(sCols, sRows, 1, 2)

Retry2:
  If Len(Trim(sClas)) <> 0 Then   ' if DD is overriden by a Data Item Class
    If gbIsE1 Or gsJDEVers = "A9.2" Then
     sSql = "select FRCDEC from  F9210 " & _
            " where FRDTAI = '" & sClas & "'"
    Else
     sSql = "select FRCDEC from  F9201 " & _
            " where FRDTAI = '" & sClas & "'"
    End If
    '
    nErrNo = DB.Execute(sSql, sCols, sRows)

    If Len(sRows) = 0 Then
      ' Retry at most once
      If Not bDidRetry2 Then
        bDidRetry2 = True
        GoTo Retry2
      End If
    End If
  End If
  '
  iDecCnt = Val(DB.Extract(sCols, sRows, 1, 1))
  '
  If (iDecCnt<0) Then iDecCnt = 0
  '
  If (iDecCnt = 0) Then
    sFormat  = "#,###"
    nDecMult = 1
  Else
    sFormat = "#,###." & String(iDecCnt, "0")
    nDecMult = 1 / (10 ^ iDecCnt)
  End If
  '
  ' Add entry to cache
  msDictCache = Rep(msDictCache, 1, -1, sDTAI)
  msDictCache = Rep(msDictCache, 2, -1, iDecCnt)
  msDictCache = Rep(msDictCache, 3, -1, nDecMult)
  msDictCache = Rep(msDictCache, 4, -1, sFormat)
End Function

Public Function LoadLanguage(ByRef sName As String)
  On Error Resume Next
  '
  Dim sLang As String
  '
  App.User = sName
  sLang = GetUserInfo("Language")
  '
  If Len(Trim(sLang)) = 0 Then
    sLang = "English"
  End If
  '
  Select Case sLang
    Case "English
      Call LoadEnglish

    Case "German"
      Call LoadGerman

    Case "Spanish"
      Call LoadSpanish

    Case "French"
      Call LoadSpanish
  End Select
End Function

Public Function GetMsg(ByRef iNum As Integer) As String
  On Error Resume Next
  '
  GetMsg = "[" & CStr(iNum) & "] " & gsLanguage(iNum)
  If GetMsg = "" Then GetMsg = gsLanguage(0)
End Function

Public Function LoadEnglish
  On Error Resume Next
  '
  gsLanguage(0) = "Unknown Error"
  gsLanguage(1) = "Add new Item number to this Work Order? Continue?"
  gsLanguage(2) = "Asset already entered"
  gsLanguage(3) = "Asset Count Failed"
  gsLanguage(4) = "Asset Disposal Failed"
  gsLanguage(5) = "Asset Number Must Be Specified"
  gsLanguage(6) = "Asset Transfer Failed"
  gsLanguage(7) = "Backorder Release Failed"
  gsLanguage(8) = "Barcode Error"
  gsLanguage(9) = "Blind Execution will confirm all lines with Opt. '1'. Continue?"
  gsLanguage(10) = "Branch Plant constants not set up"

  gsLanguage(11) = "Branch Plant or Location needs to change"
  gsLanguage(12) = "Cannot detach plate. Is attached to LP: "
  gsLanguage(13) = "Cannot transfer location plate attached to LP: "
  gsLanguage(14) = "Carrier Number invalid"
  gsLanguage(15) = "Characters required for search."
  gsLanguage(16) = "Configuration Error - Company Information Missing For Branch Plant: "
  gsLanguage(17) = "Confirm only assigned Lot Number"
  gsLanguage(18) = "Confirm selected Item: "
  gsLanguage(19) = "Cost cannot be negative"
  gsLanguage(20) = "Cost must be numeric"

  gsLanguage(21) = "Date is greater than max shelf life days. - Re-enter"
  gsLanguage(22) = "Date is less than or equal to today's date. - Re-enter"
  gsLanguage(23) = "Date must be future date - Re-enter"
  gsLanguage(24) = "Employee Rate Not Found"
  gsLanguage(25) = "Enter a value between 0 and 99999"
  gsLanguage(26) = "Entered Qty does not fit Kanban Qty. Continue anyway?"
  gsLanguage(27) = "Entity not assigned for this plant"
  gsLanguage(28) = "Entity not found."
  gsLanguage(29) = "Entry Invalid"
  gsLanguage(30) = "Error reading F43091"

  gsLanguage(31) = "Error writing Offline Inventory. See IT Department"
  gsLanguage(32) = "Error! New weight / volume exceeds trailer"
  gsLanguage(33) = "Exceeds Maximum Qty on LP: "
  gsLanguage(34) = "Exceeds Maximum Quantity"
  gsLanguage(35) = "Exceeds Maximum Quantity On Hand"
  gsLanguage(36) = "Exceeds Maximum SO Quantity"
  gsLanguage(37) = "Exceeds Quantity Available"
  gsLanguage(38) = "Failed adjust weight and volume."
  gsLanguage(39) = "Failed to attach item"
  gsLanguage(40) = "Failed to attach to License Plate"

  gsLanguage(41) = "Failed to create License Plate"
  gsLanguage(42) = "Failed to delete plate"
  gsLanguage(43) = "Failed to pick items"
  gsLanguage(44) = "Failed to process items"
  gsLanguage(45) = "Failed to save changes"
  gsLanguage(46) = "Failed to ship items"
  gsLanguage(47) = "Failed to update License Plate"
  gsLanguage(48) = "For serialized Item Quantity Must Be '1' "
  gsLanguage(49) = "Invalid Account - Please Re-Enter"
  gsLanguage(50) = "Invalid Asset ID - Please Re-enter"

  gsLanguage(51) = "Invalid Branch Plant - Please Re-Enter"
  gsLanguage(52) = "Invalid Chart of Accounts F0901 Record - Re-enter"
  gsLanguage(53) = "Invalid Company"
  gsLanguage(54) = "Invalid Company Master F0010 - Please Re-Enter"
  gsLanguage(55) = "Invalid Cycle Count Number"
  gsLanguage(56) = "Invalid date"
  gsLanguage(57) = "Invalid date format. use MM/DD/YY"
  gsLanguage(58) = "Invalid Disposal Rules - F1204 Record - Re-enter"
  gsLanguage(59) = "Invalid Employee Number"
  gsLanguage(60) = "Invalid F1202 Record - Re-enter"

  gsLanguage(61) = "Invalid FROM Status"
  gsLanguage(62) = "Invalid Item- / Lot- / Location Combination"
  gsLanguage(63) = "Invalid Item Number"
  gsLanguage(64) = "Invalid Item Number For This Branch Plant"
  gsLanguage(65) = "Invalid Item Number For This License Plate"
  gsLanguage(66) = "Invalid Item Number for this Work Order"
  gsLanguage(67) = "Invalid Item Number. Module: ConvUOM"
  gsLanguage(68) = "Invalid Kanban Card Number"
  gsLanguage(69) = "Invalid Kanban ID"
  gsLanguage(70) = "Invalid Kanban ID for Check Out"

  gsLanguage(71) = "Invalid Kanban ID for this Branch Plant"
  gsLanguage(72) = "Invalid line type"
  gsLanguage(73) = "Invalid Load number"
  gsLanguage(74) = "Invalid Location"
  gsLanguage(75) = "Invalid Location for Item- / Lot- / Location Combination"
  gsLanguage(76) = "Invalid Location in F4100 - Please Re-Enter!"
  gsLanguage(77) = "Invalid Location in F41021 - Please Re-Enter!"
  gsLanguage(78) = "Invalid Lot Number"
  gsLanguage(79) = "Invalid Lot Number for this PO"
  gsLanguage(80) = "Invalid object account"

  gsLanguage(81) = "Invalid operation for this Work Order"
  gsLanguage(82) = "Invalid Plant. Please Re-enter"
  gsLanguage(83) = "Invalid Quantity"
  gsLanguage(84) = "Invalid subsidiary account"
  gsLanguage(85) = "Invalid Time Format. Use hhmm"
  gsLanguage(86) = "Invalid TO Status"
  gsLanguage(87) = "Invalid UDC Code "
  gsLanguage(88) = "Order is locked by other user! (F00095)"
  gsLanguage(89) = "Invalid Unit Number - Please Re-enter"
  gsLanguage(90) = "Item / Location not in Cycle Count"

  gsLanguage(91) = "Item / Location not in Cycle Count. Process anyway?"
  gsLanguage(92) = "Item / Lot not in Cycle Count"
  gsLanguage(93) = "Item / Lot not in Cycle Count. Process anyway?"
  gsLanguage(94) = "Item has Disposal Date:"
  gsLanguage(95) = "Item has Disposal or Retirement Date"
  gsLanguage(96) = "Item not found."
  gsLanguage(97) = "Item not in Cycle Count"
  gsLanguage(98) = "Item not in Cycle Count. Process anyway?"
  gsLanguage(99) = "Item number invalid for this Work Order?"
  gsLanguage(100) = "Item number not in PO"

  gsLanguage(101) = "Item number not in SO"
  gsLanguage(102) = "JDE / LP out of sync. JDE does not have enough quantity. "
  gsLanguage(103) = "License Plate assigned to different plant"
  gsLanguage(104) = "License Plate Not Found"
  gsLanguage(105) = "License Plate Not Found in this Load"
  gsLanguage(106) = "Not Used"
  gsLanguage(107) = "License Plating has not been configured"
  gsLanguage(108) = "Line # invalid. Max. Length is 2 characters"
  gsLanguage(109) = "Line # Must Be Entered"
  gsLanguage(110) = "Line number does not exist"

  gsLanguage(111) = "Line number not in PO"
  gsLanguage(112) = "Line number not in SO"
  gsLanguage(113) = "Load not found! Create new Load?"
  gsLanguage(114) = "Location assign in SO"
  gsLanguage(115) = "Location assign in SO. Search not allowed."
  gsLanguage(116) = "Location hard committed in SO: "
  gsLanguage(117) = "Login failed to ERP SYS. Please Re-enter"
  gsLanguage(118) = "Lot has a Hold code: "
  gsLanguage(119) = "Lot is on Hold. Adjustment not allowed"
  gsLanguage(120) = "Lot is on Hold. Issue not allowed"

  gsLanguage(121) = "Lot is on Hold. Transfer not allowed"
  gsLanguage(122) = "Lot Number does not exist! Continue"
  gsLanguage(123) = "Lot Number hard committed in SO. Search not allowed"
  gsLanguage(124) = "Lot Status not allowed"
  gsLanguage(125) = "Max. Weight must be Numeric"
  gsLanguage(126) = "No Data Returned"
  gsLanguage(127) = "No Data Returned from F98301"
  gsLanguage(128) = "No Data Returned from F983051"
  gsLanguage(129) = "No Detail Information Exists"
  gsLanguage(130) = "No Items available"

  gsLanguage(131) = "No items found in this location"
  gsLanguage(132) = "No object"
  gsLanguage(133) = "No open Lines for Item "
  gsLanguage(134) = "No open orders found"
  gsLanguage(135) = "No open Work Order found for this Item"
  gsLanguage(136) = "No record found for this Item number - Please Re-enter"
  gsLanguage(137) = "No Routing for this Work Order"
  gsLanguage(138) = "No Sales Orders found for shipping"
  gsLanguage(139) = "No scripts available for Database type: "
  gsLanguage(140) = "No Version defined for 'Hours and Quantities' in P31123/"

  gsLanguage(141) = "No Version defined for 'Work Order Completion' in P31123/"
  gsLanguage(142) = "No Version defined for 'Work Order Issues' in P31123/"
  gsLanguage(143) = "No Work Orders for this item"
  gsLanguage(144) = "Not a backflush operation"
  gsLanguage(145) = "Not allowed to attach a bigger License Plate to a smaller one"
  gsLanguage(146) = "Numeric values only"
  gsLanguage(147) = "Operation code not allowed"
  gsLanguage(148) = "Operation Failed."
  gsLanguage(149) = "Operation Print Label Failed"
  gsLanguage(150) = "Operation Sequence not valid"

  gsLanguage(151) = "Order Number not found - Please Re-Enter"
  gsLanguage(152) = "Other Suggestions are pointing to the same location. Continue?"
  gsLanguage(153) = "Other Suggestions are ready to Pick from the same location. Continue?"
  gsLanguage(154) = "Parts are still in Warehouse"
  gsLanguage(155) = "Pick Confirm Failed"
  gsLanguage(156) = "PO Not Set Up For Routing"
  gsLanguage(157) = "PO Number / Doc Type not found"
  gsLanguage(158) = "Price cannot be negative"
  gsLanguage(159) = "Price Must Be Numeric"
  gsLanguage(160) = "Primary Location Does Not Exist"

  gsLanguage(161) = "Primary Location not found for Item"
  gsLanguage(162) = "Proc.Option changed for: "
  gsLanguage(163) = "Program ID and Version must be entered"
  gsLanguage(164) = "Program ID invalid - Please Re-enter"
  gsLanguage(165) = "Program/Version in JDE ProcOpt. Table F983051 not found:"
  gsLanguage(166) = "Purchase Order Number not found"
  gsLanguage(167) = "Quantity cannot be less than zero"
  gsLanguage(168) = "Quantity cannot be zero"
  gsLanguage(169) = "Quantity Cannot Exceed Amount On Hand"
  gsLanguage(170) = "Quantity Cannot Exceed Work Order Amount"

  gsLanguage(171) = "Quantity Completed plus Scrap cannot equal zero"
  gsLanguage(172) = "Quantity entered does not match expected pallet quantity.  Please verify."
  gsLanguage(173) = "Quantity entered exceeds maximum capacity"
  gsLanguage(174) = "Quantity entered is greater than the order."
  gsLanguage(175) = "Quantity Exceeds allowed Qty."
  gsLanguage(176) = "Quantity is not a full pallet."
  gsLanguage(177) = "Quantity must be 1"
  gsLanguage(178) = "Quantity must be 1 or -1"
  gsLanguage(179) = "Quantity must be greater than or equal to zero"
  gsLanguage(180) = "Quantity must be greater than zero"

  gsLanguage(181) = "Quantity must be numeric"
  gsLanguage(182) = "Quantity must not be zero"
  gsLanguage(183) = "Quantity Returned Cannot Exceed Quantity issued"
  gsLanguage(184) = "Rate not found for this Item"
  gsLanguage(185) = "Record already exists. Overwrite?"
  gsLanguage(186) = "Record not found in Replicated database (RR983051) for: "
  gsLanguage(187) = "Record not found. "
  gsLanguage(188) = "Records imported to RFGen database"
  gsLanguage(189) = "Related PO not found"
  gsLanguage(190) = "Remaining Quantity cannot be processed. Call same SO again. Continue?"

  gsLanguage(191) = "Remaining Quantity will be canceled / backordered. Continue?"
  gsLanguage(192) = "RFgen ProcOpt. Mapping Table not found"
  gsLanguage(193) = "RFgen requires the Version defined for 'Hours and Quantities' in P31123/"
  gsLanguage(194) = "RFgen requires the Version defined for 'Work Order Completion' in P31123/"
  gsLanguage(195) = "RFgen requires the Version defined for 'Work Order Issues' in P31123/"
  gsLanguage(196) = "Sales Order is locked by "
  gsLanguage(197) = "Sales Order Number / Doc Type not found"
  gsLanguage(198) = "Sales Order Number not found - Re-Enter"
  gsLanguage(199) = "Sales Order Type not found"
  gsLanguage(200) = "Same as from Location - Please Re-Enter"

  gsLanguage(201) = "Same Item Number as License Plate Number"
  gsLanguage(202) = "Same Item Number as Load Number"
  gsLanguage(203) = "Saved to RFgen database"
  gsLanguage(204) = "Search for item or License Plate?"
  gsLanguage(205) = "Selected Lines exceeds max. Volume"
  gsLanguage(206) = "Selected Lines exceeds max. Weight"
  gsLanguage(207) = "Selected LP is not a defined Load"
  gsLanguage(208) = "Serial Number already entered"
  gsLanguage(209) = "Serial Number already exists in Asset Master (F1201)"
  gsLanguage(210) = "Serialized Item already exists in another location"

  gsLanguage(211) = "Show all, or on file only?"
  gsLanguage(212) = "Take only assigned Lot"
  gsLanguage(213) = "There are no locks to remove in the F00095 table."
  gsLanguage(214) = "This order is on Hold"
  gsLanguage(215) = "Time must be HHMMSS - Please Re-enter"
  gsLanguage(216) = "To/From locations are the same."
  gsLanguage(217) = "Trailer not found"
  gsLanguage(218) = "Type at least 3 char, like 'P41' if you search for 'All' "
  gsLanguage(219) = "Type Not Defined!"
  gsLanguage(220) = "Unable to convert unit of measures: "

  gsLanguage(221) = "Unable to execute; reason: "
  gsLanguage(222) = "Unable to queue; reason: "
  gsLanguage(223) = "Unit Number already exists in Asset Master (F1201)"
  gsLanguage(224) = "UOM conversion does not exist for operation "
  gsLanguage(225) = "Version Invalid"
  gsLanguage(226) = "WO / Type not found"
  gsLanguage(227) = "WO DocType not found"
  gsLanguage(228) = "WO Number not found"
  gsLanguage(229) = "Work Order Fulfilled. Close Work Order?"
  gsLanguage(230) = "Work Order has been Completed"

  gsLanguage(231) = "Work Order Has Not Been Released"
  gsLanguage(232) = "WriteOI / Invalid Item number"
  gsLanguage(233) = "Wrong date range"
  gsLanguage(234) = "Wrong Dock Number. Go to: "
  gsLanguage(235) = "Wrong Item number -Please Re-enter"
  gsLanguage(236) = "Wrong Location - Please Re-enter"
  gsLanguage(237) = "Wrong Lot number - Please Re-enter"
  gsLanguage(238) = "Wrong Operation code"
  gsLanguage(239) = "Wrong Quantity - Please Re-enter"
  gsLanguage(240) = "You have exceeded the quantity received."

  gsLanguage(241) = "Work center rates not setup."
  gsLanguage(242) = "Failed to update work file RF31122."
  gsLanguage(243) = "Employee already assigned to: "
  gsLanguage(244) = "Quantity exceeds completed quantity from prior operations."
  gsLanguage(245) = "Contact RFgen Admin to save the version in RFgen."
  gsLanguage(246) = "Doc Type is Required in Processing Options"
  gsLanguage(247) = "No Quantity At This Operation"
  gsLanguage(248) = "Failed to split pallet [LP]"
  gsLanguage(249) = "Blind execution for Issue, Compl. and Hours required in "
  gsLanguage(250) = "Please enter L or P only"

  gsLanguage(251) = "Item already scanned"
  gsLanguage(252) = "Not processed Items found from earlier task! Continue processing Y/N ?"
  gsLanguage(253) = "Delete all data? Are you sure? Y/N ?"
  gsLanguage(254) = "Barcode validation for LP failed!"
  gsLanguage(255) = "Number Boxes and Box quantity exceeds received qty."
  gsLanguage(256) = "Print Box Label?"
  gsLanguage(257) = "Failed to Print Label!"
  gsLanguage(258) = "TM failed for %1!"
  gsLanguage(259) = "Hours entered > 24 hours! "
  gsLanguage(260) = "Hours on file and hours entered add up > 24 hours! "

  gsLanguage(261) = "No inventory is available to pick for this sales order"
  gsLanguage(262) = "Load picked complete. Print picked tag?"
  gsLanguage(263) = "Picked tag printed."
  gsLanguage(264) = "Load is complete. Print bill of lading?"
  gsLanguage(265) = "Load is not complete. Are you sure you want to exit?"
  gsLanguage(266) = "Hours Type does not exist! "
  gsLanguage(267) = "You want to pick the whole Pallet? "
  gsLanguage(268) = "Lot Number already assigned to different Item. "
  gsLanguage(269) = "Login to JDE failed! "
  gsLanguage(270) = "License Plate already exists! Use another label."

  gsLanguage(271) = "The Serial Number already has Quantity in Inventory!"
  gsLanguage(272) = "License Plate Not Found! Create a New LP?"
  gsLanguage(273) = "License Plate belongs to other SO! "
  gsLanguage(274) = "Barcode scanned does not match pre- printed LP label definition!"
  gsLanguage(275) = "No warehouse job found for the LP/Item entered."
  gsLanguage(276) = "Order Number must be Numeric "
End Function

Public Function LoadGerman
  On Error Resume Next
  '
  gsLanguage(0) = "Fehlertext nicht definiert in JDE.bas / LoadGerman!"
  gsLanguage(1) = "Artikel dem Auftrag zufügen? Weiter?"
  gsLanguage(2) = "Anlagegut bereits angelegt"
  gsLanguage(3) = "Anlagegut Zählung fehlgeschlagen"
  gsLanguage(4) = "Anlagegut vernichten fehlgeschlagen"
  gsLanguage(5) = "Anlagegut Nummer eingeben"
  gsLanguage(6) = "Anlagegut Transfer fehlgeschlagen"
  gsLanguage(7) = "Freigabe Rückstandsauftrag fehlgeschlagen"
  gsLanguage(8) = "Barcode Fehler"
  gsLanguage(9) = "Autom.Verarbeitung fuer alle Auftragszeilen mit Opt. '1'. Weiter?"
  gsLanguage(10) = "Lager Konstanten nicht angelegt."
  gsLanguage(11) = "Lager- oder Lagerort muss unterschiedlich sein!"
  gsLanguage(12) = "Kann LP nicht entfernen. Ist zugefügt zu LP: "
  gsLanguage(13) = "Kann LP nicht umlagern. Ist zugefügt zu LP: "
  gsLanguage(14) = "Adressnummer Spediteur ungültig"
  gsLanguage(15) = "Für Suche bitte Anfangsbuchstabe(n)angeben."
  gsLanguage(16) = "Konfigurations Fehler - Firmen Information fehlt für Lager: "
  gsLanguage(17) = "Zugewiesene Chargennummer bestätigen."
  gsLanguage(18) = "Artikelnummer bestätigen: "
  gsLanguage(19) = "Kosten koennen nicht negative sein."
  gsLanguage(20) = "Nur numerischer Wert erlaubt."
  gsLanguage(21) = "Datum ist groesser als max.Lagerdauer - Neue Eingabe"
  gsLanguage(22) = "Datum muss kleiner / gleich heutiges Datum sein. - Neue Eingabe"
  gsLanguage(23) = "Datum muss in der Zukunft liegen. - Neue Eingabe"
  gsLanguage(24) = "Kein Stundensatz gefunden."
  gsLanguage(25) = "Wert zwischen 0 und 99999"
  gsLanguage(26) = "Menge entspricht nicht Kanban Menge. Weiter?"
  gsLanguage(27) = "Org.Einheit nicht definiert für Lager "
  gsLanguage(28) = "Org.Einheit nicht gefunden."
  gsLanguage(29) = "Eingabe ungültig"
  gsLanguage(30) = "Fehler lesen F43091"
  gsLanguage(31) = "Fehler beim Schreiben Offline Inventory. (Datei OI001)"
  gsLanguage(32) = "Fehler. Gewicht und Volumen uberschreiten max. vom LKW / Anhänger"
  gsLanguage(33) = "überschreitet max.Menge auf LP: "
  gsLanguage(34) = "überschreitet max.Menge"
  gsLanguage(35) = "überschreitet Menge auf Lagerort"
  gsLanguage(36) = "überschreitet Menge auf Auftrag"
  gsLanguage(37) = "überschreitet verfügbare Menge"
  gsLanguage(38) = "Kann Volumen / Gewicht nicht anpassen."
  gsLanguage(39) = "Kann Artikel nicht hinzufügen"
  gsLanguage(40) = "Kann zu LP nicht hinzufügen"
  gsLanguage(41) = "Kann LP nicht erstellen"
  gsLanguage(42) = "Kann LP nicht loeschen"
  gsLanguage(43) = "Kann Artikel nicht kommisionieren"
  gsLanguage(44) = "Kann Artikel nicht buchen"
  gsLanguage(45) = "Kann änderungen nicht verarbeiten"
  gsLanguage(46) = "Fehler beim versenden des Artikels"
  gsLanguage(47) = "Fehler beim ändern LP"
  gsLanguage(48) = "Menge bei Artikeln mit Seriennummer muss 1 sein "
  gsLanguage(49) = "Falsche Kontonummer. Neue Eingabe"
  gsLanguage(50) = "Falsche Anlagegut Nummer"
  gsLanguage(51) = "Falsches Lager. Neue Eingabe"
  gsLanguage(52) = "Falsches Konto in F0901. Neue Eingabe"
  gsLanguage(53) = "Falsche Firma"
  gsLanguage(54) = "Falsche Firma in F0010 - Neue Eingabe"
  gsLanguage(55) = "Falsche Inventur Zählnummer"
  gsLanguage(56) = "Ungültiges Datum"
  gsLanguage(57) = "Ungültiges Datumsformat (TTMMJJ)"
  gsLanguage(58) = "Ungültig Disposal Rules - (F1204)"
  gsLanguage(59) = "Ungültig Adress Nummer"
  gsLanguage(60) = "Ungültiger Eintrag in F1202."
  gsLanguage(61) = "Ungültiger VON- Status"
  gsLanguage(62) = "Ungültige Kombination Artikel-/ Charge-/ Lagerort Nummer!"
  gsLanguage(63) = "Ungültige Artikel Nummer"
  gsLanguage(64) = "Ungültige Artikel Nummer für dieses Lager"
  gsLanguage(65) = "Ungültige Artikel Nummer für LP"
  gsLanguage(66) = "Ungültige Artikel Nummer für diesen Auftrag"
  gsLanguage(67) = "Ungültige Artikel. Modul: ConvUOM"
  gsLanguage(68) = "Ungültige Kanban Card Nummmer"
  gsLanguage(69) = "Ungültige Kanban ID"
  gsLanguage(70) = "Ungültige Kanban ID für Check Out"
  gsLanguage(71) = "Ungültige Kanban ID für dieses Lager"
  gsLanguage(72) = "Ungültige Auftragsart (Line Type)"
  gsLanguage(73) = "Ungültige Verladungsnummer"
  gsLanguage(74) = "Ungültiger Lagerort"
  gsLanguage(75) = "Ungültiger Lagerort für Artikel-/ Charge-/ Lagerort Nummer!"
  gsLanguage(76) = "Ungültiger Lagerort in F4100 - Neue Eingabe!"
  gsLanguage(77) = "Ungültiger Lagerort in F41021 - Neue Eingabe!"
  gsLanguage(78) = "Ungültige Chargen NUmmer"
  gsLanguage(79) = "Ungültige Chargen Nummer für diese Bestellung"
  gsLanguage(80) = "Ungültige Konto Nummer"
  gsLanguage(81) = "Ungültige Operation für diesen Auftrag"
  gsLanguage(82) = "Ungültiges Lager. Neue Eingabe"
  gsLanguage(83) = "Ungültige Menge"
  gsLanguage(84) = "Ungültige Nummer für Unterkonto"
  gsLanguage(85) = "Ungültiges Zeitformat. (SSMM
  gsLanguage(86) = "Ungültiger BIS Status"
  gsLanguage(87) = "Ungültiger UDC Kode "
  gsLanguage(88) = "__________"
  gsLanguage(89) = "Ungültige Unit Nummer - Neue Eingabe"
  gsLanguage(90) = "Artikel / Lagerort nicht in Inventur"
  gsLanguage(91) = "Artikel / Lagerort nicht in Inventur. Trotzdem weiter?"
  gsLanguage(92) = "Artikel / Charge nicht in Inventur"
  gsLanguage(93) = "Artikel / Charge nicht in Inventur. Trotzdem weiter?"
  gsLanguage(94) = "Artikel hat ein Vernichtungsdatum: "
  gsLanguage(95) = "Artikel hat ein Vernichtungsdatum."
  gsLanguage(96) = "Artikel nicht gefunden."
  gsLanguage(97) = "Artikel nicht in Inventur."
  gsLanguage(98) = "Artikel nicht in Inventur. Trotzdem weiter?"
  gsLanguage(99) = "Artikel Nummer ungültig für diesen Auftrag"
  gsLanguage(100) = "Artikel Nummer ungültig für diese Bestellung"
  gsLanguage(101) = "Artikel Nummer ungültig für diesen Verkaufsauftrag"
  gsLanguage(102) = "JDE / LP sind nicht synchrone. JDE hat nicht genügend Menge. "
  gsLanguage(103) = "LP liegt auf einem anderen Lager"
  gsLanguage(104) = "LP nicht gefunden"
  gsLanguage(105) = "LP nicht gefunden für diese Verladung"
  gsLanguage(106) = "___________"
  gsLanguage(107) = "LP ist nicht konfiguriert"
  gsLanguage(108) = "Pos. # ungültig. Max. Länge ist 2."
  gsLanguage(109) = "Pos. # muss eingegeben werden"
  gsLanguage(110) = "Pos. # ungültig"
  gsLanguage(111) = "Pos. # ist nicht in Bestellung"
  gsLanguage(112) = "Pos. # ist nicht in Verkaufsauftrag"
  gsLanguage(113) = "Verladung nicht gefunden! Neu erstellen?"
  gsLanguage(114) = "Lagerort im Auftrag vorgegeben!"
  gsLanguage(115) = "Lagerort im Auftrag vorgegeben!. Suchen nicht erlaubt."
  gsLanguage(116) = "Lagerort im Auftrag vorgegeben!  "
  gsLanguage(117) = "Anmeldung fehlgeschlagen"
  gsLanguage(118) = "Charge ist gesperrt: "
  gsLanguage(119) = "Charge ist gesperrt. Keine änderungen erlaubt!"
  gsLanguage(120) = "Charge ist gesperrt. Keine änderungen erlaubt"
  gsLanguage(121) = "Charge ist gesperrt. Keine änderungen erlaubt"
  gsLanguage(122) = "Charge exestiert nicht! Weiter"
  gsLanguage(123) = "Charge im Auftrag vorgegeben!. Suchen nicht erlaubt."
  gsLanguage(124) = "Chargenstatus ungültig"
  gsLanguage(125) = "Max. Gewicht muss numerisch sein"
  gsLanguage(126) = "Keine Daten gefunden!"
  gsLanguage(127) = "Keine Daten gefunden in F98301"
  gsLanguage(128) = "Keine Daten gefunden in F983051"
  gsLanguage(129) = "Keine Detail Information"
  gsLanguage(130) = "Kein Artikel verfügbar"
  gsLanguage(131) = "Kein Artikel auf diesem Lagerort"
  gsLanguage(132) = "Kein Objekt"
  gsLanguage(133) = "Keine offene Positionen für diesen Artikel "
  gsLanguage(134) = "Keine offenen Aufträge"
  gsLanguage(135) = "Keine offene Aufträge für diesen Artikel "
  gsLanguage(136) = "Keine offene Positionen für diesen Artikel"
  gsLanguage(137) = "Keine Routing informationen"
  gsLanguage(138) = "Kein Auftrag gefunden"
  gsLanguage(139) = "No scripts available for Database type: "
  gsLanguage(140) = "No Version defined for 'Hours and Quantities' in P31123/"
  gsLanguage(141) = "No Version defined for 'Fertigungsauftragrk Order Completion' in P31123/"
  gsLanguage(142) = "No Version defined for 'Fertigungsauftragrk Order Issüs' in P31123/"
  gsLanguage(143) = "Keine offene Aufträge für diesen Artikel"
  gsLanguage(144) = "Keine 'Backflush operation' "
  gsLanguage(145) = "Kann kein grossen LP in kleinen LP verladen."
  gsLanguage(146) = "Nur numerische Werte"
  gsLanguage(147) = "Operation code nicht erlaubt"
  gsLanguage(148) = "Operation fehlgeschlagen."
  gsLanguage(149) = "Label Drucken fehlgeschlagen"
  gsLanguage(150) = "Operation Seqünce ungültig"
  gsLanguage(151) = "Auftrag nicht gefunden"
  gsLanguage(152) = "Andere Anforderungen für den gleichen Lagerort. Weiter?"
  gsLanguage(153) = "Andere Anforderungen für den gleichen Lagerort. Weiter?"
  gsLanguage(154) = "Artikel sind noch im Lager"
  gsLanguage(155) = "Pick Confirm fehlgeschlagen"
  gsLanguage(156) = "PO für Receipt Routing nicht aufgesetzt"
  gsLanguage(157) = "Bestellung / Type nicht gefunden"
  gsLanguage(158) = "Preis kann nicht negativ sein"
  gsLanguage(159) = "Preis muss numerisch sein"
  gsLanguage(160) = "Hauptlagerort nicht gefunden"
  gsLanguage(161) = "Hauptlagerort für Artikel nicht gefunden"
  gsLanguage(162) = "Proc.Option wurden geändert für: "
  gsLanguage(163) = "Program ID and Version must be entered"
  gsLanguage(164) = "Program ID invalid - Please Re-enter"
  gsLanguage(165) = "Program/Version in JDE ProcOpt. Table F983051 not found:"
  gsLanguage(166) = "Bestellung nicht gefunden"
  gsLanguage(167) = "Menge kann nicht kleiner 0 sein"
  gsLanguage(168) = "Menge kann nicht 0 sein"
  gsLanguage(169) = "Menge kann nicht groesser als Lagerbestand sein"
  gsLanguage(170) = "Menge kann nicht groesser als Auftragsmenge sein"
  gsLanguage(171) = "Menge gefertigt und verschrottet muss groesser 0 sein"
  gsLanguage(172) = "Menge entspricht nicht der Menge auf Palette. Prüfen."
  gsLanguage(173) = "Menge groesser als verfügbare Menge"
  gsLanguage(174) = "Menge groesser als Auftragsmenge."
  gsLanguage(175) = "Menge groesser als erlaubte Menge."
  gsLanguage(176) = "Menge ist keine ganze Palette."
  gsLanguage(177) = "Menge muss 1 sein"
  gsLanguage(178) = "Menge muss 1 or -1 sein"
  gsLanguage(179) = "Menge muss groesser oder gleich 0 sein"
  gsLanguage(180) = "Menge muss groesser 0 sein"
  gsLanguage(181) = "Menge muss numerisch sein"
  gsLanguage(182) = "Menge kann nicht 0 sein"
  gsLanguage(183) = "Menge Einlagerung kann nicht groesser als Menge ausgelagert sein"
  gsLanguage(184) = "Artikel Verrechnungssatz nicht gefunden"
  gsLanguage(185) = "Record already exists. Overwrite?"
  gsLanguage(186) = "Record not found in Replicated database (RR983051) for: "
  gsLanguage(187) = "Record not found. "
  gsLanguage(188) = "Records imported to RFGen database"
  gsLanguage(189) = "Dazu gehoerige Bestellung nicht gefunden"
  gsLanguage(190) = "Remaining Quantity cannot be processed. Call same SO again. Weiter?"
  gsLanguage(191) = "Remaining Quantity will be canceled / backordered. Weiter?"
  gsLanguage(192) = "RFgen ProcOpt. Mapping Table not found"
  gsLanguage(193) = "RFgen requires the Version defined for 'Hours and Quantities' in P31123/"
  gsLanguage(194) = "RFgen requires the Version defined for 'Fertigungsauftragrk Order Completion' in P31123/"
  gsLanguage(195) = "RFgen requires the Version defined for 'Fertigungsauftragrk Order Issüs' in P31123/"
  gsLanguage(196) = "Auftrag ist in Bearbeitung bei: "
  gsLanguage(197) = "Auftrags Nummer / Doc Type nicht gefunden"
  gsLanguage(198) = "Auftrags Nummer nicht gefunden"
  gsLanguage(199) = "Auftrags Nummer nicht gefunden"
  gsLanguage(200) = "Gleichen von - und nach Lagerort"
  gsLanguage(201) = "Gleiche Artikel Nummer wie LP Nummer"
  gsLanguage(202) = "Gleiche Artikel Nummer wie Ladungs Nummer"
  gsLanguage(203) = "Saved to RFgen database"
  gsLanguage(204) = "Artikel oder LP?"
  gsLanguage(205) = "Auswahl überschreitet max. Volumen"
  gsLanguage(206) = "Auswahl überschreitet max. Gewicht"
  gsLanguage(207) = "LP ist keine Ladungsnr."
  gsLanguage(208) = "Seriennummer bereits erfasst"
  gsLanguage(209) = "Seriennummer bereits in Asset Master (F1201)"
  gsLanguage(210) = "Seriennummer bereits an einem anderen Standort"
  gsLanguage(211) = "Show all, or on file only?"
  gsLanguage(212) = "Nur Charge vom Auftrag erlaubt"
  gsLanguage(213) = "Keine Satzsperren in F00095 Datei."
  gsLanguage(214) = "Auftrag ist gesperrt"
  gsLanguage(215) = "Zeit muss in HHMMSS"
  gsLanguage(216) = "Von- Nach Lagerort sind gleich."
  gsLanguage(217) = "Definition nicht gefunden"
  gsLanguage(218) = "Type at least 3 char, like 'P41' if you search for 'All' "
  gsLanguage(219) = "Type nicht definiert!"
  gsLanguage(220) = "Kann Mengeneinheit nicht umrechnen: "
  gsLanguage(221) = "Buchen fehlgeschlagen; Grund: "
  gsLanguage(222) = "Stapel Verarbeitung fehlgeschlagen; Grund: "
  gsLanguage(223) = "Unit Number besteht bereits (F1201)"
  gsLanguage(224) = "Kann Mengeneinheit nicht umrechnen "
  gsLanguage(225) = "Version Ungültig"
  gsLanguage(226) = "Fertigungsauftrag / Type nicht gefunden"
  gsLanguage(227) = "Fertigungsauftrag DocType nicht gefunden"
  gsLanguage(228) = "Fertigungsauftrag Nummer nicht gefunden"
  gsLanguage(229) = "Auftrag erfüllt! Schliessen?"
  gsLanguage(230) = "Auftrag erfüllt!"
  gsLanguage(231) = "Fertigungsauftrag nicht freigegeben"
  gsLanguage(232) = "WriteOI / Ungültige Artikel Nummer"
  gsLanguage(233) = "Falscher Datums Bereich"
  gsLanguage(234) = "Falsche Türe. Gehe zu: "
  gsLanguage(235) = "Falsche Artikel Nummer -Neu Eingeben"
  gsLanguage(236) = "Falscher Lagerort -Neu Eingeben"
  gsLanguage(237) = "Falsche Charge -Neu Eingeben"
  gsLanguage(238) = "Falscher Operation code"
  gsLanguage(239) = "Falsche Menge -Neu Eingeben"
  gsLanguage(240) = "Bestellte Mene erreicht."
  gsLanguage(241) = "Fertigungsauftragrk center Verrechnungssätze nicht definiert."
  gsLanguage(242) = "Failed to update Work file RF31122."
  gsLanguage(243) = "Mitarbeiter arbeitet bereits an: "
  gsLanguage(244) = "Menge übersteigt Menge der vorherigen Aktion."
  gsLanguage(245) = "Contact RFgen Admin to save the version in RFgen."
  gsLanguage(246) = "Doc Type is Required in Processing Options. Contact RFgen Admin"
  gsLanguage(247) = "Keine Menge verfügbar für Aktion"
  gsLanguage(248) = "Kann LP nicht teilen"
  gsLanguage(249) = "Blind execution for Issue, Compl. and Hours required in "
  gsLanguage(250) = "Eingabe L or P "
  gsLanguage(251) = "Artikel schon gescannt"
  gsLanguage(252) = "Nicht verarbeitete Daten gefunden. Weiter Y/N ?"
  gsLanguage(253) = "Alle Daten loeschen? Weiter Y/N ?"
End Function

Public Function LoadSpanish
  On Error Resume Next
  '
  gsLanguage(0) = "SUnknown Error"
  gsLanguage(1) = "SOperation Failed!"
  gsLanguage(2) = "SInvalid Item Description"
  gsLanguage(3) = "SQuantity can not be less than 1"
  gsLanguage(4) = "SNo Detail Information Exists"
End Function

Public Sub LoadFrench
  On Error Resume Next
  '
  gsLanguage(0) = "Erreur inconnue"
  gsLanguage(1) = "Ajouter un nouvel article à cet OF? Continuer?"
  gsLanguage(2) = "Actif déjà enregistré"
  gsLanguage(3) = "Echec du comptage des actifs"
  gsLanguage(4) = "Echec lors de la suppression de l’actif"
  gsLanguage(5) = "Numéro d'actif obligatoire"
  gsLanguage(6) = "Echec du transfert de l’actif"
  gsLanguage(7) = "Echec Rupture de stock"
  gsLanguage(8) = "Erreur de Code-Barres"
  gsLanguage(9) = "Traitement automatique de toutes les lignes avec l'Opt. '1'. Continuer?"

  gsLanguage(10) = "Variables globales Entrepôt manquantes"
  gsLanguage(11) = "Entrepôt ou emplacement invalide"
  gsLanguage(12) = "Impossible de détacher la Palette. Attachée au LP: "
  gsLanguage(13) = "Impossible de déplacer la Palette attaché au LP: "
  gsLanguage(14) = "Numéro de Transporteur invalide"
  gsLanguage(15) = "Saisie obligatoire pour recherche."
  gsLanguage(16) = "Erreur de Configuration - Informations sur l'Entrepôt manquantes: "
  gsLanguage(17) = "Confirmez seulement les Numéros de Lot concernés"
  gsLanguage(18) = "Confirmez les Articles sélectionnés: "
  gsLanguage(19) = "Le prix ne peut pas être négatif"

  gsLanguage(20) = "Le prix doit être une valeur numérique"
  gsLanguage(21) = "La Date est supérieure à la date de péremption. - Ressaisir"
  gsLanguage(22) = "La Date est inférieure ou égale à Aujourd'hui. - Ressaisir"
  gsLanguage(23) = "La Date doit être supérieure à Aujourd'hui. - Ressaisir"
  gsLanguage(24) = "Taux de l'employé non trouvé"
  gsLanguage(25) = "Saisir une valeur entre 0 et 99999"
  gsLanguage(26) = "La qté saisie ne correspond pas à la qté du Kanban. Continuer?"
  gsLanguage(27) = "L’entité n'est pas attribuée à cet entrepôt"
  gsLanguage(28) = "Entité non trouvée."
  gsLanguage(29) = "Entrée invalide"

  gsLanguage(30) = "Erreur de lecture F43091"
  gsLanguage(31) = "Erreur d'écriture de l'inventaire en mode hors-connexion. Voir avec le dpt Informatique"
  gsLanguage(32) = "Erreur! Le nouveau poids / volume dépasse les capacités de la remorque"
  gsLanguage(33) = "Qté Maximum dépassée sur LP: "
  gsLanguage(34) = "Qté Maximum dépassée"
  gsLanguage(35) = "Qté en main Maximum dépassée"
  gsLanguage(36) = "Qté SO Maximum dépassée"
  gsLanguage(37) = "Qté Disponible dépassée"
  gsLanguage(38) = "Echec de l'ajustement Poids / Volume."
  gsLanguage(39) = "Echec d'assignation de l'article"

  gsLanguage(40) = "Echec lors de l'assignation à la LP"
  gsLanguage(41) = "Echec de création de la LP"
  gsLanguage(42) = "Echec de suppression de la Palette"
  gsLanguage(43) = "Echec lors du choix des Articles"
  gsLanguage(44) = "Echec du traitement des Articles"
  gsLanguage(45) = "Echec lors de la sauvegarde des modifications"
  gsLanguage(46) = "Echec de l'expédition des articles"
  gsLanguage(47) = "Echec de la mise à jour de la LP"
  gsLanguage(48) = "Pour sérialiser la quantité d'articles doit être '1' "
  gsLanguage(49) = "Compte Invalide - Merci de ressaisir"

  gsLanguage(50) = "ID de l'Immo Invalide - Merci de ressaisir"
  gsLanguage(51) = "Entrepôt Invalide - Merci de ressaisir"
  gsLanguage(52) = "Enregistrement de la table des comptes F0901 Invalide - Merci de ressaisir"
  gsLanguage(53) = "Société Invalide"
  gsLanguage(54) = "Société mère F0010 Invalide - Merci de ressaisir"
  gsLanguage(55) = "Numéro de l'inventaire périodique Invalide"
  gsLanguage(56) = "Date Invalide"
  gsLanguage(57) = "Fomat de Date utilisé Invalide MMJJAA"
  gsLanguage(58) = "Règles d'enlèvement Invalides - Enregistrement F1204 - Merci de ressaisir"
  gsLanguage(59) = "Numéro de l'employé Invalide"

  gsLanguage(60) = "Enregistrement F1202 Invalide - Merci de ressaisir"
  gsLanguage(61) = "Statut Invalide"
  gsLanguage(62) = "Combinaison Article- / Lot- / Emplacement Invalide"
  gsLanguage(63) = "Numéro d'Article Invalide"
  gsLanguage(64) = "Numéro d'Article Invalide pour cet entrepôt"
  gsLanguage(65) = "Numéro d'Article Invalide pour cette LP"
  gsLanguage(66) = "Numéro d'Article Invalide pour cet OF"
  gsLanguage(67) = "Numéro d'Article Invalide. Module: ConvUOM"
  gsLanguage(68) = "Numéro de carte Kanban Invalide"
  gsLanguage(69) = "ID Kanban Invalide"

  gsLanguage(70) = "ID Kanban Invalide pour l'expédition"
  gsLanguage(71) = "ID Kanban Invalide pour cet entrepôt"
  gsLanguage(72) = "Type de ligne Invalide"
  gsLanguage(73) = "Numéro de chargement Invalide"
  gsLanguage(74) = "Emplacement Invalide"
  gsLanguage(75) = "Emplacement Invalide pour la Combinaison Article- / Lot- / Emplacement"
  gsLanguage(76) = "Emplacement Invalide dans F4100 - Merci de ressaisir!"
  gsLanguage(77) = "Emplacement Invalide dans F41021 - Merci de ressaisir!"
  gsLanguage(78) = "Numéro de Lot Invalide"
  gsLanguage(79) = "Numéro de Lot Invalide pour ce PO"

  gsLanguage(80) = "Nombre d'Objet Invalide"
  gsLanguage(81) = "Opération Invalide pour cet OF"
  gsLanguage(82) = "Endroit Invalide. Merci de ressaisir"
  gsLanguage(83) = "Quantité Invalide"
  gsLanguage(84) = "Compte filiale Invalide"
  gsLanguage(85) = "Format d'heure Invalide. Utiliser hhmm"
  gsLanguage(86) = "Statut TO Invalide"
  gsLanguage(87) = "Code UDC Invalide "
  gsLanguage(88) = "La commande est bloquée par un autre utilisateur! (F00095)"
  gsLanguage(89) = "Nombre d'unité Invalide - Merci de ressaisir"

  gsLanguage(90) = "L'Article / Emplacement n'est pas dans l'inventaire périodique"
  gsLanguage(91) = "L'Article / Emplacement n'est pas dans l'inventaire périodique. Continuer?"
  gsLanguage(92) = "L'Article / Lot n'est pas dans l'inventaire périodique"
  gsLanguage(93) = "L'Article / Lot n'est pas dans l'inventaire périodique. Continuer?"
  gsLanguage(94) = "L'Article a une date de disponibilité:"
  gsLanguage(95) = "L'Article a une date de disponibilité ou de retrait"
  gsLanguage(96) = "Article non trouvé."
  gsLanguage(97) = "L'Article n'existe pas dans l'inventaire périodique"
  gsLanguage(98) = "L'Article n'existe pas dans l'inventaire périodique. Continuer?"
  gsLanguage(99) = "Numéro d'Article invalide pour cet OF?"

  gsLanguage(100) = "Le numéro d'Article n'existe pas dans le PO"
  gsLanguage(101) = "Le numéro d'Article n'existe pas dans le SO"
  gsLanguage(102) = "JDE / LP perte de sync. Quantité insuffisante dans JDE. "
  gsLanguage(103) = "LP attribuée à un endroit différent"
  gsLanguage(104) = "LP non trouvée"
  gsLanguage(105) = "LP non trouvée dans ce chargement"
  gsLanguage(106) = "Non utilisé"
  gsLanguage(107) = "LP n'a pas été configurée"
  gsLanguage(108) = "Ligne # invalide. La longueur maximum est de 2 caractères"
  gsLanguage(109) = "Ligne # doit être saisie"

  gsLanguage(110) = "Le numéro de ligne n'existe pas"
  gsLanguage(111) = "Le numéro de ligne n'est pas dans le PO"
  gsLanguage(112) = "Le numéro de ligne n'est pas dans le SO"
  gsLanguage(113) = "Chargement non trouvé! Créer un nouveau chargement?"
  gsLanguage(114) = "Emplacement assigné par le SO"
  gsLanguage(115) = "Emplacement assigné par le SO. Recheche non autorisée."
  gsLanguage(116) = "Emplacement fixe défini dans le SO: "
  gsLanguage(117) = "Echec de connexion à l'ERP. Recommencer"
  gsLanguage(118) = "Le Lot a un code d'attente: "
  gsLanguage(119) = "Le Lot est en attente. L'ajustement n'est pas autorisée"

  gsLanguage(120) = "Le Lot est en attente. Issue non autorisée"
  gsLanguage(121) = "Le Lot est en attente. Transfert non autorisé"
  gsLanguage(122) = "Le numéro de Lot n'existe pas! Continuer"
  gsLanguage(123) = "Numéro de Lot défini en dur dans SO. Recherche non autorisée"
  gsLanguage(124) = "Le Statut du Lot n'est pas autorisé"
  gsLanguage(125) = "Le Poids max. doit être un numérique"
  gsLanguage(126) = "Pas de données retournées"
  gsLanguage(127) = "Pas de données retournées de F98301"
  gsLanguage(128) = "Pas de données retournées de F983051"
  gsLanguage(129) = "Aucun détail d'information existe"

  gsLanguage(130) = "Pas d'article disponimble"
  gsLanguage(131) = "Pas d'article trouvé dans cet emplacement"
  gsLanguage(132) = "Pas d'objet"
  gsLanguage(133) = "Pas de ligne ouverte pour l'article "
  gsLanguage(134) = "Pas de commande ouverte trouvée"
  gsLanguage(135) = "Pas de OF ouvert pour cet article"
  gsLanguage(136) = "Pas d'enregistrement trouvé pour ce numéro d'Article - Ressaisir"
  gsLanguage(137) = "Pas de routage pour cet OF"
  gsLanguage(138) = "Pas de SO trouvé pour cet expédition"
  gsLanguage(139) = "Pas de scripts disponible pour la BDD type: "

  gsLanguage(140) = "Pas de version définie pour 'Heures et Quantités' dans P31123/"
  gsLanguage(141) = "Pas de version définie pour 'Work Order Completion' dans P31123/"
  gsLanguage(142) = "Pas de version définie pour 'Work Order Issues' dans P31123/"
  gsLanguage(143) = "Pas de WO pour cet article"
  gsLanguage(144) = "Ce n'est pas une oépration de retour"
  gsLanguage(145) = "Il n'est pas possible d'allouer une LP à une LP de niveau inférieur"
  gsLanguage(146) = "Valeur numérique seulement"
  gsLanguage(147) = "Le code Opération n'est pas autorisé"
  gsLanguage(148) = "Echec de l'Opération."
  gsLanguage(149) = "Echec Impression d'étiquettes"

  gsLanguage(150) = "Nuuméro de séquence non valide"
  gsLanguage(151) = "Numéro de commande non trouvé - Merci de ressaisir"
  gsLanguage(152) = "D'autres propositions indiquent le même emplacement. Continuer?"
  gsLanguage(153) = "D'autres propositions sont à enlever du même emplacement. Continuer?"
  gsLanguage(154) = "Pièces en stock dans l'entrepôt"
  gsLanguage(155) = "Echec de la confirmation de prélèvement"
  gsLanguage(156) = "Invalide PO"
  gsLanguage(157) = "Numéro du PO / Type de Doc invalide"
  gsLanguage(158) = "Le prix ne peut pas être négatif"
  gsLanguage(159) = "Le prix doit être un numérique"

  gsLanguage(160) = "L'emplacement principal n'existe pas"
  gsLanguage(161) = "L'emplacement principal n'a pas été trouvé pour l'article"
  gsLanguage(162) = "Option de taitement changé pour: "
  gsLanguage(163) = "Version et ID du Programme obligatoires"
  gsLanguage(164) = "ID du Programme invalide - Merci de ressaisir"
  gsLanguage(165) = "Programme/Version inexistant dans la table des options de traitement JDE F983051"
  gsLanguage(166) = "Numéro de PO Invalide"
  gsLanguage(167) = "La Quantité ne peut pas être inférieur à 0"
  gsLanguage(168) = "La Quantité ne peut pas être 0"
  gsLanguage(169) = "La Quantité ne peut pas excédé la quantité en stock"

  gsLanguage(170) = "La Quantité ne peut pas excédée le montant total du WO"
  gsLanguage(171) = "La somme des quantités consommées + restantes ne peuvent pas être égal à 0"
  gsLanguage(172) = "La Quantité entrée ne correspond pas à la quantité attendue sur la palette.  Merci de vérifier."
  gsLanguage(173) = "La Quantité entrée excède la capacité maximum"
  gsLanguage(174) = "La Quantité saisie est plus importante que la commande."
  gsLanguage(175) = "La Quantité excède la quantité autorisée."
  gsLanguage(176) = "La quantité ne correspond pas à une palette pleine."
  gsLanguage(177) = "La Quantité doit être à 1"
  gsLanguage(178) = "La Quantité doit être 1 ou -1"
  gsLanguage(179) = "La Quantité doit être supérieure ou égale à 0"

  gsLanguage(180) = "La Quantité doit être supérieure à 0"
  gsLanguage(181) = "La Quantité doit être un numérique"
  gsLanguage(182) = "La Quantité doit être 0"
  gsLanguage(183) = "La Quantité retourné ne peut pas excédé la Quantité délivrée"
  gsLanguage(184) = "Taux non trouvé pour cet article"
  gsLanguage(185) = "L'enregistrement existe déjà. Ecraser?"
  gsLanguage(186) = "Pas d'enregistrement trouvé dans la base de données répliquée (RR983051) pour: "
  gsLanguage(187) = "Pas d'enregistrement trouvé. "
  gsLanguage(188) = "Données importées dans la BDD RFGen"
  gsLanguage(189) = "PO lié non trouvé"

  gsLanguage(190) = "La Quantité restante ne peut pas être traitée. Rappeler le même SO. Continuer?"
  gsLanguage(191) = "La Quantité restante sera annulée / en attente. Continuer?"
  gsLanguage(192) = "Table des options de traitement RFGen non trouvée"
  gsLanguage(193) = "RFgen requiert la version définie pour les 'Heures et Quantités' dans P31123/"
  gsLanguage(194) = "RFgen requiert la version définie pour le 'Work Order Completion' dans P31123/"
  gsLanguage(195) = "RFgen requiert la version définie pour le 'Work Order Issues' dans P31123/"
  gsLanguage(196) = "La commande est verrouillée par "
  gsLanguage(197) = "Le Numéro et le type de doc de la commande n'ont pas été trouvés"
  gsLanguage(198) = "Le Numéro de la commande n'a pas été trouvée - Merci de ressaisir"
  gsLanguage(199) = "Type de commande invalide"

  gsLanguage(200) = "Identique à l'emplacement d'origine - Merci de ressaisir"
  gsLanguage(201) = "Le numéro d'article est identique au numéro de LP"
  gsLanguage(202) = "Le numéro d'article et de chargement sont identiques"
  gsLanguage(203) = "Sauvegarder dans la BDD RFgen"
  gsLanguage(204) = "Recherche pour l'article ou LP?"
  gsLanguage(205) = "Les lignes sélectionnées dépassent le volume maximum"
  gsLanguage(206) = "Les lignes sélectionnées dépassent le poids maximum"
  gsLanguage(207) = "LP sélectionné n'est pas un chargement défini"
  gsLanguage(208) = "Numéro de Série déjà saisie"
  gsLanguage(209) = "Numéro de Série déjà existant dans Asset Master (F1201)"

  gsLanguage(210) = "Article déjà référencé dans un autre emplacement"
  gsLanguage(211) = "Montrer tout, ou seulement un fichier?"
  gsLanguage(212) = "Prenez seulement le lot attribué"
  gsLanguage(213) = "Pas d'entrée de blocage à supprimer dans la table F00095."
  gsLanguage(214) = "Cette commande est en attente"
  gsLanguage(215) = "L'heure doit être au format HHMMSS - Merci de ressaisir"
  gsLanguage(216) = "L'emplacement d'origine et de destination sont les mêmes."
  gsLanguage(217) = "Remorque non trouvée"
  gsLanguage(218) = "Type de 3 caractères au moins, comme 'P41'. Si vous recherchez tout 'All' "
  gsLanguage(219) = "Type non défini!"

  gsLanguage(220) = "Impossible de convertir l'unité de mesure: "
  gsLanguage(221) = "Impossible d'exécuter; raison: "
  gsLanguage(222) = "Impossible de mettre à la file; raison: "
  gsLanguage(223) = "Le numéro d'unité existe déjà dans Asset Master (F1201)"
  gsLanguage(224) = "Conversion UOM n'existe pour l'opération "
  gsLanguage(225) = "Version Invalide"
  gsLanguage(226) = "OF / Type non trouvé"
  gsLanguage(227) = "OF DocType non trouvé"
  gsLanguage(228) = "Numéro de OF non trouvé"
  gsLanguage(229) = "OF complet. Fermer le OF?"

  gsLanguage(230) = "OF a été completé"
  gsLanguage(231) = "OF n'a pas été fermé"
  gsLanguage(232) = "Ecriture OI / Numéro d'article invalide"
  gsLanguage(233) = "Période invalide"
  gsLanguage(234) = "Numéro de quai invalide. Aller à: "
  gsLanguage(235) = "Numéro d'article invalide - Merci de ressaisir"
  gsLanguage(236) = "Emplacement invalide - Merci de ressaisir"
  gsLanguage(237) = "Numéro de Lot invalide - Merci de ressaisir"
  gsLanguage(238) = "Code d'opération invalide"
  gsLanguage(239) = "Mauvaise quantité - Merci de re-Saisir"

  gsLanguage(240) = "Vous avez dépassé la quantité reçue."
  gsLanguage(241) = "Entrepôt non défini."
  gsLanguage(242) = "Echec de la mise à jour du fichier de travail RF31122."
  gsLanguage(243) = "Des employés sont déjà affectés à: "
  gsLanguage(244) = "La Quantité excède la quantité complète des opérations précédentes."
  gsLanguage(245) = "Contacter l'Admin RFgen pour sauvegarder la version dans RFgen."
  gsLanguage(246) = "Le type de Doc est nécessaire dans les options de traitement"
  gsLanguage(247) = "Aucune quantité à cette opération"
  gsLanguage(248) = "Echec de la division de palettes [LP]"
  gsLanguage(249) = "Blind execution for Issue, Compl. and Hours required in "

  gsLanguage(250) = "Merci d'entrer L ou P seulement"
  gsLanguage(251) = "Article déjà scanné"
  gsLanguage(252) = "Non traité : Article trouvé dans une tâche antérieure! Continuer le traitement Y/N ?"
  gsLanguage(253) = "Supprimer toutes les données? Etes-vous sûr? Y/N ?"
  gsLanguage(254) = "La validation du code-barre a échoué pour LP!"
  gsLanguage(255) = "Le nombre de boîtes et la quantité d'une boîte dépasse la quantité reçue."
  gsLanguage(256) = "Imprimer l'étiquette de la boîte?"
  gsLanguage(257) = "Echec de l'impression de l'étiquette!"
  gsLanguage(258) = "TM a échoué pour %1!"
  gsLanguage(259) = "Les Heures entrées > 24 heures! "

  gsLanguage(260) = "La somme des heures du fichier + saisie > 24 hours! "
  gsLanguage(261) = "Aucun inventaire n'est disponible pour prélèvement dans cette commande"
  gsLanguage(262) = "Prélèvement termini. Imprimer l'étiquette?"
  gsLanguage(263) = "Etiquette de prélèvement imprimée."
  gsLanguage(264) = "Chargement terminé. Impression du ticket?"
  gsLanguage(265) = "Chargement incomplete. Quitter?"
  gsLanguage(266) = "Type d'heures non défini! "

End Sub
'
' Routine returns the default next status for orders
'
Public Function GetNXTR(ByVal sDCTO As String, ByVal sLNTY As String, ByVal sNXTR As String) As String
  On Error Resume Next
  '
  Dim sSql  As String
  Dim sCols As String
  Dim sRows As String
  '
  sSql = "select FSNXTR from F40203 where FSDCTO = '" & sDCTO & "' and FSLNTY = '" & sLNTY & "' and FSTRTY = '" & sNXTR & "' "
  DB.Execute(sSql, sCols, sRows)

  If Len(sRows) > 0 Then
    GetNXTR = DB.Extract(sCols,sRows,1,1)
  End If
End Function
'
' Print bar code labels
'
Public Function PrintLabels(ByVal sType As String, ByVal nLabelQty As Currency, Optional ByRef sItem As String, _
                Optional ByRef nItemQty As Currency, Optional ByRef sUOM As String, Optional ByRef sLotn As String, Optional ByRef sLPID As String, Optional ByRef sPrinter As String, _
                Optional ByRef sDOCO As String, Optional ByRef sLOCN As String, Optional ByRef iRcdCnt As Integer, Optional ByRef sValCache As String) As Boolean
  On Error Resume Next

  Dim sLPSFile    As String
  Dim sDSC1       As String
  Dim sDSC2       As String
  Dim sExpDate    As String
  Dim sSql        As String
  Dim sCols       As String
  Dim sRows       As String
  Dim sPrtData    As String

  Dim sLblFile    As String
  Dim sPackSize   As String
  Dim sShipDate   As String
  Dim sSKU        As String
  Dim sTI         As String
  Dim sHI         As String
  Dim sFrName     As String
  Dim sFrAddr1    As String
  Dim sFrCity     As String
  Dim sFrState    As String
  Dim sFrZip      As String
  Dim sToName     As String
  Dim sToAddr1    As String
  Dim sToAddr2    As String
  Dim sToCity     As String
  Dim sToState    As String
  Dim sToZip      As String
  Dim sUCC128     As String
  Dim sUPC        As String
  Dim sVolume     As String
  Dim sWeight     As String
  Dim sITM        As String
  Dim sMCU        As String
  Dim sSHAN       As String
  Dim sPO         As String
  Dim sPDDJ       As String
  Dim sStgCl      As String
  Dim sStgClD     As String
  Dim sDRKY       As String
  Dim sLblFmt     As String
  Dim sCARS       As String
  Dim sSCAC       As String
  Dim sPRO        As String
  Dim sDPCI       As String
  Dim sDate       As String
  Dim sTime       As String
  Dim nTotPages   As Integer
  Dim iCnt        As Integer
  Dim nLineNo     As Integer

  PrintLabels = False

  ' In case DB is Oracle
  If gbOracleJDE Then
    If Len(Trim(sLotn)) = 0 Then sLotn = " "
  End If
  '
  ' Get item information
  If Len(sItem) <> 0 Then
    sSql = "select IMDSC1, IMDSC2 from F4101" & _
           " where IMLITM = '" & sItem & "'"
    DB.Execute(sSql, sCols, sRows)
    '
    If Ext(gsLog,5) = "1" Then Call TranLog("PrintLabels", "5", "F4101", Replace(sSql, "'", "`"))
    '
    If Len(sRows) = 0 Then
      If Ext(gsLog,6) = "1" Then Call TranLog("PrintLabels", "6", "F4101", Replace(sSql, "'", "`"))
      PrintLabels = True
      Exit Function
    Else
      sDSC1 = Trim(DB.Extract(sCols, sRows, 1, "IMDSC1"))
      sDSC2 = Trim(DB.Extract(sCols, sRows, 1, "IMDSC2"))
    End If
  End If
  '
  ' Get lot expiration date
  If Len(sLotn) <> 0 Then
    sSql = "select IOMMEJ from F4108" & _
           " where IOLITM = '" & sItem & "' and IOMCU = '%tmMCU' and IOLOTN = '" & sLotn & "'"
    DB.Execute(sSql, sCols, sRows)
    '
    If Ext(gsLog,5) = "1" Then Call TranLog("PrintLabels", "5", "F4108", Replace(sSql, "'", "`"))
    '
    If Len(sRows) <> 0 Then
     sExpDate = CStr(ConvJDEtoDate(DB.Extract(sCols, sRows, 1, "IOMMEJ")))
    End If
  End If

  sLPSFile = gsLPSFolder & Format(Date, "yyyymmdd") & Format(Time, "hhmmss") & ".pas"

  Select Case sType

    ' PO Receiving labels
    '
    Case "REC"

      Open sLPSFile For Append As #1
      '
      If Len(sPrinter) = 0 Then sPrinter = GetUserInfo("RECPRINTER")
      If Len(sPrinter) = 0 Then sPrinter = "1"
      Print #1, "*printernumber," & sPrinter
      Print #1, "*Format,"        & gsLWLFolder & "RFG_REC_6x4.lwl"
      Print #1, "*quantity,"      & nLabelQty
      Print #1, "Item,"           & sItem
      Print #1, "Description1,"   & sDSC1
      Print #1, "Description2,"   & sDSC2
      Print #1, "QT,"             & nItemQty
      Print #1, "UOM,"            & sUOM
      Print #1, "CRDLOT,"         & sLotn
      Print #1, "Expire_Date,"    & sExpDate
      Print #1, "user,"           & UCase(App.User)
      Print #1, "*printlabel"
      '
      Close #1

      If Ext(gsLog,7) = "1" Then
        sPrtData = sPrtData & "*printernumber:" & sPrinter                        & "|"
        sPrtData = sPrtData & "*Format:"        & gsLWLFolder & "RFG_REC_6x4.lwl" & "|"
        sPrtData = sPrtData & "*quantity:"      & CStr(nLabelQty)                 & "|"
        sPrtData = sPrtData & "Item:"           & sItem                           & "|"
        sPrtData = sPrtData & "Description1:"   & sDSC1                           & "|"
        sPrtData = sPrtData & "Description2:"   & sDSC2                           & "|"
        sPrtData = sPrtData & "QT:"             & CStr(nItemQty)                  & "|"
        sPrtData = sPrtData & "UOM:"            & sUOM                            & "|"
        sPrtData = sPrtData & "CRDLOT:"         & sLotn                           & "|"
        sPrtData = sPrtData & "Expire_Date:"    & sExpDate                        & "|"
        sPrtData = sPrtData & "User:"           & UCase(App.User)                & "|"
        Call TranLog("PrintLabels", "7", "REC", sPrtData)
      End If
    '
    ' PO Receiving labels
    '
    Case "REC1"
      Open sLPSFile For Append As #1
      '
      If Len(sPrinter) = 0 Then sPrinter = GetUserInfo("RECPRINTER")
      If Len(sPrinter) = 0 Then sPrinter = "1"
      Print #1, "*printernumber," & sPrinter
      Print #1, "*Format,"        & gsLWLFolder & "RFG_REC_6x4.lwl"
      Print #1, "*quantity,"      & nLabelQty
      Print #1, "Item,"           & sItem
      Print #1, "Description1,"   & sDSC1
      Print #1, "Description2,"   & sDSC2
      Print #1, "QT,"             & nItemQty
      Print #1, "UOM,"            & sUOM
      Print #1, "CRDLOT,"         & sLotn
      Print #1, "Expire_Date,"    & sExpDate
      Print #1, "user,"           & UCase(App.User)
      Print #1, "*printlabel"
      '
      Close #1

      If Ext(gsLog,7) = "1" Then
        sPrtData = sPrtData & "*printernumber:" & sPrinter                        & "|"
        sPrtData = sPrtData & "*Format:"        & gsLWLFolder & "RFG_REC_6x4.lwl" & "|"
        sPrtData = sPrtData & "*quantity:"      & CStr(nLabelQty)                 & "|"
        sPrtData = sPrtData & "Item:"           & sItem                           & "|"
        sPrtData = sPrtData & "Description1:"   & sDSC1                           & "|"
        sPrtData = sPrtData & "Description2:"   & sDSC2                           & "|"
        sPrtData = sPrtData & "QT:"             & CStr(nItemQty)                  & "|"
        sPrtData = sPrtData & "UOM:"            & sUOM                            & "|"
        sPrtData = sPrtData & "CRDLOT:"         & sLotn                           & "|"
        sPrtData = sPrtData & "Expire_Date:"    & sExpDate                        & "|"
        sPrtData = sPrtData & "User:"           & UCase(App.User)                & "|"
        Call TranLog("PrintLabels", "7", "REC", sPrtData)
      End If
    '
    ' License plate labels
    Case "LP"

      Open sLPSFile For Append As #1
      '
      If Len(sPrinter) = 0 Then sPrinter = GetUserInfo("LPPRINTER")
      If Len(sPrinter) = 0 Then sPrinter = "1"
      Print #1, "*printernumber," & sPrinter
      Print #1, "*Format,"        & gsLWLFolder & "RFG_LP_4x6.lwl"
      Print #1, "*quantity,"      & nLabelQty
      Print #1, "LPID,"           & sLPID
      Print #1, "*printlabel"
      '
      Close #1

      If Ext(gsLog,7) = "1" Then
        sPrtData = sPrtData & "*printernumber:" & sPrinter                        & "|"
        sPrtData = sPrtData & "*Format:"        & gsLWLFolder & "RFG_LP_4x6.lwl"  & "|"
        sPrtData = sPrtData & "*quantity:"      & CStr(nLabelQty)                 & "|"
        sPrtData = sPrtData & "LPID:"           & sLPID                           & "|"
        sPrtData = sPrtData & "User:"           & UCase(App.User)                & "|"
        Call TranLog("PrintLabels", "7", "LP", sPrtData)
      End If
    '
    ' Bill of lading
    '
    Case "BOL"
      Open sLPSFile For Append As #1
      '
      If Len(sPrinter) = 0 Then sPrinter = "1"
      Print #1, "*printernumber," & sPrinter
      Print #1, "*Format,"        & gsLWLFolder & "FOTEBOL.lwl"
      Print #1, "*quantity,"      & nLabelQty

      Print #1, "LoadID,"         & sLPID

      Print #1, "FROM1,"          & App.GetValue("tmFALPH")
      Print #1, "FROM2,"          & App.GetValue("tmFADD1")
      Print #1, "FROM3,"          & App.GetValue("tmFADD2")
      Print #1, "FROM4,"          & ""

      Print #1, "TO1,"            & App.GetValue("tmTALPH")
      Print #1, "TO2,"            & App.GetValue("tmTADD1")
      Print #1, "TO3,"            & App.GetValue("tmTADD2")
      Print #1, "TO4,"            & ""

      Print #1, "CarrierID,"      & App.GetValue("tmCarrierID")
      Print #1, "Carrier1,"       & App.GetValue("tmCALPH")
      Print #1, "Carrier2,"       & App.GetValue("tmCADD1")
      Print #1, "Carrier3,"       & App.GetValue("tmCADD2")

      Print #1, "heading1,"       & App.GetValue("tmHEADING")

      '
      ' Read contents of the array
      nTotPages = (iRcdCnt / 34)
      If nTotPages < 1 Then nTotPages = 1

      For iCnt = 1 To iRcdCnt
        nLineNo = nLineNo + 1

        If nTotPages > 1 And nLineNo = 35 Then
          Print #1, "*printlabel"
          Close #1
          nLineNo = 1

          sLPSFile = gsLWLFolder & Format(Date, "yyyymmdd") & Format(Time, "hhmmss") & ".pas"
          Open sLPSFile For Append As #1
          Print #1, "*printernumber," & sPrinter
          Print #1, "*Format,"        & gsLWLFolder & "FOTEBOL.lwl"
          Print #1, "*quantity,"      & nLabelQty

          Print #1, "LoadID,"         & sLPID

          Print #1, "TO1,"            & App.GetValue("tmTALPH")
          Print #1, "TO2,"            & App.GetValue("tmTADD1")
          Print #1, "TO3,"            & App.GetValue("tmTADD2")
          Print #1, "TO4,"            & ""

          Print #1, "CarrierID,"      & App.GetValue("tmCarrierID")
          Print #1, "Carrier1,"       & App.GetValue("tmCALPH")
          Print #1, "Carrier2,"       & App.GetValue("tmCADD1")
          Print #1, "Carrier3,"       & App.GetValue("tmCADD2")

          Print #1, "heading1,"       & App.GetValue("tmHEADING")
        End If

        Print #1, "line"     & nLineNo & "," & Ext(sValCache, 1, iCnt)
      Next iCnt

      Print #1, "TOTALQTY,"     & App.GetValue("tmTotalQty")
      Print #1, "TOTALWEIGHT,"  & App.GetValue("tmTotalWt")
      Print #1, "CarrierName2," & App.GetValue("tmCarrierName")
      Print #1, "*printlabel"
      '
      Close #1

    '
    ' Reports
    Case "REPORT001"
      Open sLPSFile For Append As #1
      '
      Print #1, "*printernumber," & sPrinter
      Print #1, "*Format,"   & gsLWLFolder & "RFgen Report.lwl"
      Print #1, "*quantity," & nLabelQty

      Print #1, "title1,"  & App.GetValue("tmTITLE1")
      Print #1, "title2,"  & App.GetValue("tmTITLE2")
      Print #1, "title3,"  & App.GetValue("tmTITLE3")
      Print #1, "title4,"  & App.GetValue("tmTITLE4")
      Print #1, "title5,"  & App.GetValue("tmTITLE5")
      Print #1, "heading," & App.GetValue("tmHEADING")
      '
      ' Read contents of the array
      nTotPages = (iRcdCnt / 25)

      For iCnt = 1 To iRcdCnt
        nLineNo = nLineNo + 1

        If nTotPages > 1 And nLineNo = 26 Then
          Print #1, "*printlabel"
          Close #1
          nLineNo = 1

          sLPSFile = gsLPSFolder & Format(Date, "yyyymmdd") & Format(Time, "hhmmss") & ".pas"
          Open sLPSFile For Append As #1
          Print #1, "*printernumber," & sPrinter
          Print #1, "*Format," & gsLWLFolder & "RFgen Report.lwl"
          Print #1, "*quantity," & nLabelQty

          Print #1, "title1," & App.GetValue("tmTITLE1")
          Print #1, "title2," & App.GetValue("tmTITLE2")
          Print #1, "title3," & App.GetValue("tmTITLE3")
          Print #1, "title4," & App.GetValue("tmTITLE4")
          Print #1, "title5," & App.GetValue("tmTITLE5")

          Print #1, "heading," & App.GetValue("tmHEADING")
        End If

        Print #1, "line" & nLineNo & "," & Ext(sValCache, iCnt, 1)
      Next iCnt

      Print #1, "*printlabel"
      Close #1

    ' UCC
    '
    Case "UCC"

      Open sLPSFile For Append As #1
      '
      If Len(sPrinter) = 0 Then sPrinter = GetUserInfo("RECPRINTER")
      If Len(sPrinter) = 0 Then sPrinter = "1"
      Print #1, "*printernumber," & sPrinter
      Print #1, "*Format,"        & gsLWLFolder & "UCC.lwl"
      Print #1, "*quantity,"      & App.GetValue("tmQTY")
      Print #1, "ADD1,"           & App.GetValue("tmADD1")
      Print #1, "ADD3,"           & App.GetValue("tmADD2")
      Print #1, "ADD3,"           & App.GetValue("tmADD3")
      Print #1, "ADD4,"           & App.GetValue("tmADD4")
      Print #1, "ADD5,"           & App.GetValue("tmADD5")
      Print #1, "ADD6,"           & App.GetValue("tmADD6")
      Print #1, "SHIP_ZIP,"       & App.GetValue("tmADDZ")
      Print #1, "*printlabel"
      '
      Close #1

      If Ext(gsLog,7) = "1" Then
        sPrtData = sPrtData & "*printernumber:" & sPrinter                & "|"
        sPrtData = sPrtData &  "*Format:"       & gsLWLFolder & "UCC.lwl" & "|"
        sPrtData = sPrtData &  "*quantity:"     & App.GetValue("tmQTY")   & "|"
        sPrtData = sPrtData &  "ADD1:"          & App.GetValue("tmADD1")  & "|"
        sPrtData = sPrtData &  "ADD3:"          & App.GetValue("tmADD2")  & "|"
        sPrtData = sPrtData &  "ADD3:"          & App.GetValue("tmADD3")  & "|"
        sPrtData = sPrtData &  "ADD4:"          & App.GetValue("tmADD4")  & "|"
        sPrtData = sPrtData &  "ADD5:"          & App.GetValue("tmADD5")  & "|"
        sPrtData = sPrtData &  "ADD6:"          & App.GetValue("tmADD6")  & "|"
        sPrtData = sPrtData &  "User:"          & UCase(App.User)         & "|"
        Call TranLog("PrintLabels", "7", "UCC", sPrtData)
      End If

  End Select

  PrintLabels = True

End Function

Public Function SetEnvironment()
  On Error Resume Next
  '
  ' Set globals
  '
  Dim vArray As Variant
  Dim iCnt   As Integer
  Dim sChk   As String
  '
  If Len(Trim(gsEnv)) > 0 Then Exit Function  '
  ' Environment
  '
  vArray = Split(SYS.GetProperty("Config", "Env"), "|")
  '
  If vArray(0) = "1" Then
    gbIsE1 = True
  Else
    gbIsE1 = False
  End If
  '
  gsSMMain = vArray(1)
  gsSMErr  = vArray(2)
  '
  gbNamedUser = (vArray(3) = "1")
  '
  gsPoRel  = vArray(4)
  giPwdExp = Val(vArray(5))
  giPwdLen = Val(vArray(6))
  gsJDEVers = vArray(8)
  gbOracleJDE = (vArray(9) = "Oracle")
  gbOracleLP  = (vArray(10) = "Oracle")

  'Set Customer Master Table

  gbCustomerMaster ="F03012"
  If Not gbIsE1 Then
    gbCustomerMaster="F0301"
  Else
    If (Val(gsJDEVers)< 8.12) Then
      gbCustomerMaster="F0301"
    End If
  End If

  If Not gbIsE1 Then   ' build array for JDE warnings
    vArray = Split(gsSMErr,";")
    gsSMErr = ""

    For iCnt = 0 To UBound(vArray)
      gsSMErr  = Rep(gsSMErr, 1, -1, vArray(iCnt))
    Next iCnt
  End If
  '
  ' Offline Inventory
  '
  vArray = Split(SYS.GetProperty("Config", "OI"), "|")
  '
  gbOfflineEnabled = (vArray(0) = "1")
  gbTranServer = (vArray(1) = "1")
  '
  ' Label Printing
  '
  vArray = Split(SYS.GetProperty("Config", "Label"), "|")
  '
  gsLPSFolder = vArray(0)
  gsLWLFolder = vArray(1)
  '
  ' Appearance
  '
  vArray = Split(SYS.GetProperty("Config", "Appear"), "|")
  '
  giMinSearchLen  = Val(vArray(0))
  giMaxSearchRows = Val(vArray(1))
  giLenItem       = Val(vArray(2))
  giLenLOCN       = Val(vArray(3))
  giLenLOTN       = Val(vArray(4))
  giLenQTY        = Val(vArray(5))
  giLenLP         = Val(vArray(6))
  '
  gsEnv = App.IpAddress
  '
  gbQueueProcessing = Ext(gsLog,11) = "1"
  gbDemoMode        = Ext(gsLog,13) = "1"
  gbItemFrmLot      = Ext(gsLog,14) = "1"
  gbQLoadBal        = Ext(gsLog,15) = "1"
  gbCommitCtl       = Ext(gsLog,16) = "1"

End Function

Public Function TrackSQL(ByRef sSql As String,Optional ByRef sCols As String, Optional ByRef sRows As String, Optional ByRef sTNID As String)
  On Error Resume Next
  '
  Dim nStart As Date
  Dim nDone  As Date
  Dim sDiff  As String
  '
  nStart = Now
  DB.Execute(sSql,sCols,sRows)
  nDone = Now
  sDiff = CStr(DateDiff("s",nStart,nDone))
  '
  If sDiff > "0" Then
    App.LogError(sTNID,"SQL process time > 10 sec.:" & sDiff)
  End If
End Function
'
' Over write cardex with RFgen User
Public Function WriteUserAudit(ByRef sUser As String, ByRef nDoc As Long, ByRef sDocType As String, ByRef sMCU As String, ByRef sTNID As String, Optional ByRef bReplace As Boolean)
  On Error Resume Next
  '
  Dim sSql    As String
  Dim sCols   As String
  Dim sRows   As String
  Dim sCRDJ   As String
  Dim sTDAY   As String
  Dim nErrNo  As Long
  Dim nUKID   As Long
  Dim sTREX   As String

  sCRDJ = ConvDatetoJDE(Format(Date, "mm/dd/yyyy"))
  sTDAY = Format(Time, "hhnnss")

  sSql = "select ILUKID, ILTREX from F4111 where ILMCU = '" & sMCU & "'" & _
         " and ILDOC = " & nDoc & " and ILDCT = '" & sDocType & "' and ILCRDJ = " & sCRDJ & _
         " and ILTDAY >= " & sTDAY &  _
         " order by ILUKID DESC"
  DB.Execute(sSql, sCols, sRows)
  '
  If Len(sRows) = 0 Then    'Wait another second just in case it's still in cache
    App.Sleep(1)
    DB.Execute(sSql, sCols, sRows)
  End If
  If Len(sRows) > 0 Then
    nUKID = DB.Extract(sCols, sRows, 1, "ILUKID")
    '
    If bReplace Then
      sTREX = sUser
    Else
      sTREX = Trim(DB.Extract(sCols, sRows, 1, "ILTREX"))
      sTREX = Left(FixLeft(UCase(sUser),10," ") & sTREX, 30)
    End If

    sSql = "update F4111 set ILTREX = '" & sTREX & "' where ILUKID = " & nUKID

    If Ext(gsLog,5) = "1" Then Call TranLog(sTNID, "", "F4111", Replace(sSql, "'", "`"))

    nErrNo = DB.Execute(sSql)
    If nErrNo <> 0 Then
      If Ext(gsLog,6) = "1" Then Call TranLog(sTNID, "6", "F4111", Replace(sSql, "'", "`"))
    End If
  End If
End Function
'
' Get user profile
'
Public Function GetUserProfile(ByRef sUser As String, ByRef sName As String, ByRef sPwd As String, ByRef sMenu As String, ByRef sStat As String, ByRef sProp As String)
  On Error Resume Next
  '
  Dim sSql    As String
  Dim sCols   As String
  Dim sRows   As String
  Dim vArray  As Variant
  Dim vArrayV As Variant
  Dim iCnt    As Integer
  '
  sSql = "select * from RFUP001 where RFUID = '" & sUser & "';"
  DB.Execute(sSql, sCols, sRows)
  '
  sName  = Trim(DB.Extract(sCols, sRows, 1, 2))
  sPwd   = PWDDecrypt(Trim(DB.Extract(sCols, sRows, 1, 3)))
  sStat  = Trim(DB.Extract(sCols, sRows, 1, 4))
  sMenu  = Trim(DB.Extract(sCols, sRows, 1, 5))
  sProp  = Trim(DB.Extract(sCols, sRows, 1, 6))
  vArray = Split(sProp,"|")
  sProp  = ""
  '
  For iCnt = 0 To UBound(vArray)
    vArrayV = Split(vArray(iCnt),"=")
    sProp = Rep(sProp, 1, -1, Trim(vArrayV(0)))   'Key
    sProp = Rep(sProp, 2, -1, Trim(vArrayV(1)))   'Value
  Next iCnt
End Function
'
'Encrypts password to hexadecimal
'
Public Function PWDEncrypt(ByRef strPWD As String) As String
  On Error Resume Next
  '
  Dim i As Long
  '
  For i = 1 To Len(strPWD)
    PWDEncrypt = PWDEncrypt & Hex(Asc(Mid(strPWD, i, 1)))
  Next i
End Function
'
'Decrypts password from hexadecimal
'
Public Function PWDDecrypt(ByRef strPWD As String) As String
  On Error Resume Next
  '
  Dim i As Long
  '
  For i = 1 To Len(strPWD) Step 2
   PWDDecrypt = PWDDecrypt & Chr( _
         InStr(1, "0123456789ABCDEF", Mid(strPWD, i, 1)) * 16 - 16 _
       + InStr(1, "0123456789ABCDEF", Mid(strPWD, i + 1, 1)) - 1)
  Next i
End Function
'
' Get user Properties
'
Public Function GetUserInfo(ByRef sKey As String) As String
  On Error Resume Next
  '
  Dim iFnd  As Integer
  '
  GetUserInfo = ""
  '
  If gbCustUser Then
    sKey = Trim(UCase(sKey))
    iFnd = Locate(sKey,gsUserProp,1)
    '
    If iFnd <> 0 Then
      GetUserInfo = Ext(gsUserProp, 2, iFnd)
    End If
  Else
    GetUserInfo = App.UserProperty(sKey)
  End If
End Function

Public Function EmailLog()

  Dim sSql        As String
  Dim sCols       As String
  Dim sRows       As String
  Dim sSubject    As String
  Dim sText       As String
  Dim sLastCheck  As String
  '
  sLastCheck = Trim(SYS.GetProperty("Log", "LastCheck"))

  sSql = "select count(*) from RFLOG where RFDATE >= '" & sLastCheck & "'"
  DB.Execute(sSql, sCols, sRows)
  If Len(sRows) = 0 Then Exit Function

  sSubject  = "RFgen Transaction Log - " & Date & " " & Time
  sText     = "Transactions have been logged by RFgen.  Please check your log settings to determine which " & vbCrLf & _
              "transactions and errors are currently being logged." & vbCrLf & _
              " " & vbCrLf & vbCrLf & _
              "This message was automatically sent by RFgen.  Please do not respond."
  '
  Call SendEmail("rfgen@rfgen.com", sSubject, sText)

  SYS.SetProperty("Log", "LastCheck", Format(Date, "yyyymmdd") & Format(Time, "hhmmss"))
  '
End Function

Public Function SendEmail(sRecipient As String, sSubject As String, sBody As String, Optional sAttachment As String)
  On Error Resume Next

  Dim objMessage As Object

  Set objMessage = CreateObject("CDO.Message")
  objMessage.Subject  = sSubject
  objMessage.From     = "RFgen@fote.com"
  objMessage.To       = sRecipient
  objMessage.TextBody = sBody

  '==This section provides the configuration information for the remote SMTP server.
  '==Normally you will only change the server name or IP.

  objMessage.Configuration.Fields.Item _
  ("http://schemas.microsoft.com/cdo/configuration/sendusing") = 2

  'Name or IP of Remote SMTP Server
  objMessage.Configuration.Fields.Item _
  ("http://schemas.microsoft.com/cdo/configuration/smtpserver") = "10.0.1.8"

  'Server port (typically 25)
  objMessage.Configuration.Fields.Item _
  ("http://schemas.microsoft.com/cdo/configuration/smtpserverport") = 25

  objMessage.Configuration.Fields.Update

  '==End remote SMTP server configuration section==

  If sAttachment <> "" Then objMessage.AddAttachment sAttachment

  objMessage.Send

End Function

Public Sub SyncRFgenMDB()
  On Error Resume Next
  '
  Dim nTime As Date
  Dim nNow  As Date
  Dim sProp As String
  '
  sProp = SYS.GetProperty("Sync","Boxes")
  If Val(Ext(sProp,8)) = 0 Then Exit Sub    'exit if switched off
  '
  If Len(SYS.GetProperty("Sync","Loop")) = 0 Then
    SYS.SetProperty("Sync","Loop", CStr(Now))
    Exit Sub
  End If
  '
  If CInt(DateDiff("n",SYS.GetProperty("Sync","Loop"), Now)) > CInt(Ext(sProp,8)) Then     'back to loop
    Call ExecSyncRFgenMDB()
    SYS.SetProperty("Sync","Loop", CStr(Now))       'reset for next cycle
  End If
End Sub
'
' This Routine allows to copy the RFgen files from another Rfgen.mdb
' e.g. from Cental Server to Remote Server
' For setup sign on as "ADM" and call "ADM - Sync. Rfgen DB"
' To run create a timer event in TM "SyncRFgenMDB" and run all 60 seconds
'
Public Function ExecSyncRFgenMDB()
  On Error Resume Next
  '
  Const cTranId = "ExecSyncRFgenMDB"
  '
  Dim sSql      As String
  Dim sData     As String
  Dim sProp     As String
  Dim nSize     As Single
  Dim nPos      As Single
  Dim nPos1     As Single
  Dim zChar(1)  As Byte
  Dim zData()   As Byte
  Dim szData()  As Byte
  Dim vSource   As Variant
  Dim vTarget   As Variant
  Dim sId       As String
  Dim sName     As String
  Dim sType     As String
  Dim sFiles    As String
  Dim zRecord() As Byte
  Dim zVBA()    As Byte
  Dim zImage()  As Byte
  Dim dlMod     As Date
  Dim LCID      As Long
  Dim iUpd      As Integer
  Dim iIns      As Integer
  Dim iCnt      As Integer
  Dim iRcdT     As Integer
  Dim iCntT     As Integer
  Dim iRcdS     As Integer
  Dim iCntS     As Integer
  Dim iRcd      As Integer
  Dim iRfF      As Integer
  Dim iRfFiles  As Integer
  Dim vFiles    As Variant
  Dim vArray    As Variant
  '
  Dim cnS As ADODB.Connection
  Dim rsS As ADODB.Recordset
  Dim cnT As ADODB.Connection
  Dim rsT As ADODB.Recordset
  '
  sProp = SYS.GetProperty("Sync","Boxes")   'Properties
  '
  If Ext(sProp,1) = "1" Then sFiles = sFiles & "RFForms"    & ";"
  If Ext(sProp,2) = "1" Then sFiles = sFiles & "RFMacros"   & ";"
  If Ext(sProp,3) = "1" Then sFiles = sFiles & "RFFiles"    & ";"
  If Ext(sProp,4) = "1" Then sFiles = sFiles & "RFScreens"  & ";"
  If Ext(sProp,5) = "1" Then sFiles = sFiles & "RFModules"  & ";"
  If Ext(sProp,6) = "1" Then sFiles = sFiles & "RFUsers"    & ";"
  If Ext(sProp,7) = "1" Then sFiles = sFiles & "RFMenus"    & ";"
  '
  sFiles = Left(sFiles, Len(sFiles) -1)
  vFiles = Split(sFiles,";")
  iRfFiles = UBound(vFiles)
  '
  ' get path to central RFgen.mdb -> Source
  '
  vSource = Trim(SYS.GetProperty("Sync","Source"))
  '
  ' get path to local RFgen.mdb -> Target
  '
  vArray = Split(SYS.GetProperty("Config", "Env"), "|")
  QueryValue("SOFTWARE\DataMAXSG\RFGen" & vArray(7) , "Source", vTarget)
  vTarget = Left(vTarget, Len(vTarget) /2)
  '
  Set cnS = New ADODB.Connection
  With cnS
    .Provider = "Microsoft.Access.OLEDB.10.0"
    .Properties("Data Provider").Value = "Microsoft.Jet.OLEDB.4.0"
    .Properties("Data Source").Value = vSource
    .Open
  End With
  '
  If cnS Is Nothing Then
    App.LogError(cTranId,"Unable to get Connection to " & vSource)
    Exit Function
  End If
  '
  Set cnT = New ADODB.Connection
  With cnT
    .Provider = "Microsoft.Access.OLEDB.10.0"
    .Properties("Data Provider").Value = "Microsoft.Jet.OLEDB.4.0"
    .Properties("Data Source").Value = vTarget
    .Open
  End With
  '
  If cnT Is Nothing Then
    App.LogError(cTranId,"Unable to get Connection to " & vTarget)
    Exit Function
  End If
  '
  ' get RF Files from Source
  '
  For iRfF = 0  To iRfFiles
    sFiles = Trim(vFiles(iRfF))
    '
    sSql = "SELECT * FROM " & sFiles
    If sFiles = "RFFiles" Then sSql = sSql & " and Type <> 'T' "
    sSql = sSql & " order by Id"
    '
    Call ADOExecute(cnS, sSql, rsS)
    '
    If Not rsS Is Nothing Then
      iRcd = rsS.RecordCount
      '
      For iCnt = 0 To iRcd
        '
        iRcdS = rsS.Fields.Count                                    ' Source
        '
        For iCntS = 0 To iRcdS                                      ' Get ID (fieldname is the same in all RF files)
          If rsS.Fields(iCntS).Name = "Id" Then
            sId = Trim(rsS.Fields(iCntS).Value)
            Exit For
          End If
        Next iCntS
        '
        ' check the target
        '
        sSql = "SELECT * FROM " & sFiles & " where Id = '" & sId & "' "
        Set rsT = New ADODB.Recordset
        Call ADOExecute(cnT, sSql, rsT)
        '
        If rsT.RecordCount > 0 Then
          iRcdT  = rsT.Fields.Count                                 ' Target

          For iCntT = 0 To iRcdT                                    ' Get LastMod (fieldname is the same in all RF files)
            If rsS.Fields(iCntT).Name = "LastMod" Then Exit For
          Next iCntT

          If rsT.Fields(iCntT).Value < rsS.Fields(iCntT).Value Then ' check last change date
            For iCntS = 0 To iRcdS                                  ' first field is Id, no update
              rsT.Fields(rsS.Fields(iCntS).Name).Value = rsS.Fields(rsS.Fields(iCntS).Name).Value
            Next iCntS
            '
            rsT.Update
            rsT.Close
            iUpd = iUpd +1
          End If
        Else                                                        ' record does not exist in target
          rsT.AddNew
          '
          For iCntS = 0 To iRcdS                                    ' all fields for insert
            rsT.Fields(rsS.Fields(iCntS).Name).Value = rsS.Fields(rsS.Fields(iCntS).Name).Value     'Fieldnames from source
          Next iCntS
          '
          rsT.Update
          rsT.Close
          iIns = iIns +1
        End If
        '
        rsS.MoveNext
      Next iCnt
    End If
  Next
  '
  cnS.Close
  cnT.Close
  rsS.Close
  rsT.Close
  '
  cnS = Nothing
  cnT = Nothing
  rsS = Nothing
  rsT = Nothing
  '
  App.LogError(cTranId,"Done Sync. RFgen database. Updated: " & CStr(iUpd) & ", Inserted: " & CStr(iIns))
End Function

Public Sub ADOExecute(ByRef sCn As String, ByRef sSql As String, ByRef rs As Object)
  On Error Resume Next
  '
  Set rs = New ADODB.Recordset
  '
  With rs
    .ActiveConnection = sCn
    .Source = sSql
    .CursorType = adOpenKeyset
    .LockType = adLockOptimistic
    .CursorLocation = adUseServer
    .Open
  End With
End Sub

Private Sub QueryValue(ByRef sKeyName As String, ByRef sValueName As String, ByRef vValue As Variant)
  On Error Resume Next
  '
  Dim lRetVal As Long         'result of the API functions
  Dim hKey    As Long         'handle of opened key
  '
  lRetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE, sKeyName, 0, KEY_QUERY_VALUE, hKey)
  lRetVal = QueryValueEx(hKey, sValueName, vValue)
  RegCloseKey (hKey)
End Sub

Function QueryValueEx(ByVal lhKey As Long, ByVal szValueName As String, ByRef vValue As Variant) As Long
  On Error GoTo QueryValueExError
  '
  Dim cch As Long
  Dim lrc As Long
  Dim lType As Long
  Dim lValue As Long
  Dim sValue As String

  ' Determine the size and type of data to be read
  lrc = RegQueryValueExNULL(lhKey, szValueName, 0&, lType, 0&, cch)
  If lrc <> ERROR_NONE Then Error 5

  Select Case lType
    ' For strings
    Case REG_SZ
      sValue = String(cch, 0)
      lrc = RegQueryValueExString(lhKey, szValueName, 0&, lType, sValue, cch)
      '
      If lrc = ERROR_NONE Then
        vValue = Left$(sValue, cch-1)
      Else
        vValue = Empty
      End If
      '
    ' For DWORDS
    Case REG_DWORD
      lrc = RegQueryValueExLong(lhKey, szValueName, 0&, lType, lValue, cch)
      If lrc = ERROR_NONE Then vValue = lValue
    Case Else
       'all other data types not supported
       lrc = -1
  End Select

QueryValueExExit:
  QueryValueEx = lrc
  Exit Function

QueryValueExError:
  Resume QueryValueExExit
End Function

Public Sub RFMessaging()
  On Error Resume Next

  Dim sSql      As String
  Dim sCols     As String
  Dim sRows     As String
  Dim sUserList As String
  Dim sUser     As String
  Dim sUsrLst   As String
  Dim sDateTime As String
  Dim sDate     As String
  Dim sTime     As String
  Dim sMsg      As String
  Dim iCnt      As Integer
  Dim i         As Integer
  Dim iDeviceID As Integer
  Dim sQName    As String
  Dim nSeqNo    As Long
  '
  ' Get a List.Data of all logged in users
  sUserList = SYS.UserList(True)
  '
  ' Check for unsent messages
  sSql = "select * from OI099" & _
         " where ILMSENT <> 'Y' and ILMSG <> ''"
  DB.Execute(sSql, sCols, sRows)

  For iCnt = 1 To DB.Count(sRows)
    sQName    = Trim(DB.Extract(sCols, sRows, iCnt, "ILQNAME"))
    nSeqNo    = DB.Extract(sCols, sRows, iCnt, "ILSEQNO")
    sUser     = Trim(DB.Extract(sCols, sRows, iCnt, "ILUSER"))
    sMsg      = Trim(DB.Extract(sCols, sRows, iCnt, "ILMSG"))
    sDateTime = DB.Extract(sCols, sRows, iCnt, "ILDATE")

    sDate =         Mid(sDateTime,  5, 2) & "/"
    sDate = sDate & Mid(sDateTime,  7, 2) & "/"
    sDate = sDate & Mid(sDateTime,  1, 4)
    '
    sTime =         Mid(sDateTime,  9, 2) & ":"
    sTime = sTime & Mid(sDateTime, 11, 2) & ":"
    sTime = sTime & Mid(sDateTime, 13, 2)

    i = 1
    '
    Do While Len(Ext(sUserList,1,i)) > 0
      sUsrLst = Ext(sUserList,2,i)

      ' If the user is logged on, send the message
      If Trim(UCase(Left(sUsrLst,9))) = sUser Then
        iDeviceID = CInt(Ext(sUserList, 1, i))
        SYS.SendMessage(iDeviceID, sMsg & vbCrLf & vbCrLf & sDate & " " & sTime)

        ' Update the message as "sent"
        sSql = "update OI099" & _
               " set ILMSENT = 'Y'" & _
               " where ILQNAME = '" & sQName & "' and ILSEQNO = " & nSeqNo
        DB.Execute(sSql)
      End If
      '
      i = i + 1
    Loop
  Next iCnt
End Sub

Public Sub RFMoveQueue()
  On Error Resume Next
  ' on the Remote Server this function needs to be in the RFgen.bas and called by Transaction Manager on a timer event
  '
  Dim iCnt      As Integer
  Dim iCnt2     As Integer
  Dim icnt3     As Integer
  Dim iCon      As Integer
  Dim iRcd      As Integer
  Dim sSql      As String
  Dim sRows     As String
  Dim sCols     As String
  Dim sValues   As String
  Dim sPath     As String
  Dim sQueName  As String
  Dim sFrom     As String
  Dim sTo       As String
  Dim nErrNo    As Long
  Dim vArray    As Variant
  '
  Dim nSeqNo        As Long
  Dim sTranDate     As String
  Dim dTimeCreated  As Date
  Dim iStatus       As Integer
  Dim sType         As String
  Dim sSource       As String
  Dim sName         As String
  Dim sRecord       As String
  Dim sFormId       As String
  Dim sUserId       As String
  Dim nDeviceNo     As Integer
  Dim sIPAddress    As String

  Dim oRs As ADODB.Recordset
  '
  ' MonitorTM
  '
  vArray = Split(SYS.GetProperty("Config", "MonTM"), "|")
  '
  sQueName  = vArray(0)               ' Names of Queues to monitor
  iCon      = CInt(vArray(2))         ' Number Connector
  '
  If iCon = 0 Then
    App.LogError("RFMoveQueue","Error! Connector not defined in RFgen Config.")
    Exit Sub
  End If
  '
  sPath = Trim(SYS.ConnectionProperty(iCon,dcSourceId)) & ".dbo."      'path to central server
  vArray = Split(sQueName,";")
  '
  For iCnt = 0 To UBound(vArray)
    sFrom = Trim(vArray(iCnt))      ' Name local Queue
    sTo   = sPath & sFrom           ' Name of Connection, Name of Remote Queue

    If sFrom = "" Then Exit Sub

    sSql = "select * from " & sFrom
    Set oRs = DB.OpenResultset(sSql)
    '
    iRcd = oRs.RecordCount
    '
    For iCnt2 = 1 To iRcd
      For icnt3 = 0 To oRs.Fields.Count
        Select Case oRs.Fields(icnt3).Name
          Case "SeqNo"
            nSeqNo        = oRs.Fields(icnt3).Value
          Case "TranDate"
            sTranDate     = oRs.Fields(icnt3).Value
          Case "TimeCreated"
            dTimeCreated  = oRs.Fields(icnt3).Value
          Case "TranDate"
            iStatus       = oRs.Fields(icnt3).Value
          Case "Type"
            sType         = oRs.Fields(icnt3).Value
          Case "Source"
            sSource       = oRs.Fields(icnt3).Value
          Case "Name"
            sName         = oRs.Fields(icnt3).Value
          Case "Record"
            sRecord       = oRs.Fields(icnt3).Value
          Case "FormId"
            sFormId       = oRs.Fields(icnt3).Value
          Case "UserId"
            sUserId       = oRs.Fields(icnt3).Value
          Case "DeviceNo"
            nDeviceNo     = oRs.Fields(icnt3).Value
          Case "IPAddress"
            sIPAddress    = oRs.Fields(icnt3).Value
          Case Else
        End Select
      Next icnt3
      '
      sSql =  "insert into " & sTo & " Values(" & nSeqNo & ", '" & sTranDate & "','" & dTimeCreated & "'," & iStatus & ",'" & sType & "','" & sSource & "','" & sName & "','" & sRecord & "','" & sFormId & "','" & sUserId & "'," & nDeviceNo & ",'" & sIPAddress & "') "
      nErrNo = DB.Execute(sSql)
      '
      If nErrNo <> 0 Then
        App.LogError("RFMoveQueue", "MoveQueue failed.  From: " & sFrom & " To: " & sTo & "No.:" & CStr(nSeqNo))
        Exit For
      End If
      '
      sSql = "select count(*) from " & sTo & " where SeqNo = " & nSeqNo
      DB.Execute(sSql, sCols, sRows)
      '
      If Val(sRows) = 1 Then
        oRs.Delete
        '
        If Len(Trim(SysErr.Description)) > 0 Then
          App.LogError("RFMoveQueue", "Delete failed.  From: " & sFrom & " To: " & "No.:" & CStr(nSeqNo) & " " & Trim(SysErr.Description))
          Exit For
        End If
      End If

      oRs.MoveNext
    Next iCnt2
  Next iCnt
End Sub


Public Function GetUserName(ByRef sId As String)As String
  On Error Resume Next
  'Performs necessary ADO and returns the user name regarding to RFgen User Profile

  Dim vValue    As Variant
  Dim vArray    As Variant
  Dim iRcd      As Integer
  Dim iCnt      As Integer
  Dim sDBPath   As String
  Dim sRecord   As String
  Dim szData()  As Byte
  'Dim Cn        As ADODB.Connection     'Connection used to create recordsets.
  Dim Cn        As Connection     'Connection used to create recordsets.
  Dim rsUsers   As ADODB.Recordset      'Recordset that holds extracted data from RFUsers.

  vArray = Split(SYS.GetProperty("Config", "Env"), "|")
  '
  ' get path to local RFgen.mdb -> Target
  '
  QueryValue ("SOFTWARE\DataMAXSG\RFGen" & vArray(7) , "Source", vValue)
  vValue = Left(vValue, Len(vValue) /2)
  'RFPrompt("ListBox1").List.AddItem vValue, vValue
  'Update the path below to point to the master
  'RFgen database on your computer.
  'strPath = "C:\Program Files\RFgen\rfgen.mdb"
  sDBPath = CStr(vValue)

  'Create a new ADO Connection to .mdb
  'using the Microsoft Access and Jet OLE DB
  'providers.
  Set Cn = New ADODB.Connection
  With Cn
    '.Provider = "Microsoft.Access.OLEDB.10.0"
    .Provider = "Microsoft.Jet.OLEDB.4.0"
    '.Properties("Data Provider").Value = "Microsoft.Jet.OLEDB.4.0"
    .Properties("Data Source").Value = sDBPath
    .Open
  End With

  'USERS
  'Create a new ADO Recordset by using a server-side
  'keyset cursor and optimistic locking.
  Set rsUsers = New ADODB.Recordset
  With rsUsers
    .ActiveConnection = Cn
    .Source = "SELECT NAME FROM RFUSERS where Id = '" & sId & "' "
    .CursorType = adOpenKeyset
    .LockType = adLockOptimistic
    .CursorLocation = adUseServer
    .Open
  End With
  '
  iRcd = rsUsers.RecordCount

  For iCnt = 1 To iRcd
    'Obtain data from last field for password, menu, and properties.
    szData = rsUsers.Fields(2).GetChunk(999999)
    If Len(szData) = 0 Then
      szData = rsUsers.Fields(2)
    End If
    If (szData(1) = 0) Then
      sRecord = CStr(szData)
    Else
      sRecord = StrConv(szData, vbUnicode)
    End If
    GetUserName = rsUsers.Fields(0).Value
    rsUsers.MoveNext
  Next
  '
  Cn      = Nothing
  rsUsers = Nothing

End Function

Public Function IsWhseUser(sUser As String, sType As String) As Boolean
  On Error Resume Next

  Dim sRecord    As String
  Dim sUserProp  As String
  Dim sPropValue As String
  Dim sDBPath    As String

  Dim iRcd  As Integer
  Dim iCnt  As Integer
  Dim iCnt2 As Integer
  Dim iFind As Integer

  Dim szData()  As Byte

  Dim vValue As Variant
  Dim vArray As Variant

  Dim Cn             As ADODB.Connection     'Connection used to create recordsets.
  Dim rsUsers        As ADODB.Recordset      'Recordset that holds extracted data from RFUsers.


  ' Does user already exist in the cache?
  iFind = InStr(msWhseUsers, sUser)

  If iFind = 0 Then

    ' get path to local RFgen.mdb -> Target
    '
    vArray = Split(SYS.GetProperty("Config", "Env"), "|")
    QueryValue ("SOFTWARE\DataMAXSG\RFGen40" & vArray(7) , "Source", vValue)
        vValue = Left(vValue, Len(vValue) /2)
        RFPrompt("ListBox1").List.AddItem vValue, vValue
        'Update the path below to point to the master
        'RFgen database on your computer.
        'strPath = "C:\Program Files\RFgen\rfgen.mdb"
        sDBPath = CStr(vValue)

    Set Cn = New ADODB.Connection
    With Cn
      .Provider = "Microsoft.Access.OLEDB.10.0"
      .Properties("Data Provider").Value = "Microsoft.Jet.OLEDB.4.0"
      .Properties("Data Source").Value = sDBPath
      .Open
    End With

    'Create a new ADO Recordset by using a server-side
    'keyset cursor and optimistic locking.
    Set rsUsers = New ADODB.Recordset
    With rsUsers
      .ActiveConnection = Cn
      .Source = "SELECT * FROM rfusers WHERE Id = '" & sUser & "' and record like '%WAREHOUSE%' ORDER BY Id"
      .CursorType = adOpenKeyset
      .LockType = adLockOptimistic
      .CursorLocation = adUseServer
      .Open
    End With


    iRcd = rsUsers.RecordCount

    For iCnt = 1 To iRcd
      'Obtain data from last field for password, menu, and properties.
      szData = rsUsers.Fields(2).GetChunk(999999)
      If Len(szData) = 0 Then
        szData = rsUsers.Fields(2)
      End If
      If (szData(1) = 0) Then
        sRecord = CStr(szData)
      Else
        sRecord = StrConv(szData, vbUnicode)
      End If

      iCnt2 = 1
      sUserProp = Trim(Ext(sRecord, 8, iCnt2))
      sPropValue = Trim(Ext(sRecord, 9, iCnt2))

      Do While sUserProp <> ""

        If sUserProp = "WAREHOUSE" And sPropValue = sType Then
          msWhseUsers = msWhseUsers & ";" & sUser
          IsWhseUser = True
        End If

        iCnt2 = iCnt2 + 1
        sUserProp = Trim(Ext(sRecord, 8, iCnt2))
        sPropValue = Trim(Ext(sRecord, 9, iCnt2))
      Loop

      rsUsers.MoveNext
    Next

  Else
    IsWhseUser = True
  End If

End Function

Public Function ValidateAcctString(sMCU As String, ByRef sOBJ As String, ByRef sSUB As String) As Boolean
  On Error Resume Next
  '
  Dim sSql As String
  Dim sCols As String
  Dim sRows As String
  Dim sPEC As String
  '
  ValidateAcctString = False

  sMCU = FixRight(Trim(UCase(sMCU)), 12, " ")
  sOBJ = Trim(UCase(sOBJ))
  sSUB = Trim(UCase(sSUB))

  sSql = "select count(*) from F0901 where GMMCU = '" & sMCU & "' and GMOBJ = '" & sOBJ & "' " & _
          " and GMSUB = '" & sSUB & "' "

  DB.Execute(sSql, sCols, sRows)
  '
  If Val(sRows) = 0 Then
    App.MsgBox("Invalid Account string.  Please make sure account string entered is correct.")
    Exit Function
  End If

  sSql = "select GMPEC from F0901 where GMMCU = '" & sMCU & "' and GMOBJ = '" & sOBJ & "' " & _
          " and GMSUB = '" & sSUB & "' "

  DB.Execute(sSql, sCols, sRows)

  sPEC = DB.Extract(sCols, sRows, 1, "GMPEC")
  '
  If sPEC <> " " And sPEC <> "L" Then
    App.MsgBox("Cannot post to this account. Please check to make sure account is entered correctly")
    Exit Function
  End If

  ValidateAcctString = True

End Function

Public Function Find_Item_Milacron(sItem As String, nAN8 As Long) As String
  On Error Resume Next
  '
  Dim sSql As String
  Dim sCols As String
  Dim sRows As String
  '
  sSql = "select IMITM,IMLITM,IMAITM from F4101 where IMITM = " & Val(sItem) & " or IMLITM = '" & sItem & "' " & _
         " or IMAITM = '" & sItem & "' "
  DB.Execute(sSql, sCols, sRows)
  '
  If Len(sRows) = 0 Then    ' not found in Item Master - Check Item X-Ref

   sSql = "select IVITM,IVLITM,IVAITM from F4104 where IVXRT = 'VN' and IVCITM = " & "'" & sItem & "' and IVAN8 = " & nAN8
    DB.Execute(sSql, sCols, sRows)                                       '|
    '
  End If
  ' Get what Item number is used
  Select Case App.GetValue("tmCISY")
    Case 1
      sItem = Trim(DB.Extract(sCols,sRows,1,1))
    Case 2
      sItem = Trim(DB.Extract(sCols,sRows,1,2))
    Case 3
      sItem = Trim(DB.Extract(sCols,sRows,1,3))
  End Select

  Find_Item_Milacron = sItem
  '
End Function

Public Function RFQBalance(ByRef sQName  As String, ByRef nCnt As Long) As String
  On Error Resume Next
  '
  Dim sSql    As String
  Dim sCols   As String
  Dim sRows   As String
  '
  If nCnt = 0 Then nCnt = 1
  '
  If Len(Trim(sQName)) = 0 Then
    sSql = "select QName from RFQBAL order by Counter"
    DB.Execute(sSql,sCols,sRows)
    '
    sQName = DB.Extract(sCols,sRows,1,1)
    '
    sSql = "update RFQBAL set Counter = (Counter + " & nCnt & ") where QName = '" & sQName & "' "
    DB.Execute(sSql)
    RFQBalance = sQName

  Else
    '
    sSql = "update RFQBAL set Counter = (Counter -1) where QName = '" & sQName & "' "
    DB.Execute(sSql)

  End If

End Function
</Code>
