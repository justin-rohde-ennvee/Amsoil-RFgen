<Record FileDesc="WO - Super Backflush" FileVersion="5.0.8.0" Desc="WO - Super Backflush">
<Param Name="tmCO" />
<Param Name="tmMCU" />
<Param Name="tmDOCO" />
<Param Name="tmDCTO" />
<Param Name="tmLITM" />
<Param Name="tmLOTN" />
<Param Name="tmXPDT" />
<Param Name="tmLOCN" />
<Param Name="tmQTY" />
<Param Name="tmSCRAP" />
<Param Name="tmUOM" />
<Param Name="tmOPSQ" />
<Param Name="tmPROCCODE" />
<Param Name="tmEMPL" />
<Param Name="tmUSER" />
<Param Name="tmZVERSION" />
<Param Name="tmZHOURSQTYS" />
<Param Name="tmZCOMPLETIONS" />
<Param Name="tmZISSUES" />
<Param Name="tmSHIFT" />
<Param Name="tmRCD" />
<Param Name="tmERRID" />
<Param Name="tmERRTEXT" />
</Record>
<Code>
' -------------------------------------------------------------------------------
' | (C)opyright 2003-2012 The DataMAX Software Group, Inc., All Rights Reserved.|
' | RFgen JD Edwards Integration Suite Vers.# 420                               |
' -------------------------------------------------------------------------------
'
' TRANSACTION: WO - SUPER BACKFLUSH
'
' NOTES:
'
' MODIFICATION HISTORY:
'

Option Explicit

Private Const cFailOnWarnings = False
Private Const cTNId           = "TWOSB0100"      

Private Function Transaction(ByRef tmCO As Variant, ByRef tmMCU As Variant, ByRef tmDOCO As Variant, ByRef tmDCTO As Variant, ByRef tmLITM As Variant, ByRef tmLOTN As Variant, ByRef tmXPDT As Variant, ByRef tmLOCN As Variant, ByRef tmQTY As Variant, ByRef tmSCRAP As Variant, ByRef tmUOM As Variant, ByRef tmOPSQ As Variant, ByRef tmPROCCODE As Variant, ByRef tmEMPL As Variant, ByRef tmUSER As Variant, ByRef tmZVERSION As Variant, ByRef tmZHOURSQTYS As Variant, ByRef tmZCOMPLETIONS As Variant, ByRef tmZISSUES As Variant, ByRef tmSHIFT As Variant, ByRef tmRCD As Variant, ByRef tmERRID As Variant, ByRef tmERRTEXT As Variant) As Boolean
  On Error Resume Next

  '---------------'
  '  Declarations '
  '---------------'
  Dim bSuccess    As Boolean
  Dim i           As Integer
  Dim iCnt        As Integer
  Dim iTotOps     As Integer
  Dim nStdMach    As Currency
  Dim nStdLabor   As Currency
  Dim nStdSetup   As Currency
  Dim nStdOPSQ    As Currency
  Dim nStdYield   As Currency
  Dim nStatus     As Currency
  Dim nOper       As Currency
  Dim nNOper      As Currency
  Dim nBatchNo    As Currency
  Dim nJobNo      As Currency
  Dim sErrId      As String
  Dim sErrDesc    As String
  Dim sErrText    As String
  Dim sGLDate     As String
  Dim sTNDate     As String
  Dim sSQL        As String
  Dim sCols       As String
  Dim sRows       As String
  Dim sITM        As String
  Dim sAITM       As String
  Dim sLASTROW    As String
  Dim nUKID       As Currency
  Dim nOPSQ       As Currency
  Dim nUPMJ       As Currency
  Dim nUPMT       As Currency

  Dim emGetAuditInfo                  As New EmbeddedProc
  Dim emF3112SuperBackflushBeginDoc   As New EmbeddedProc
  Dim emF3112SuperBackflushEditLine   As New EmbeddedProc
  Dim emF00095RemoveReservation       As New EmbeddedProc
  Dim emF3112SuperBackflushEditDoc    As New EmbeddedProc
  Dim emF3112SuperBackflushEndDoc     As New EmbeddedProc
  Dim emB3100770CompletionsEditDoc    As New EmbeddedProc
  Dim emB3100770CompletionsEndDoc     As New EmbeddedProc
  Dim emError                         As New EmbeddedProc
  Dim emNothing                       As New EmbeddedProc

  '----------------'
  ' Initialization '
  '----------------'
  Call SetEnvironment()  ' in case macro is running in TM
  '
  If Not gbIsE1 Then GoTo World
  '
  ERP.SetHardRelease   'forces JDE to release resources with the next ERP.CommitTrans or ERP.RollbackTrans (requires RFgen Build 3.2.0.39)
  '
  If Not ERP.BeginTrans Then  ' Force all business functions to use the same connection
    TM.AbortTrans
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", "ERP.BeginTrans failed" , "", Nothing, tmUSER, TM.QueueName, TM.SeqNo)
    tmERRTEXT = "No ERP Handle - retry!"
    Exit Function
  End If
  '
  sTNDate = Format(Date, "mm/dd/yyyy")
  sGLDate = cDemoGLDate
  '
  If (Len(sGLDate)=0) Then sGLDate = Format(Date, "mm/dd/yyyy")

  ' Get default information for this item
  sSQL = "select IBITM, IBAITM from  F4102" & _
         " where IBLITM = '" & tmLITM & "' and IBMCU = '" & tmMCU & "'"

  DB.Execute(sSQL,sCols,sRows)
  '
  If Ext(gsLog,5) = "1" Then Call TranLog(cTNId, "5", "F4102", Replace(sSQL, "'", "`"))

  If (Len(sRows) = 0) Then
    App.LogError "DB.Execute", "SQL call did not return any rows" & vbCrLf & sSQL
    If Ext(gsLog,6) = "1" Then Call TranLog(cTNId, "6", "F4102", Replace(sSQL, "'", "`"))
    GoTo ExitE1
  End If
  '
  sITM  = DB.Extract(sCols,sRows,1,"IBITM")
  sAITM = DB.Extract(sCols,sRows,1,"IBAITM")

  ' Is this the last row?
  sSQL = "select count(*) from  F3112" & _
         " where WLDOCO = " & tmDOCO & " and WLDCTO = '" & tmDCTO & "'"

  DB.Execute(sSQL,sCols,sRows)
  '
  If Ext(gsLog,5) = "1" Then Call TranLog(cTNId, "5", "F3112", Replace(sSQL, "'", "`"))

  If (Len(sRows) = 0) Then
    App.LogError "DB.Execute", "SQL call did not return any rows" & vbCrLf & sSQL
    If Ext(gsLog,6) = "1" Then Call TranLog(cTNId, "6", "F3112", Replace(sSQL, "'", "`"))
    GoTo ExitE1
  End If
  '
  iTotOps = Val(sRows)

  ' Gather routing information for all operations
  nOper = ConvDecimalsToSQL("OPSQ", tmOPSQ)
  '
  sSQL = "select WLLINE, WLMCU, WLOPSQ, WLOPSC, WLOPST, WLBFPF, WLPPRF, WLRUNM, WLRUNL, WLSETL, " & _
         " WLUORG, WLSOCN, WLSOQS, WLQMTO, WLUOM, WLOPYP, WLMMCU" & _
         " from  F3112" & _
         " where WLDOCO = " & tmDOCO & " and WLDCTO = '" & tmDCTO & "' and WLOPSQ <= " & nOper & _
         " order by WLOPSQ"

  DB.Execute(sSQL,sCols,sRows)
  '
  If Ext(gsLog,5) = "1" Then Call TranLog(cTNId, "5", "F3112", Replace(sSQL, "'", "`"))

  If (Len(sRows) = 0) Then
    App.LogError "DB.Execute", "SQL call did not return any rows" & vbCrLf & sSQL
    If Ext(gsLog,6) = "1" Then Call TranLog(cTNId, "6", "F3112", Replace(sSQL, "'", "`"))
    GoTo ExitE1
  End If
  '
  iCnt = DB.Count(sRows)
  '
  If (iCnt = iTotOps) Then
    sLASTROW = "1"
  Else
    sLASTROW = "0"
  End If

  '--------------'
  ' GetAuditInfo '
  '--------------'
  emGetAuditInfo.Name       = "GetAuditInfo"
  emGetAuditInfo.LogMode = LogNever
  emGetAuditInfo.DebugLog   = cJDELogPath
  '
  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emGetAuditInfo.Name, "", emGetAuditInfo)

  If Not emGetAuditInfo.Execute Then
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emGetAuditInfo.Name, "", emGetAuditInfo, tmUSER, TM.QueueName, TM.SeqNo)
    GoTo ExitE1
  End If

  App.SetValue("tmJOBN", emGetAuditInfo.Param("Workstation_UserId"))

  '-----------------------------'
  ' F3112SuperBackflushBeginDoc '
  '-----------------------------'
  emF3112SuperBackflushBeginDoc.Name       = "F3112SuperBackflushBeginDoc"
  emF3112SuperBackflushBeginDoc.LogMode = LogNever
  emF3112SuperBackflushBeginDoc.DebugLog   = cJDELogPath
  '
  emF3112SuperBackflushBeginDoc.Param("ErrorMessageID")                 = " "
  emF3112SuperBackflushBeginDoc.Param("ProcessEdits")                   = "1"
  emF3112SuperBackflushBeginDoc.Param("CreateCache")                    = "1"
  emF3112SuperBackflushBeginDoc.Param("LineActionCode")                 = ""
  emF3112SuperBackflushBeginDoc.Param("Version")                        = tmZVERSION
  emF3112SuperBackflushBeginDoc.Param("ProgramID")                      = " "
  emF3112SuperBackflushBeginDoc.Param("DataDictionaryValidation")       = "1"
  emF3112SuperBackflushBeginDoc.Param("F4801BranchPlant")               = " "
  emF3112SuperBackflushBeginDoc.Param("ItemDescription")                = ""
  emF3112SuperBackflushBeginDoc.Param("PrimaryItemNumber")              = ""
  emF3112SuperBackflushBeginDoc.Param("F4801QtyOrdered")                = 0
  emF3112SuperBackflushBeginDoc.Param("F4801QtyCompleted")              = 0
  emF3112SuperBackflushBeginDoc.Param("F4801QtyScrapped")               = 0
  emF3112SuperBackflushBeginDoc.Param("OrderNumber")                    = tmDOCO
  emF3112SuperBackflushBeginDoc.Param("OrderType")                      = " "
  emF3112SuperBackflushBeginDoc.Param("P311221BatchNumber")             = 0
  emF3112SuperBackflushBeginDoc.Param("SuppressErrorMessages")          = "1"
  emF3112SuperBackflushBeginDoc.Param("PODocumentType")                 = ""
  emF3112SuperBackflushBeginDoc.Param("POPartialCompStatusCode")        = "20"
  emF3112SuperBackflushBeginDoc.Param("POFullCompStatusCode")           = "30"
  emF3112SuperBackflushBeginDoc.Param("POCompletionsVersion")           = tmZCOMPLETIONS
  emF3112SuperBackflushBeginDoc.Param("POIssuesVersion")                = tmZISSUES
  emF3112SuperBackflushBeginDoc.Param("POHoursQtysVersion")             = tmZHOURSQTYS
  emF3112SuperBackflushBeginDoc.Param("POBackflushStatusCode")          = "90"
  emF3112SuperBackflushBeginDoc.Param("POBlindCompletions")             = " "
  emF3112SuperBackflushBeginDoc.Param("POBlindIssues")                  = "1"
  emF3112SuperBackflushBeginDoc.Param("POBlindHoursQtys")               = "1"
  emF3112SuperBackflushBeginDoc.Param("POValidateQtyAtOperation")       = ""
  emF3112SuperBackflushBeginDoc.Param("RetrieveKanbanPOs")              = ""
  emF3112SuperBackflushBeginDoc.Param("KanbanProcessingVersion")        = ""
  emF3112SuperBackflushBeginDoc.Param("CompleteUnplanedCoByProduct")    = ""
  emF3112SuperBackflushBeginDoc.Param("CompleteLotDefault")             = ""

  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emF3112SuperBackflushBeginDoc.Name, "", emF3112SuperBackflushBeginDoc)

  If Not emF3112SuperBackflushBeginDoc.Execute Then
    tmERRID = emF3112SuperBackflushBeginDoc.Param("ErrorMessageID")
    sErrDesc = "F3112SuperBackflushBeginDoc"
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emF3112SuperBackflushBeginDoc.Name, "", emF3112SuperBackflushBeginDoc, tmUSER, TM.QueueName, TM.SeqNo)
    GoTo ExitE1
  End If

  '-----------------------------'
  ' F3112SuperBackflushEditLine '
  '-----------------------------'
  nOper = 0
  iCnt = DB.Count(sRows)
  '
  For i = 1 To iCnt
    nStdMach  = ConvDecimalsFromSQL("RUNM", DB.Extract(sCols,sRows,i,"WLRUNM"))
    nStdLabor = ConvDecimalsFromSQL("RUNL", DB.Extract(sCols,sRows,i,"WLRUNL"))
    nStdSetup = ConvDecimalsFromSQL("SETL", DB.Extract(sCols,sRows,i,"WLSETL"))
    nStdOPSQ  = ConvDecimalsFromSQL("OPSQ", DB.Extract(sCols,sRows,i,"WLOPSQ"))
    nStdYield = ConvDecimalsFromSQL("OPYP", DB.Extract(sCols,sRows,i,"WLOPYP"))
    nStatus   = Val(DB.Extract(sCols, sRows, i, "WLOPST"))
    If (nStdYield=0) Then nStdYield = 100
    If (nStatus=0) Then nStatus = 20
    emF3112SuperBackflushEditLine.Clear
    emF3112SuperBackflushEditLine.Name       = "F3112SuperBackflushEditLine"
    emF3112SuperBackflushEditLine.LogMode = LogNever
    emF3112SuperBackflushEditLine.DebugLog   = cJDELogPath
    emF3112SuperBackflushEditLine.Param("ProcessEdits")               = "2"
    emF3112SuperBackflushEditLine.Param("CreateCache")                = "1"
    emF3112SuperBackflushEditLine.Param("ActionCode")                 = " "
    emF3112SuperBackflushEditLine.Param("DataDictionaryValidation")   = "0"
    emF3112SuperBackflushEditLine.Param("OrderNumber")                = tmDOCO
    emF3112SuperBackflushEditLine.Param("OperationSequence")          = ConvDecimalsFromSQL("OPSQ", DB.Extract(sCols,sRows,i,"WLOPSQ"))
    emF3112SuperBackflushEditLine.Param("QtyOrdered")                 = ConvDecimalsFromSQL("UORG", DB.Extract(sCols,sRows,i,"WLUORG"))
    emF3112SuperBackflushEditLine.Param("QtyCompleted")               = ConvDecimalsFromSQL("SOQS", DB.Extract(sCols,sRows,i,"WLSOQS"))
    emF3112SuperBackflushEditLine.Param("QtyScrapped")                = ConvDecimalsFromSQL("SOCN", DB.Extract(sCols,sRows,i,"WLSOCN"))
    emF3112SuperBackflushEditLine.Param("QtyAtOperation")             = ConvDecimalsFromSQL("QMTO", DB.Extract(sCols,sRows,i,"WLQMTO"))
    emF3112SuperBackflushEditLine.Param("WorkCenter")                 = DB.Extract(sCols, sRows, i, "WLMCU")
    If DB.Extract(sCols, sRows, i, "WLPPRF") = " " Then
      emF3112SuperBackflushEditLine.Param("EmployeeNumber")           = 0
      emF3112SuperBackflushEditLine.Param("OperationStatusCode")      = " "
    Else
      emF3112SuperBackflushEditLine.Param("EmployeeNumber")           = tmEMPL
      emF3112SuperBackflushEditLine.Param("OperationStatusCode")      = nStatus
    End If
    emF3112SuperBackflushEditLine.Param("PayPointCode")               = DB.Extract(sCols, sRows, i, "WLBFPF")
    emF3112SuperBackflushEditLine.Param("PayPointStatus")             = DB.Extract(sCols, sRows, i, "WLPPRF")
    emF3112SuperBackflushEditLine.Param("TypeOfOperation")            = DB.Extract(sCols, sRows, i, "WLOPSC")
    emF3112SuperBackflushEditLine.Param("StdRunMachine")              = nStdMach
    emF3112SuperBackflushEditLine.Param("StdRunLabor")                = nStdLabor
    emF3112SuperBackflushEditLine.Param("StdSetupHours")              = nStdSetup
    emF3112SuperBackflushEditLine.Param("UnitOfMeasure")              = DB.Extract(sCols, sRows, i, "WLUOM")
    emF3112SuperBackflushEditLine.Param("ParentItemNumber")           = sITM
    emF3112SuperBackflushEditLine.Param("2ndItemNumber")              = tmLITM
    emF3112SuperBackflushEditLine.Param("3rdItemNumber")              = sAITM
    emF3112SuperBackflushEditLine.Param("OrderDate")                  = sTNDate
    emF3112SuperBackflushEditLine.Param("SuppressErrorMessages")      = "1"
    emF3112SuperBackflushEditLine.Param("LastRowFlag")                = " "
    emF3112SuperBackflushEditLine.Param("P311221BatchNumber")         = emF3112SuperBackflushBeginDoc.Param("P311221BatchNumber")
    emF3112SuperBackflushEditLine.Param("KanbanSupplyingLocation")    = " "
    emF3112SuperBackflushEditLine.Param("Line")                       = DB.Extract(sCols, sRows, i, "WLLINE")
    emF3112SuperBackflushEditLine.Param("PercentOperationYield")      = nStdYield
    emF3112SuperBackflushEditLine.Param("FirstOperationSequence")     = nOper
    emF3112SuperBackflushEditLine.Param("WorkCenterBranch")           = DB.Extract(sCols, sRows, i, "WLMMCU")

    If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emF3112SuperBackflushEditLine.Name, "", emF3112SuperBackflushEditLine)
    If Not emF3112SuperBackflushEditLine.Execute Then
      tmERRID = emF3112SuperBackflushEditLine.Param("ErrorMessageID")
      sErrDesc = "F3112SuperBackflushEditLine"
      If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emF3112SuperBackflushEditLine.Name, "", emF3112SuperBackflushEditLine, tmUSER, TM.QueueName, TM.SeqNo)
      GoTo ExitE1
    End If
    nOper = ConvDecimalsFromSQL("OPSQ", DB.Extract(sCols,sRows,1,"WLOPSQ"))
  Next i

  nOper = ConvDecimalsToSQL("OPSQ", tmOPSQ)

  sSQL = "select WLLINE, WLMCU, WLOPSQ, WLOPSC, WLOPST, WLBFPF, WLPPRF, WLRUNM, WLRUNL, WLSETL, " & _
         " WLUORG, WLSOCN, WLSOQS, WLQMTO, WLUOM, WLOPYP, WLMMCU" & _
         " from  F3112" & _
         " where WLDOCO = " & tmDOCO & " and WLDCTO = '" & tmDCTO & "' and WLOPSQ <= " & nOper & _
         " order by WLOPSQ desc"

  DB.Execute(sSQL,sCols,sRows)
  '
  If Ext(gsLog,5) = "1" Then Call TranLog(cTNId, "5", "F3112", Replace(sSQL, "'", "`"))

  If (Len(sRows) = 0) Then
    App.LogError "DB.Execute", "SQL call did not return any rows" & vbCrLf & sSQL
    If Ext(gsLog,6) = "1" Then Call TranLog(cTNId, "6", "F3112", Replace(sSQL, "'", "`"))
    GoTo ExitE1
  End If
  '
  iCnt = DB.Count(sRows)

  emF3112SuperBackflushEditLine.Clear
  '
  For i = 1 To iCnt
    nStatus   = Val(DB.Extract(sCols, sRows, i, "WLOPST"))
    If (nStatus=0) Then nStatus = 20
    If DB.Extract(sCols, sRows, i, "WLBFPF") <> "0" Then
      emF3112SuperBackflushEditLine.Clear
      emF3112SuperBackflushEditLine.Name       = "F3112SuperBackflushEditLine"
      emF3112SuperBackflushEditLine.LogMode = LogNever
      emF3112SuperBackflushEditLine.DebugLog   = cJDELogPath
      emF3112SuperBackflushEditLine.Param("ProcessEdits")               = "1"
      emF3112SuperBackflushEditLine.Param("CreateCache")                = "1"
      emF3112SuperBackflushEditLine.Param("ActionCode")                 = " "
      emF3112SuperBackflushEditLine.Param("DataDictionaryValidation")   = "0"
      emF3112SuperBackflushEditLine.Param("OrderNumber")                = tmDOCO
      emF3112SuperBackflushEditLine.Param("OperationSequence")          = ConvDecimalsFromSQL("OPSQ", DB.Extract(sCols,sRows,i,"WLOPSQ"))
      emF3112SuperBackflushEditLine.Param("WorkCenterBranch")           = DB.Extract(sCols, sRows, i, "WLMMCU")
      emF3112SuperBackflushEditLine.Param("PayPointCode")               = DB.Extract(sCols, sRows, i, "WLBFPF")'robb added
      emF3112SuperBackflushEditLine.Param("PayPointStatus")             = DB.Extract(sCols, sRows, i, "WLPPRF")'robb added
      If i = 1 Then
        emF3112SuperBackflushEditLine.Param("InputQtyCompleted")        = Val(tmQTY)   ' * num reqd in BOM?
        emF3112SuperBackflushEditLine.Param("InputQtyCanceled")         = Val(tmSCRAP) ' * num reqd in BOM?

      Else
        emF3112SuperBackflushEditLine.Param("InputQtyCompleted")        = 0
        emF3112SuperBackflushEditLine.Param("InputQtyCanceled")         = 0
        emF3112SuperBackflushEditLine.Param("OperationStatusCode")      = nStatus
        emF3112SuperBackflushEditLine.Param("PayPointStatus")           = DB.Extract(sCols, sRows, i, "WLPPRF")
        emF3112SuperBackflushEditLine.Param("PayPointCode")             = DB.Extract(sCols, sRows, i, "WLBFPF")
      End If
      emF3112SuperBackflushEditLine.Param("InputUnitOfMeasure")         = DB.Extract(sCols, sRows, i, "WLUOM")
      emF3112SuperBackflushEditLine.Param("EmployeeNumber")             = tmEMPL
      emF3112SuperBackflushEditLine.Param("SuppressErrorMessages")      = "1"
      If i = 1 Then
        emF3112SuperBackflushEditLine.Param("LastRowFlag")              = sLASTROW
      Else
        emF3112SuperBackflushEditLine.Param("LastRowFlag")              = "0"
      End If
      emF3112SuperBackflushEditLine.Param("P311221BatchNumber")         = emF3112SuperBackflushBeginDoc.Param("P311221BatchNumber")
      If i = 1 Then
        emF3112SuperBackflushEditLine.Param("KanbanSupplyingLocation")  = tmLOCN
      End If

      If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emF3112SuperBackflushEditLine.Name, "", emF3112SuperBackflushEditLine)
      If Not emF3112SuperBackflushEditLine.Execute Then
        tmERRID = emF3112SuperBackflushEditLine.Param("ErrorMessageID")
        sErrDesc = "F3112SuperBackflushEditLine"
        If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emF3112SuperBackflushEditLine.Name, "", emF3112SuperBackflushEditLine, tmUSER, TM.QueueName, TM.SeqNo)
        GoTo ExitE1
      End If
    End If
  Next i

  '-------------------------'
  ' F00095RemoveReservation '
  '-------------------------'
  emF00095RemoveReservation.Name       = "F00095RemoveReservation"
  emF00095RemoveReservation.LogMode = LogNever
  emF00095RemoveReservation.DebugLog   = cJDELogPath
  '
  emF00095RemoveReservation.Param("UserId")       = tmUSER
  emF00095RemoveReservation.Param("NameObject")   = "F4801"
  emF00095RemoveReservation.Param("Application")  = "P31123"
  '
  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emF00095RemoveReservation.Name, "", emF00095RemoveReservation)

  If Not emF00095RemoveReservation.Execute Then
    sErrDesc = "F00095RemoveReservation"
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emF00095RemoveReservation.Name, "", emF00095RemoveReservation, tmUSER, TM.QueueName, TM.SeqNo)
    GoTo ExitE1
  End If

  ' special processing when lot specified
  If (Len(tmLOTN)>0) Then
    '----------------------------'
    ' B3100770CompletionsEditDoc '
    '----------------------------'
    emB3100770CompletionsEditDoc.Name       = "B3100770CompletionsEditDoc"
    emB3100770CompletionsEditDoc.LogMode = LogNever
    emB3100770CompletionsEditDoc.DebugLog   = cJDELogPath
    emB3100770CompletionsEditDoc.Param("MultiLocationSearchCalled")       = " "
    emB3100770CompletionsEditDoc.Param("CurrentUOM")                      = tmUOM
    emB3100770CompletionsEditDoc.Param("TransactionUOM")                  = tmUOM
    emB3100770CompletionsEditDoc.Param("OrderNumber")                     = tmDOCO
    emB3100770CompletionsEditDoc.Param("TransactionQuantityCompleted")    = tmQTY
    emB3100770CompletionsEditDoc.Param("TransactionQuantityScrapped")     = tmSCRAP
    emB3100770CompletionsEditDoc.Param("ReceiptRoutingResult")            = " "
    emB3100770CompletionsEditDoc.Param("ReceiptRoutingFlag")              = " "
    emB3100770CompletionsEditDoc.Param("ReceiptRoutingQtyToUpdate")       = " "
    emB3100770CompletionsEditDoc.Param("TransactionLotNumber")            = tmLOTN
    emB3100770CompletionsEditDoc.Param("LotStatus")                       = " "
    emB3100770CompletionsEditDoc.Param("TransactionBranch")               = tmMCU
    emB3100770CompletionsEditDoc.Param("ErrorConditionExists")            = 0
    emB3100770CompletionsEditDoc.Param("TransactionDateCompleted")        = emF3112SuperBackflushBeginDoc.Param("TransactionDate")
    emB3100770CompletionsEditDoc.Param("ReasonCode")                      = ""
    emB3100770CompletionsEditDoc.Param("TransactionLocation")             = tmLOCN
    emB3100770CompletionsEditDoc.Param("TransactionLotPotency")           = 0
    emB3100770CompletionsEditDoc.Param("TransactionLotGrade")             = " "
    emB3100770CompletionsEditDoc.Param("BatchNumber")                     = 0
    emB3100770CompletionsEditDoc.Param("SuppressErrors")                  = "1"
    emB3100770CompletionsEditDoc.Param("F0911JobNumber")                  = 0
    emB3100770CompletionsEditDoc.Param("ComputerID")                      = emGetAuditInfo.Param("Workstation_UserId")
    emB3100770CompletionsEditDoc.Param("InitiateReceiptRouting")          = " "
    emB3100770CompletionsEditDoc.Param("VersionName")                     = tmZCOMPLETIONS
    emB3100770CompletionsEditDoc.Param("BatchStatus")                     = ""
    emB3100770CompletionsEditDoc.Param("PassedInQuantityCompleted")       = 0
    emB3100770CompletionsEditDoc.Param("PassedInQuantityScrapped")        = 0
    emB3100770CompletionsEditDoc.Param("PassedInLocation")                = " "
    emB3100770CompletionsEditDoc.Param("PassedInLotNo")                   = " "
    emB3100770CompletionsEditDoc.Param("PassedInLineNo")                  = 0
    emB3100770CompletionsEditDoc.Param("ProcessMfgFlag")                  = 0
    emB3100770CompletionsEditDoc.Param("LastComponentNoB")                = 0
    emB3100770CompletionsEditDoc.Param("LastComponentNoC")                = 0
    emB3100770CompletionsEditDoc.Param("RetrieveWOmaster")                = " "
    emB3100770CompletionsEditDoc.Param("ConvTransQuantityCompleted")      = 0
    emB3100770CompletionsEditDoc.Param("ConvTransQuantityScrapped")       = 0
    emB3100770CompletionsEditDoc.Param("JobNumber")                       = 0
    emB3100770CompletionsEditDoc.Param("LotExpirationDate")               = tmXPDT
    emB3100770CompletionsEditDoc.Param("MemoLot1")                        = ""
    emB3100770CompletionsEditDoc.Param("MemoLot2")                        = ""
    emB3100770CompletionsEditDoc.Param("SalesUpdateDetailWarning")        = " "
    emB3100770CompletionsEditDoc.Param("PayPointOPSQ")                    = 0
    emB3100770CompletionsEditDoc.Param("PrevMatlOperSeqNumber")           = 0
    emB3100770CompletionsEditDoc.Param("MonthWeekDayHour")                = " "
    emB3100770CompletionsEditDoc.Param("WarehouseLineNumber")             = 0
    emB3100770CompletionsEditDoc.Param("F3111JobNumber")                  = 0
    emB3100770CompletionsEditDoc.Param("CalledFromSuperBackflush")        = "1" 'Robb added

    If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emB3100770CompletionsEditDoc.Name, "", emB3100770CompletionsEditDoc)
    If Not emB3100770CompletionsEditDoc.Execute Then
      sErrDesc = "B3100770CompletionsEditDoc"
      If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emB3100770CompletionsEditDoc.Name, "", emB3100770CompletionsEditDoc, tmUSER, TM.QueueName, TM.SeqNo)
      GoTo ExitE1
    End If
  End If

  For i = 1 To iCnt
    If DB.Extract(sCols, sRows, i, "WLBFPF") <> "0" Then
      nStdOPSQ  = ConvDecimalsFromSQL("OPSQ", DB.Extract(sCols,sRows,i,"WLOPSQ"))
     '----------------------------'
     ' F3112SuperBackflushEditDoc '
     '----------------------------'
      emF3112SuperBackflushEditDoc.Clear
      emF3112SuperBackflushEditDoc.Name       = "F3112SuperBackflushEditDoc"
      emF3112SuperBackflushEditDoc.LogMode = LogNever
      emF3112SuperBackflushEditDoc.DebugLog   = cJDELogPath
      emF3112SuperBackflushEditDoc.Param("ComputerID")          = emGetAuditInfo.Param("Workstation_UserId")
      emF3112SuperBackflushEditDoc.Param("UserID")              = tmUSER
      emF3112SuperBackflushEditDoc.Param("TimeOfDay")           = emGetAuditInfo.Param("Time")
      emF3112SuperBackflushEditDoc.Param("DateUpdated")         = emF3112SuperBackflushBeginDoc.Param("TransactionDate")
      emF3112SuperBackflushEditDoc.Param("ErrorCode")           = " "
      emF3112SuperBackflushEditDoc.Param("ProgramID")           = "EP31123"
      emF3112SuperBackflushEditDoc.Param("ProcessEdits")        = " "
      emF3112SuperBackflushEditDoc.Param("ErrorMessageID")      = " "
      emF3112SuperBackflushEditDoc.Param("OperationSequence")   = ConvDecimalsFromSQL("OPSQ", DB.Extract(sCols,sRows,i,"WLOPSQ"))
      emF3112SuperBackflushEditDoc.Param("OrderNumber")         = tmDOCO
      If i = 1 Then       'If (i=iCnt) Then
        emF3112SuperBackflushEditDoc.Param("LastRowFlag")       = sLASTROW
      Else
        emF3112SuperBackflushEditDoc.Param("LastRowFlag")       = "0"
      End If
      emF3112SuperBackflushEditDoc.Param("P311221BatchNumber")  = emF3112SuperBackflushBeginDoc.Param("P311221BatchNumber")
      emF3112SuperBackflushEditDoc.Param("ProcessedCode")       = tmPROCCODE
      emF3112SuperBackflushEditDoc.Param("ShiftCode")           = tmSHIFT
      emF3112SuperBackflushEditDoc.Param("KanbanLotNumber")     = tmLOTN
      emF3112SuperBackflushEditDoc.Param("TransactionDate")     = sTNDate
      If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emF3112SuperBackflushEditDoc.Name, "", emF3112SuperBackflushEditDoc)
      If Not emF3112SuperBackflushEditDoc.Execute Then
        tmERRID = emF3112SuperBackflushEditDoc.Param("ErrorMessageID")
        sErrDesc = "F3112SuperBackflushEditDoc"
        If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emF3112SuperBackflushEditDoc.Name, "", emF3112SuperBackflushEditDoc, tmUSER, TM.QueueName, TM.SeqNo)
        GoTo ExitE1
      End If
    End If
  Next i

  '---------------------------'
  ' F3112SuperBackflushEndDoc '
  '---------------------------'
  emF3112SuperBackflushEndDoc.Name       = "F3112SuperBackflushEndDoc"
  emF3112SuperBackflushEndDoc.LogMode = LogNever
  emF3112SuperBackflushEndDoc.DebugLog   = cJDELogPath
  '
  emF3112SuperBackflushEndDoc.Param("ProcessEdits")         = "1"
  emF3112SuperBackflushEndDoc.Param("ErrorMessageID")       = emF3112SuperBackflushEditDoc.Param("ErrorMessageID")
  emF3112SuperBackflushEndDoc.Param("ErrorCode")            = emF3112SuperBackflushEditDoc.Param("ErrorCode")
  emF3112SuperBackflushEndDoc.Param("ProgramID")            = " "
  emF3112SuperBackflushEndDoc.Param("P311221BatchNumber")   = emF3112SuperBackflushEditDoc.Param("P311221BatchNumber")
  emF3112SuperBackflushEndDoc.Param("Version")              = tmZVERSION
  emF3112SuperBackflushEndDoc.Param("DocumentNumber")       = emF3112SuperBackflushBeginDoc.Param("OrderNumber")
  '
  If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emF3112SuperBackflushEndDoc.Name, "", emF3112SuperBackflushEndDoc)

  If Not emF3112SuperBackflushEndDoc.Execute Then
    tmERRID = emF3112SuperBackflushEndDoc.Param("ErrorMessageID")
    sErrDesc = "F3112SuperBackflushEndDoc"
    If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emF3112SuperBackflushEndDoc.Name, "", emF3112SuperBackflushEndDoc, tmUSER, TM.QueueName, TM.SeqNo)
    GoTo ExitE1
  End If
' special processing when lot specified
  If (Len(tmLOTN)>0) Then
  '---------------------------'
    ' B3100770CompletionsEndDoc '
    '---------------------------'
    emB3100770CompletionsEndDoc.Name       = "B3100770CompletionsEndDoc"
    emB3100770CompletionsEndDoc.LogMode = LogNever
    emB3100770CompletionsEndDoc.DebugLog   = cJDELogPath

    emB3100770CompletionsEndDoc.Param("ComputerID")                   = emGetAuditInfo.Param("Workstation_UserId")
    emB3100770CompletionsEndDoc.Param("JobNumber")                    = emB3100770CompletionsEditDoc.Param("JobNumber")
    emB3100770CompletionsEndDoc.Param("Version")                      = tmZCOMPLETIONS
    'emB3100770CompletionsEndDoc.Param("ClearCacheOnly")               = "1" 'robb commented out
    emB3100770CompletionsEndDoc.Param("DocumentNumber")               = tmDOCO 'robb added

    If Ext(gsLog,3) = "1" Then Call TranLog(cTNId, "3", emB3100770CompletionsEndDoc.Name, "", emB3100770CompletionsEndDoc)
    If Not emB3100770CompletionsEndDoc.Execute Then
      sErrDesc = "B3100770CompletionsEndDoc"
      If Ext(gsLog,4) = "1" Then Call TranLog(cTNId, "4", emB3100770CompletionsEndDoc.Name, "", emB3100770CompletionsEndDoc, tmUSER, TM.QueueName, TM.SeqNo)
      GoTo ExitE1
    End If
  End If
  '
  bSuccess = True

'-------'
' Exits '
'-------'
ExitE1:
  If tmERRID <> "" Then
    emError.Name = "GetErrorMessageGlossaryText"
    emError.LogMode = LogNever
    emError.DebugLog   = cJDELogPath
    emError.Param("ErrorMessageID") = tmERRID
    emError.Execute
    tmERRTEXT = emError.Param("GlossaryText_500Chars")
  Else
    tmERRTEXT = sErrDesc
  End If
  '
  Set emGetAuditInfo                       = Nothing
  Set emF3112SuperBackflushBeginDoc        = Nothing
  Set emF3112SuperBackflushEditLine        = Nothing
  Set emF00095RemoveReservation            = Nothing
  Set emF3112SuperBackflushEditDoc         = Nothing
  Set emF3112SuperBackflushEndDoc          = Nothing
  Set emB3100770CompletionsEditDoc         = Nothing
  Set emB3100770CompletionsEndDoc          = Nothing
  Set emError                              = Nothing

  If Not bSuccess Then
    ERP.RollbackTrans
  Else
    ERP.CommitTrans
  End If
  '
  ' Offline inventory
  If gbOfflineEnabled Then
    If bSuccess Then
      DeleteOI(TM.QueueName,TM.SeqNo)
    Else
      DeleteOI(TM.QueueName,TM.SeqNo, tmUSER, "Unable to execute " & cTNId & "; reason: " & vbCrLf & sErrDesc, Format(Date, "YYYYMMDD") & Format(Time, "HHNNSS"))
    End If
  End If
  '
  Transaction = bSuccess

  Exit Function
  '
World:
  Dim sText   As String

  ' Force all business functions to use the same connection
  If Not SM.BeginTrans Then
    TM.AbortTrans
    tmERRTEXT = "No ERP Handle - retry!"
    Exit Function
  End If
  '
  SM.GoToScreen("HWOSB0100")
  SM.SendTextAlt 19, 3, "I", 1
  SM.SendTextAlt 19, 4, tmDOCO, 8
  SM.SendKey KeyEnter
  '
  i = 8
  '
  Do
    i = i + 1
    If i = 23 Then
      i = 9
      SM.SendKey KeyPageDown
    End If
    'SM.GetText(15,9,6,sText,True)
    SM.GetText(15,i,6,sText,True)
  Loop Until Val(sText) = Val(tmOPSQ) Or sText = ""
  '
  If sText = "" Then
    tmERRTEXT = "Operation not found"
    GoTo ExitWorld
  End If
  '
  SM.SendTextAlt 19, 3, "C", 1
  SM.SendTextAlt 43, i, tmEMPL,  8
  SM.SendTextAlt 52, i, tmQTY,   11
  SM.SendTextAlt 64, i, tmSCRAP, 11
  '
LoopErr:
  SM.SendKey KeyEnter
  SM.GetText(15,9,6,sText,True)
  If sText <> "" Then
    Call GetWorldErr(sErrId, sErrText)  'Indicates a hard error has occured
    If Len(sErrId) = 0 Then GoTo LoopErr
  End If

  bSuccess = (sErrId = "")
  '
  tmERRID = sErrId
  tmERRTEXT = sErrText
  '
ExitWorld:
  SM.WaitForHost 10
  SM.SendKey KeyF3                           ' Exit Screen
  SM.SendTextAlt 7, 19, gsSMMain              ' Goto back to SM Main Menu
  SM.SendKey KeyEnter

  SM.CommitTrans

  Transaction = bSuccess


End Function
</Code>
