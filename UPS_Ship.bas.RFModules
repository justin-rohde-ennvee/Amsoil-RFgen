<Record FileDesc="UPS Shipping API" FileVersion="5.0.8.0" Desc="UPS Shipping API" Group="UPS" />
<Code>
Option Explicit
'#Language "WWB-COM"

Public Function UPS_CreateShipment( _
  ByVal nMCU As Long, _
  ByVal nSHAN As Long, _
  ByVal nWeight As Currency, _
  ByVal sAccount As String, _
  ByVal sDesc As String, _
  ByVal nDOCO As Long, _
  ByVal sLPID As String, _
  Optional ByVal bMailInnovations As Boolean = False, _
  Optional ByVal sMailClass As String = "", _
  Optional ByVal tDimensions As Dimensions _
) As ShipmentResponse
  Dim fromAddress As AddressInfo
  Dim toAddress As AddressInfo
  Dim sBody As String
  Dim sToken As String
  Dim bSuccess As Boolean
  Dim sErrMsg As String
  Dim sResponseStatus As String
  Dim sResponseText As String
  Dim oResponseJson As Scripting.Dictionary
  Dim jsonParser As New VbsJson
  Dim tShipmentResponse As ShipmentResponse
  Dim sCode As String
  Dim sMessage As String

  On Error GoTo OnError

  App.Balloon("Authorizing...", 1)

  If Not UPS_GetToken(sToken, sErrMsg) Then
    tShipmentResponse.sErrMsg = sErrMsg
    Return tShipmentResponse
  End If

  App.Balloon("Sending shipping request...", -1)

  fromAddress = GetAddressInfo(nMCU)
  toAddress = GetAddressInfo(nSHAN)
  sBody = UPS_CreateShipmentRequestJson(fromAddress, toAddress, nWeight, sAccount, sDesc, CStr(nDOCO), sLPID, bMailInnovations, sMailClass, tDimensions)
  bSuccess = UPS_SendShippingRequest(sToken, sBody, sResponseStatus, sResponseText)

  App.Balloon("", 0)

  Set oResponseJson = jsonParser.Decode(sResponseText)

  If Not bSuccess Then
    If Not UPS_ParseResponseError(oResponseJson, sCode, sMessage) Then tShipmentResponse.sErrMsg = "HTTP status code: " & sResponseStatus
    tShipmentResponse.sErrMsg = "(" & sCode & ") " & sMessage
    If sCode = "120202" Then
      tShipmentResponse.sErrMsg &= ( _
        vbNewLine & toAddress.sLine1 & _
        vbNewLine & toAddress.sLine2 & _
        vbNewLine & toAddress.sLine3)
    End If
    Return tShipmentResponse
  End If

  tShipmentResponse = UPS_ParseShipmentResponse(oResponseJson)
  If tShipmentResponse.sErrMsg <> "" Then
    tShipmentResponse.sErrMsg = "Unable to process shipment response: " & vbNewLine & vbNewLine & tShipmentResponse.sErrMsg
    Return tShipmentResponse
  End If

OnError:
  If Err.Number <> 0 Then tShipmentResponse.sErrMsg = "(" & Err.Number & ") " & Err.Description
  Return tShipmentResponse
End Function

Private Function UPS_SendShippingRequest( _
  ByVal sToken As String, _
  ByVal sRequestBody As String, _
  sResponseStatus As String, _
  sResponseText As String _
) As Boolean
  Dim oHttp As New XMLHTTP60
  Const sBaseURL As String = SYS.EnvironmentProperty("UPSBaseURL")

  LogText("UPS_Ship", "UPS_SendShippingRequest", "Request: " & sRequestBody)

  oHttp.open("POST", UPS_BASE_URL & "/api/shipments/v1/ship")
  oHttp.setRequestHeader("Authorization", "Bearer " & sToken)
  oHttp.setRequestHeader("Content-Type", "application/json")
  oHttp.setRequestHeader("Accept", "application/json")
  oHttp.Send(sRequestBody)

  sResponseStatus = CStr(oHttp.status)
  sResponseText = oHttp.responseText

  LogText("UPS_Ship", "UPS_SendShippingRequest", "Response: " & sResponseText)

  Return oHttp.status = 200
End Function

Private Function UPS_ParseShipmentResponse(ByVal oResponse As Scripting.Dictionary) As ShipmentResponse
  Dim tShipmentResponse As ShipmentResponse
  Dim oShipmentResults As New Scripting.Dictionary
  
  If Not oResponse.Exists("ShipmentResponse") Then
    tShipmentResponse.sErrMsg = "Missing response element: ShipmentResponse"
    Return tShipmentResponse
  End If

  Set oShipmentResults = oResponse("ShipmentResponse")("ShipmentResults")

  If TypeName(oShipmentResults("PackageResults")) = "IDictionary" Then
    tShipmentResponse.sTrackingNumber = oShipmentResults("PackageResults")("TrackingNumber")
    tShipmentResponse.sLabelImageBytes = oShipmentResults("PackageResults")("ShippingLabel")("GraphicImage")
  Else
    tShipmentResponse.sTrackingNumber = oShipmentResults("PackageResults")(0)("TrackingNumber")
    tShipmentResponse.sLabelImageBytes = oShipmentResults("PackageResults")(0)("ShippingLabel")("GraphicImage")
  End If

  ' Trapping error if Negotiated Rate does not exist then use the standard rate  PD 02-25-2025
  If Not oShipmentResults.Exists("NegotiatedRateCharges") Then
      tShipmentResponse.nCost = CCur(oShipmentResults("ShipmentCharges")("TotalCharges")("MonetaryValue"))
  Else
      tShipmentResponse.nCost = CCur(oShipmentResults("NegotiatedRateCharges")("TotalCharge")("MonetaryValue"))
  End If

  Return tShipmentResponse
End Function

Private Function UPS_CreateShipmentRequestJson( _
  ByVal fromAddress As AddressInfo, _
  ByVal toAddress As AddressInfo, _
  ByVal nWeight As Currency, _
  ByVal sAccount As String, _
  ByVal sDesc As String, _
  ByVal sReference1 As String, _
  ByVal sReference2 As String, _
  Optional ByVal bMailInnovations As Boolean, _
  Optional ByVal sMailClass As String, _
  Optional ByVal tDimensions As Dimensions _
) As String
  Dim vbsJson As New vbsJson
  Dim oDoc As New Scripting.Dictionary

  Dim sMailClassComponents() As String
  Dim sMailClassCode As String
  Dim sMailClassDescription As String
  Dim sWeightUOM As String
  sWeightUOM = "LBS"

  If bMailInnovations Then
    sMailClassComponents = Split(sMailClass, "-")
    sMailClassCode = Trim(sMailClassComponents(0))
    sMailClassDescription = Trim(sMailClassComponents(1))

    If InStr("61,62,67", sMailClassCode) > 0 Then
      sWeightUOM = "OZS"
      nWeight *= 16.0
    End If
  End If

  With oDoc
    .Add("ShipmentRequest", New Scripting.Dictionary)
    With .Item("ShipmentRequest")
      .Add("Request", New Scripting.Dictionary)
      With .Item("Request")
        .Add("RequestOption", "validate")
      End With

      .Add("Shipment", New Scripting.Dictionary)
      With .Item("Shipment")
        .Add("USPSEndorsement", "5")
        .Add("PackageID", sReference2)

        .Add("ShipmentRatingOptions", New Scripting.Dictionary)
        With .Item("ShipmentRatingOptions")
          .Add("NegotiatedRatesIndicator", "X")
        End With

        .Add("Shipper", New Scripting.Dictionary)
        With .Item("Shipper")
          .Add("Name", fromAddress.sName)
          .Add("ShipperNumber", sAccount)

          .Add("Address", New Scripting.Dictionary)
          With .Item("Address")
            Dim aShipperAddressLine(0 To 2) As String
            aShipperAddressLine(0) = fromAddress.sLine1
            aShipperAddressLine(1) = fromAddress.sLine2
            aShipperAddressLine(2) = fromAddress.sLine3
            .Add("AddressLine", aShipperAddressLine)
            .Add("City", fromAddress.sCity)
            .Add("StateProvinceCode", fromAddress.sState)
            .Add("PostalCode", fromAddress.sZip)
            .Add("CountryCode", "US")
          End With
        End With

        .Add("ShipTo", New Scripting.Dictionary)
        With .Item("ShipTo")
          .Add("Name", Trim(Left(toAddress.sName, 35)))

          .Add("Address", New Scripting.Dictionary)
          With .Item("Address")
            Dim aShipToAddressLine(0 To 2) As String
            aShipToAddressLine(0) = toAddress.sLine1
            aShipToAddressLine(1) = toAddress.sLine2
            aShipToAddressLine(2) = toAddress.sLine3
            .Add("AddressLine", aShipToAddressLine)
            .Add("City", toAddress.sCity)
            .Add("StateProvinceCode", toAddress.sState)
            .Add("PostalCode", toAddress.sZip)
            .Add("CountryCode", "US")
          End With
        End With

        .Add("PaymentInformation", New Scripting.Dictionary)
        With .Item("PaymentInformation")
          .Add("ShipmentCharge", New Scripting.Dictionary)
          With .Item("ShipmentCharge")
            .Add("Type", "01")
            .Add("BillShipper", New Scripting.Dictionary)
            With .Item("BillShipper")
              .Add("AccountNumber", sAccount)
            End With
          End With
        End With

        .Add("Service", New Scripting.Dictionary)
        With .Item("Service")
          If bMailInnovations Then
            .Add("Code", "M4")
            .Add("Description", "UPS Expedited Mail Innovations")
          Else
            .Add("Code", "03")
            .Add("Description", "Ground")
          End If
        End With

        Dim aPackage(0 To 0) As Scripting.Dictionary
        Set aPackage(0) = New Scripting.Dictionary
        .Add("Package", aPackage)
        With aPackage(0)
          .Add("Description", sDesc)

          If bMailInnovations Then
            .Add("Dimensions", New Scripting.Dictionary)
            With .Item("Dimensions")
              .Add("UnitOfMeasurement", New Scripting.Dictionary)
              With .Item("UnitOfMeasurement")
                .Add("Code", "IN")
                .Add("Description", "Inches")
              End With
              .Add("Length", tDimensions.nLength)
              .Add("Width", tDimensions.nWidth)
              .Add("Height", tDimensions.nHeight)
            End With
          End If
          .Add("Packaging", New Scripting.Dictionary)
          With .Item("Packaging")
            If bMailInnovations Then
              .Add("Code", sMailClassCode)
              .Add("Description", sMailClassDescription)
            Else
              .Add("Code", "02")
              .Add("Description", "Customer Supplied Package")
            End If
          End With

          .Add("PackageWeight", New Scripting.Dictionary)
          With .Item("PackageWeight")
            .Add("UnitOfMeasurement", New Scripting.Dictionary)
            With .Item("UnitOfMeasurement")
              .Add("Code", sWeightUOM)
            End With
            .Add("Weight", CStr(nWeight))
          End With

          .Add("PackageServiceOptions", "")

          Dim aReferenceNumber(0 To 1) As Scripting.Dictionary
          Set aReferenceNumber(0) = New Scripting.Dictionary
          With aReferenceNumber(0)
            .Add("Value", sReference1)
          End With
          Set aReferenceNumber(1) = New Scripting.Dictionary
          With aReferenceNumber(1)
            .Add("Value", sReference2)
          End With
          .Add("ReferenceNumber", aReferenceNumber)
        End With
      End With

      .Add("LabelSpecification", New Scripting.Dictionary)
      With .Item("LabelSpecification")
        .Add("LabelImageFormat", New Scripting.Dictionary)
        With .Item("LabelImageFormat")
          .Add("Code", "GIF")
        End With

        .Add("LabelStockSize", New Scripting.Dictionary)
        With .Item("LabelStockSize")
          .Add("Height", "6")
          .Add("Width", "4")
        End With
      End With
    End With
  End With

  Return vbsJson.Encode(oDoc)
End Function
</Code>
