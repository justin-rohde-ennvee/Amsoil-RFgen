<Record FileDesc="UPS Shipping API" FileVersion="5.0.8.0" Desc="UPS Shipping API" Group="UPS" />
<Code>
Option Explicit
'#Language "WWB-COM"

Public Function UPS_CreateShipment( _
  ByVal nMCU As Long, _
  ByVal nSHAN As Long, _
  ByVal nWeight As Currency, _
  ByVal sAccount As String, _
  ByVal sDesc As String, _
  ByVal nDOCO As Long, _
  ByVal sLPID As String, _
  Optional ByVal bMailInnovations As Boolean = False, _
  Optional ByVal sMailClass As String = "" _
) As ShipmentResponse
  Dim fromAddress As AddressInfo
  Dim toAddress As AddressInfo
  Dim sBody As String
  Dim sToken As String
  Dim bSuccess As Boolean
  Dim sErrMsg As String
  Dim sResponseStatus As String
  Dim sResponseText As String
  Dim oResponseJson As Scripting.Dictionary
  Dim jsonParser As New VbsJson
  Dim tShipmentResponse As ShipmentResponse
  Dim sCode As String
  Dim sMessage As String

  On Error GoTo OnError

  App.Balloon("Authorizing...", 1)

  If Not UPS_GetToken(sToken, sErrMsg) Then
    tShipmentResponse.sErrMsg = sErrMsg
    Return tShipmentResponse
  End If

  App.Balloon("Sending shipping request...", -1)

  fromAddress = GetAddressInfo(nMCU)
  toAddress = GetAddressInfo(nSHAN)
  sBody = UPS_CreateShipmentRequestJson(fromAddress, toAddress, nWeight, sAccount, sDesc, CStr(nDOCO), sLPID, bMailInnovations, sMailClass)
  bSuccess = UPS_SendShippingRequest(sToken, sBody, sResponseStatus, sResponseText)

  App.Balloon("", 0)

  Set oResponseJson = jsonParser.Decode(sResponseText)

  If Not bSuccess Then
    If Not UPS_ParseResponseError(oResponseJson, sCode, sMessage) Then tShipmentResponse.sErrMsg = "HTTP status code: " & sResponseStatus
    tShipmentResponse.sErrMsg = "(" & sCode & ") " & sMessage
    If sCode = "120202" Then
      tShipmentResponse.sErrMsg &= ( _
        vbNewLine & toAddress.sLine1 & _
        vbNewLine & toAddress.sLine2 & _
        vbNewLine & toAddress.sLine3)
    End If
    Return tShipmentResponse
  End If

  tShipmentResponse = UPS_ParseShipmentResponse(oResponseJson)
  If tShipmentResponse.sErrMsg <> "" Then
    tShipmentResponse.sErrMsg = "Unable to process shipment response: " & vbNewLine & vbNewLine & tShipmentResponse.sErrMsg
    Return tShipmentResponse
  End If

OnError:
  If Err.Number <> 0 Then tShipmentResponse.sErrMsg = "(" & Err.Number & ") " & Err.Description
  Return tShipmentResponse
End Function

Private Function UPS_SendShippingRequest( _
  ByVal sToken As String, _
  ByVal sRequestBody As String, _
  sResponseStatus As String, _
  sResponseText As String _
) As Boolean
  Dim oHttp As New XMLHTTP60
  Const sBaseURL As String = SYS.EnvironmentProperty("UPSBaseURL")

  LogText("UPS_Ship", "UPS_SendShippingRequest", "Request: " & sRequestBody)

  oHttp.open("POST", UPS_BASE_URL & "/api/shipments/v1/ship")
  oHttp.setRequestHeader("Authorization", "Bearer " & sToken)
  oHttp.setRequestHeader("Content-Type", "application/json")
  oHttp.setRequestHeader("Accept", "application/json")
  oHttp.Send(sRequestBody)

  sResponseStatus = CStr(oHttp.status)
  sResponseText = oHttp.responseText

  LogText("UPS_Ship", "UPS_SendShippingRequest", "Response: " & sResponseText)

  Return oHttp.status = 200
End Function

Private Function UPS_ParseShipmentResponse(ByVal oResponse As Scripting.Dictionary) As ShipmentResponse
  Dim tShipmentResponse As ShipmentResponse
  Dim oShipmentResults As New Scripting.Dictionary
  
  If Not oResponse.Exists("ShipmentResponse") Then
    tShipmentResponse.sErrMsg = "Missing response element: ShipmentResponse"
    Return tShipmentResponse
  End If

  Set oShipmentResults = oResponse("ShipmentResponse")("ShipmentResults")

  If TypeName(oShipmentResults("PackageResults")) = "IDictionary" Then
    tShipmentResponse.sTrackingNumber = oShipmentResults("PackageResults")("TrackingNumber")
    tShipmentResponse.sLabelImageBytes = oShipmentResults("PackageResults")("ShippingLabel")("GraphicImage")
  Else
    tShipmentResponse.sTrackingNumber = oShipmentResults("PackageResults")(0)("TrackingNumber")
    tShipmentResponse.sLabelImageBytes = oShipmentResults("PackageResults")(0)("ShippingLabel")("GraphicImage")
  End If

  ' Trapping error if Negotiated Rate does not exist then use the standard rate  PD 02-25-2025
  If Not oShipmentResults.Exists("NegotiatedRateCharges") Then
      tShipmentResponse.nCost = CCur(oShipmentResults("ShipmentCharges")("TotalCharges")("MonetaryValue"))
  Else
      tShipmentResponse.nCost = CCur(oShipmentResults("NegotiatedRateCharges")("TotalCharge")("MonetaryValue"))
  End If

  Return tShipmentResponse
End Function

Private Function UPS_CreateShipmentRequestJson( _
  ByVal fromAddress As AddressInfo, _
  ByVal toAddress As AddressInfo, _
  ByVal nWeight As Currency, _
  ByVal sAccount As String, _
  ByVal sDesc As String, _
  ByVal sReference1 As String, _
  ByVal sReference2 As String, _
  Optional ByVal bMailInnovations As Boolean, _
  Optional ByVal sMailClass As String _
) As String
  Dim vbsJson As New vbsJson
  Dim oDoc As New Scripting.Dictionary

  Dim oShipmentRequest As New Scripting.Dictionary
  Dim oRequest As New Scripting.Dictionary
  oRequest.Add("RequestOption", "validate")
  oShipmentRequest.Add("Request", oRequest)

  Dim oShipment As New Scripting.Dictionary
  oShipment.Add("USPSEndorsement", "5")
  oShipment.Add("PackageID", sReference2)

  Dim oShipmentRatingOptions As New Scripting.Dictionary
  oShipmentRatingOptions.Add("NegotiatedRatesIndicator", "X")
  oShipment.Add("ShipmentRatingOptions", oShipmentRatingOptions)

  Dim oShipper As New Scripting.Dictionary
  oShipper.Add("Name", fromAddress.sName)
  oShipper.Add("ShipperNumber", sAccount)

  Dim oShipperAddress As New Scripting.Dictionary
  Dim aShipperAddressLine(0 To 2) As String
  aShipperAddressLine(0) = fromAddress.sLine1
  aShipperAddressLine(1) = fromAddress.sLine2
  aShipperAddressLine(2) = fromAddress.sLine3
  oShipperAddress.Add("AddressLine", aShipperAddressLine)
  oShipperAddress.Add("City", fromAddress.sCity)
  oShipperAddress.Add("StateProvinceCode", fromAddress.sState)
  oShipperAddress.Add("PostalCode", fromAddress.sZip)
  oShipperAddress.Add("CountryCode", "US")
  oShipper.Add("Address", oShipperAddress)
  oShipment.Add("Shipper", oShipper)

  Dim oShipTo As New Scripting.Dictionary
  oShipTo.Add("Name", Trim(Left(toAddress.sName, 35)))

  Dim oShipToAddress As New Scripting.Dictionary
  Dim aShipToAddressLine(0 To 2) As String
  aShipToAddressLine(0) = toAddress.sLine1
  aShipToAddressLine(1) = toAddress.sLine2
  aShipToAddressLine(2) = toAddress.sLine3
  oShipToAddress.Add("AddressLine", aShipToAddressLine)
  oShipToAddress.Add("City", toAddress.sCity)
  oShipToAddress.Add("StateProvinceCode", toAddress.sState)
  oShipToAddress.Add("PostalCode", toAddress.sZip)
  oShipToAddress.Add("CountryCode", "US")
  oShipTo.Add("Address", oShipToAddress)
  oShipment.Add("ShipTo", oShipTo)

  Dim oPaymentInformation As New Scripting.Dictionary
  Dim oShipmentCharge As New Scripting.Dictionary
  oShipmentCharge.Add("Type", "01")

  Dim oBillShipper As New Scripting.Dictionary
  oBillShipper.Add("AccountNumber", sAccount)
  oShipmentCharge.Add("BillShipper", oBillShipper)
  oPaymentInformation.Add("ShipmentCharge", oShipmentCharge)
  oShipment.Add("PaymentInformation", oPaymentInformation)

  Dim oService As New Scripting.Dictionary
  If bMailInnovations Then
    oService.Add("Code", "M4")
    oService.Add("Description", "UPS Expedited Mail Innovations")
  Else
    oService.Add("Code", "03")
    oService.Add("Description", "Ground")
  End If
  oShipment.Add("Service", oService)

  Dim aPackage(0 To 0) As Scripting.Dictionary
  Dim oPackage1 As New Scripting.Dictionary
  oPackage1.Add("Description", sDesc)

  Dim oPackaging As New Scripting.Dictionary
  If bMailInnovations Then
    Dim sMailClassComponents() As String
    sMailClassComponents = Split(sMailClass, "-")
    oPackaging.Add("Code", Trim(sMailClassComponents(0)))
    oPackaging.Add("Description", Trim(sMailClassComponents(1)))
  Else
    oPackaging.Add("Code", "02")
    oPackaging.Add("Description", "Customer Supplied Package")

  End If

  oPackage1.Add("Packaging", oPackaging)

  Dim oPackageWeight As New Scripting.Dictionary
  Dim oUnitOfMeasurement As New Scripting.Dictionary
  oUnitOfMeasurement.Add("Code", "LBS")
  oPackageWeight.Add("UnitOfMeasurement", oUnitOfMeasurement)
  oPackageWeight.Add("Weight", CStr(nWeight))

  oPackage1.Add("PackageWeight", oPackageWeight)
  oPackage1.Add("PackageServiceOptions", "")

  Dim aReferenceNumber(0 To 1) As Scripting.Dictionary
  Dim oReferenceNumber1 As New Scripting.Dictionary
  oReferenceNumber1.Add("Value", sReference1)
  Set aReferenceNumber(0) = oReferenceNumber1

  Dim oReferenceNumber2 As New Scripting.Dictionary
  oReferenceNumber2.Add("Value", sReference2)
  Set aReferenceNumber(1) = oReferenceNumber2
  oPackage1.Add("ReferenceNumber", aReferenceNumber)
  Set aPackage(0) = oPackage1
  oShipment.Add("Package", aPackage)
  oShipmentRequest.Add("Shipment", oShipment)

  Dim oLabelSpecification As New Scripting.Dictionary
  Dim oLabelImageFormat As New Scripting.Dictionary
  oLabelImageFormat.Add("Code", "GIF")
  oLabelSpecification.Add("LabelImageFormat", oLabelImageFormat)

  Dim oLabelStockSize As New Scripting.Dictionary
  oLabelStockSize.Add("Height", "6")
  oLabelStockSize.Add("Width", "4")
  oLabelSpecification.Add("LabelStockSize", oLabelStockSize)
  oShipmentRequest.Add("LabelSpecification", oLabelSpecification)
  oDoc.Add("ShipmentRequest", oShipmentRequest)

  Return vbsJson.Encode(oDoc)
End Function
</Code>
